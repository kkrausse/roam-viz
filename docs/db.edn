#datascript/DB {:schema nil, :datoms [[1 :nodes/content ":PROPERTIES:\n:ID:       f08e30aa-e83b-451f-88b7-fe954bab2f6e\n:END:\n#+title: supplements\n\n[[id:b77d4578-bc50-42a8-94c4-b11d27f78837][food]]\n" 536870913] [1 :nodes/id "f08e30aa-e83b-451f-88b7-fe954bab2f6e" 536870913] [1 :nodes/properties {"CATEGORY" "20221017163307-supplements", "ID" "f08e30aa-e83b-451f-88b7-fe954bab2f6e", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221017163307-supplements.org", "PRIORITY" "B"} 536870913] [1 :nodes/title "supplements" 536870913] [1 :nodes/value 6.080754041671753 536870913] [2 :nodes/content ":PROPERTIES:\n:ID:       dfca52e1-f74a-4ce3-9e54-5f8c3f47221c\n:END:\n#+title: ignorance\n\nkey insights\n- intelligence comes at a more fundamental level of thought.\n- success / goal setting is at a more fundamental level too.\n\n** December\nwhat I liked:\n- \"It's mainly that fear which causes the ignorance. Knowing it's in your head\n  makes me much more open to feel the pain. Going on a run seems less daunting\n  now. Knowing the nobility of the cause helps. The suffering is not pointless.\n  Probably the most meaningful thing you can do in any given moment is face the\n  pain and experience it fully.\"\n\nwhat I missed:\n- thesis that intelligence comes at a more fundamental habitual thought pattern.\n  It's not like people think where you can just force yourself to do certein\n  habits and you'll get smart. It's a pattern on a moment-by-moment basis where\n  you relate to the world differently.\n  - This holds for other things too. e.g. Sam Altman suggesting that making\n    lists is great in his productivity thing. That won't help. It's a result of\n    his lower level thought pattern of holding himself accountable to his past\n    self.\n\n- I notice that ignorant people are always making their situation out to be\n  worse than it is.\n\n- is this holding yourself accountable really the key to it?\n  - no, that's just one thing. Maybe unrelated to intelligence, but definitely\n    important for success.\n\nMaybe the title should be \"at a lower level than you think\".\n\n\nWhere do you think intelligence comes from? What makes someone intelligent?\n- grok hard ideas and draw further implications\n- generate new interesting ideas\n- some aspect of rational aptitude, but many have this. Really intelligent\n  people can draw in more factors and incorperate aspects of the situation that\n  others haven't thought of.\n\nIf you think of how you think moment to moment\n\n** mid november\n\nI've long thought that intelligence may not be the cause of genetics or\ndiligent study, but more a result of lack of ignorance. In a positive\nway, maybe this is curiosity? Or fastidiousness to truth? Or something else?\n\nSome force must drive someone to understand the world accurately.\n\nBut what even is intelligence?\n\nAbility to see different sides of a situation?\nTo see what others don't see?\nPull apart assumptions and see broader context?\nMake connections to seemingly unrelated things?\nCreativity and open-mindedness?\n\nOne must be willing to feel pain to see truth. If a fact is painful, you can\nshield yourself from it. If believing something is pleasurable, you can make\nyourself believe it. The unconscious force of increasing pleasure must be\ncounterbalanced by something else.\n\nThese forces vary depending on the topic at hand and the power balance\ndetermines how likely the viewpoint adopted is truthful.\n\nNot only that, but it determines the will to pursue truth.\n\nThe ability for someone to see truth in a given moment is dependent on the\nstrength of these forces in that moment. It's sometimes surprising to see how\nintelligent some people can be in some areas while being totally dysfunctional\nin others.\n\nHow does one decrease ignorance?\n- Decrease pain/pleasure forces\n  - Don't tie ideas to your identity\n  - Increase pain tolerance. Learn the feeling and learn to love it.\n  - Accept the pain to make it sting less. Walk right into it. This might be\n    what meditation does. Or detach yoursel from it. See [[id:99e82a29-42ac-47fb-9396-e738b314707a][opening awareness]]\n  - Turn the pain into curiosity.\n  - Feel good! This is how MDMA works. But most people are in a low degree of\n    pain simply bc they are unhealthy and don't realize it.\n- Increase pro-truth forces\n  - stay fastidious to truth? tie that to your identity, but not one specific\n    truth\n  - Be curious?\n\nHow does ignorance come about?\n\nRight now I'm just assuming it's there, but most people don't really see this\nhappening in themself, including me. It doesn't feel tangible.\n\nExample:\nSometimes you get pulled into something--a youtube video, social media, some\nthought story--and you come out a few seconds or minutes later.\nYou literally didn't exist for some period of time. In this way, you can\ndistract yourself from the pain of existence.\n\nIt's so easy to say that this isn't you. You sometimes see someone who can't get\ntheir life together because of how obviously ignorant they are. Usually because\nthey willfully ignore some aspect of themselves that is causing this pattern and\nthey are unwilling to change. If only they looked deeply at what was actually\nhappening then it'd be quite easy for them to accept it and change. But they\ndon't look at that bc it's painful. Or they're afraid of it. They could be\npowerless to do anything about it so why face that?\n\n\nBut you don't see that ignorance is probably a gradient. It's always there, just\na matter of degree. How much can you take? How much pain can you take?\n\nEven writing about this and flushing through the actual process makes it less\ndaunting. It's the knowing that nothing is too much. It's mainly that fear which\ncauses the ignorance. Knowing it's in your head makes me much more open to\nfeel the pain. Going on a run seems less daunting now.\nKnowing the nobility of the cause helps. The suffering is not pointless.\nProbably the most meaningful thing you can do in any given moment is face\nthe pain and experience it fully.\n\nFor what? It translates to other parts of life, certainly. But I think the\nmeaning can be more immediate. The sense of doing what you want to do?\nOf taking in all of life. Not wasting it? What?\n\n\nWhy are some ignorant and others not?\n- some are more ignorant simply bc pain is higher\n\nHow does it connect to THIS present moment?\n\n\nThis topic is a perfect example of how I think I know something and have strong\nopinions, but when it comes time to write about it and pin it down, I don't know\njack shit.\n" 536870913] [2 :nodes/id "dfca52e1-f74a-4ce3-9e54-5f8c3f47221c" 536870913] [2 :nodes/properties {"CATEGORY" "20221114233501-ignorance", "ID" "dfca52e1-f74a-4ce3-9e54-5f8c3f47221c", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221114233501-ignorance.org", "PRIORITY" "B"} 536870913] [2 :nodes/title "ignorance" 536870913] [2 :nodes/value 2.0 536870913] [3 :nodes/content ":PROPERTIES:\n:ID:       2ff63832-112d-4b04-ad11-5a68944916bc\n:END:\n#+title: redis labs notes\n\n[[id:a5b210c1-8236-4e1f-8a96-f10047885e5f][databases]]\n\nquestions\n\n- how much spare memory should we allow at any given time?\n  -\n- what's the downside of just having 2 nodes for stage? or one node?\n- \"The proxy simplifies the cluster operation, from the application or Redis\n  client point of view, by enabling the use of a standard Redis client.\"\n  \"You can connect an application to a single Redis process or a clustered\n  database without any difference in the application logic.\"\n  - does this mean we change our client to just be the regular client?\n    - see irs\n  - is there any added benefit in still using the cluster client? i.e. makes\n    it HA if the proxy endpoint goes down?\n- can we increase the number of shards later?\n  - or we can only double it?\n  - ANS: we CANNOT incrementally add one shard!\n- how is HA currently configured?\n  see https://docs.redis.com/latest/rs/concepts/high-availability/replication/\n  - check if IGraph does some sort of zone awareness thing\n- do we care about db persistence? https://docs.redis.com/latest/rs/concepts/memory-performance/#database-persistence\n  either snapshots or AoF's\n  - ANS\n  - AoF's every second. We're enabling every second\n  - make new s3 buckets for the backups\n- can we run Lua scripts / define functions? are there any restrictions around this?\n  - what is the retention of defined functions? Like do you just define it\n    once and it's guarenteed to be there for the life of the database?\n  - in https://docs.redis.com/latest/rs/concepts/high-availability/clustering/\n    \"All keys used by a Lua script must be mapped to the same slot and must be\n    provided as arguments to the EVAL / EVALSHA commands\"\n- shards vs nodes relationship\n  - database size, throughput.\n\n- separate support ticket for this test cluster and keep it up to date.\n- create 2 cluster, stg, prod.\n-\n\ni3.2xlarge has 61 GiB memory\n\n*FINAL*\nus-west-2 -- 52 shards -- 5 i3.4xlarge nodes, multi-AZ\n\napril 15 he'll be off for a week.\n\n#+begin_src python :results output raw\nprint(11 * 122)\nprint(\"RAM:Flash ratio\")\nprint(61 / 122)\n#+end_src\n\n\n\nreading https://docs.redis.com/latest/rs/concepts/\n\n- WAN replication (across datacenters)?\n- \"The number of shards per database is configurable and depend on the\n  throughput needs of the applications.\"\n  - FALSE! wtf?? here https://docs.redis.com/latest/rs/concepts/memory-performance/\n    says \"Your memory limit will also determine the number of shards you’ll need.\"\n- \"The administrator can choose the RAM vs Flash ratio and adjust that anytime in the lifetime of the database without downtime.\"\n- \"when a key does not contain the ‘{…}’ pattern, the entire key’s name is used for hashing.\"\n- \"Keys are always stored in RAM, but Redis on Flash manages the location of their values.\"\n\n- according to Jason, memory per shard is actually bigger.\n\n- our needs:\n  -\n\n\ncurrent estimate:\n\ngrowth rate\n\n#+begin_src python\nstart = 84.1\nplus_month = 86.1\n\nreturn\n#+end_src\n\n#+begin_src python\n\n# usage on cloudwatch\nusing = 86.2\nper_node = 105.81\nnum_nodes = 26 / 2 # half replicated\nbuffer_mult = 1 / 0.9\n\nreturn (using / 100) * num_nodes * per_node * buffer_mult\n#+end_src\n\n#+RESULTS:\n: 1317.4520666666667\n\nwhich means we'd want these shards:\n\n#+begin_src python\nimport math\ngb_per_shard = 50\nreplication_factor = 2\nreturn (replication_factor * math.ceil(1317.5 / gb_per_shard), \"taco\")\n#+end_src\n\n#+RESULTS:\n| 54 | taco |\n\ni3.4xlarge\n\n\nwrites\n200k ops/sec\nbut could lower this to 100k\n\nreads\n30k regular reads\n" 536870913] [3 :nodes/id "2ff63832-112d-4b04-ad11-5a68944916bc" 536870913] [3 :nodes/properties {"CATEGORY" "20220404135718-redis_labs_notes", "ID" "2ff63832-112d-4b04-ad11-5a68944916bc", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220404135718-redis_labs_notes.org", "PRIORITY" "B"} 536870913] [3 :nodes/title "redis labs notes" 536870913] [3 :nodes/value 2.0 536870913] [4 :nodes/content ":PROPERTIES:\n:ID:       269bc84d-7abe-4059-a90a-f35c254bddfb\n:END:\n#+title: paul graham\n\nOne of my favorite quotes of all time:\n\nfrom what I worked on:\n\n#+begin_quote\nwhen you find yourself drawn to some kind of work despite its current lack of\nprestige, it's a sign both that there's something real to be discovered there,\nand that you have the right kind of motives. Impure motives are a big danger for\nthe ambitious. If anything is going to lead you astray, it will be the desire to\nimpress people. So while working on things that aren't prestigious doesn't\nguarantee you're on the right track, it at least guarantees you're not on the\nmost common type of wrong one.\n#+end_quote\n\n#+begin_quote\nWell, how had I chosen what to work on in the past? I wrote an essay for myself\nto answer that question, and I was surprised how long and messy the answer\nturned out to be. If this surprised me, who'd lived it, then I thought perhaps\nit would be interesting to other people, and encouraging to those with similarly\nmessy lives.\n#+end_quote\n" 536870913] [4 :nodes/id "269bc84d-7abe-4059-a90a-f35c254bddfb" 536870913] [4 :nodes/properties {"CATEGORY" "20210508120434-paul_graham", "ID" "269bc84d-7abe-4059-a90a-f35c254bddfb", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210508120434-paul_graham.org", "PRIORITY" "B"} 536870913] [4 :nodes/title "paul graham" 536870913] [4 :nodes/value 6.166666746139526 536870913] [5 :nodes/content ":PROPERTIES:\n:ID:       1b40a630-fc14-4587-9d7c-348dbf856fa2\n:END:\n#+title: carnivore cast\n\n[[id:334ffe1d-43dd-4f13-99a0-67cf89b73328][carnivore]]\n\npodcast about carnivore\n\ntodo:\n- doug right (on raw meat)\n\n** Andrew Graf @CarnivoreAntMan\n- [[id:f4a59434-6192-418c-bb7d-fb1b8412f45a][raw meat]]\n- why raw?\n  - indescriminate denaturization\n    - proteins are sensitive, you destroy structure / functionality\n    - humans are full of enzymes and recognitions. When you denature stuff,\n      your body no longer recognizes it\n    - your satiety is fucked up.\n      - you get this cocktail of foreign chemicals that give this cool taste but\n        that your body can not detect chemicals\n      - this is inflammatory if you have leaky gut\n    - there's even less waste (less poop)\n    - less inflammatory\n- no salt!\n- wild caught fish only\n- does raw liver & ground beef every day\n" 536870913] [5 :nodes/id "1b40a630-fc14-4587-9d7c-348dbf856fa2" 536870913] [5 :nodes/properties {"CATEGORY" "20220422092938-carnivore_cast", "ID" "1b40a630-fc14-4587-9d7c-348dbf856fa2", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220422092938-carnivore_cast.org", "PRIORITY" "B"} 536870913] [5 :nodes/title "carnivore cast" 536870913] [5 :nodes/value 2.0 536870913] [6 :nodes/content ":PROPERTIES:\n:ID:       3b618cff-e581-4cf0-b16b-91e563e72436\n:END:\n#+title: econ-geopolitics\n\n- this guy interviewed stripe founder and seems dope https://noahpinion.substack.com/people/8243895-noah-smith\n- ofc, zeihan https://zeihan.com/newsletter/\n- roots of progress https://rootsofprogress.org/\n- PG's twitter (currently at March 8)\n" 536870913] [6 :nodes/id "3b618cff-e581-4cf0-b16b-91e563e72436" 536870913] [6 :nodes/properties {"CATEGORY" "20210318212643-econ_geopolitics", "ID" "3b618cff-e581-4cf0-b16b-91e563e72436", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210318212643-econ_geopolitics.org", "PRIORITY" "B"} 536870913] [6 :nodes/title "econ-geopolitics" 536870913] [6 :nodes/value 3.728888839483261 536870913] [7 :nodes/content ":PROPERTIES:\n:ID:       5fe502a0-db85-46cd-99c2-d7fce89af217\n:END:\n#+title: paleomedicina\n\n[[id:334ffe1d-43dd-4f13-99a0-67cf89b73328][carnivore]]\n\nhttps://www.paleomedicina.com/en/stone-age-diet-workout\n" 536870913] [7 :nodes/id "5fe502a0-db85-46cd-99c2-d7fce89af217" 536870913] [7 :nodes/properties {"CATEGORY" "20210712072420-paleomedicina", "ID" "5fe502a0-db85-46cd-99c2-d7fce89af217", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210712072420-paleomedicina.org", "PRIORITY" "B"} 536870913] [7 :nodes/title "paleomedicina" 536870913] [7 :nodes/value 2.0 536870913] [8 :nodes/content ":PROPERTIES:\n:ID:       f8d477e4-c321-4864-93fc-38dc7db66fc6\n:END:\n#+title: kev-nrepl\n\nKind of a braindump of clojure dev environment things I want to build.\n\nBut kev-nrepl is also the name of the clojure side of an nrepl middleware currently\n\n\nwell, what's wrong with cider?\n\n- have to wait for first function\n- no \"goto usage\"\n- no goto java/scala source\n- don't like how loading's done.\n  - I think current buffer's ns should eagerly load (in background) and font lock when complete\n  - EVERYTHING should be async. except maybe goto's\n\none goal is to replace cider..\n\nnow idk though because clojure-mode seems to be the weak link\n\n* Checklist to Replace Cider\n** completion\nif I do this, I can migrate off of cider immediately.\nCurrently this is the only thing I really rely on I think.\nBC Eval doesn't need the mode enabled.\n#+begin_src\ncider-completion-at-point\n    (completion-table-dynamic #'cider-complete)\n        (cider-sync-request:complete)\n    ;; completion-table-dynamic calls cider-complete for each substring\n    ;; this might be very suboptimal. I wonder how company mode fits in\n\n    ;; then a bunch of company mode annotations.\n#+end_src\n** font locking\ndefinitely would improve workflow.\nNot insanely urgent\n** goto's\nwould immediately add value on top of cider mode so could be useful\nBUT going to all usages could be relatively difficult without kondo\n\n** eval\nlow prio since cider works\n\nalso, could just do this with prepl maybe? but idk I might want to maintain some state\nwith it\n" 536870913] [8 :nodes/id "f8d477e4-c321-4864-93fc-38dc7db66fc6" 536870913] [8 :nodes/properties {"CATEGORY" "20210318212843-kev_nrepl", "ID" "f8d477e4-c321-4864-93fc-38dc7db66fc6", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210318212843-kev_nrepl.org", "PRIORITY" "B"} 536870913] [8 :nodes/title "kev-nrepl" 536870913] [8 :nodes/value 3.5 536870913] [9 :nodes/content ":PROPERTIES:\n:ID:       334ffe1d-43dd-4f13-99a0-67cf89b73328\n:END:\n#+title: carnivore\n" 536870913] [9 :nodes/id "334ffe1d-43dd-4f13-99a0-67cf89b73328" 536870913] [9 :nodes/properties {"CATEGORY" "20210710111802-carnivore", "ID" "334ffe1d-43dd-4f13-99a0-67cf89b73328", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210710111802-carnivore.org", "PRIORITY" "B"} 536870913] [9 :nodes/title "carnivore" 536870913] [9 :nodes/value 11.561111211776733 536870913] [10 :nodes/content ":PROPERTIES:\n:ID:       3f2f352f-af50-4b01-ae2c-791bbb145ee1\n:ROAM_ALIASES: lipopolysaccharide\n:END:\n#+title: lps\n\n[[id:b77d4578-bc50-42a8-94c4-b11d27f78837][food]]\n\n\n** Protective effects of glycine against lipopolysaccharide-induced intestinal apoptosis and inflammation\n:PROPERTIES:\n:ID:       f48d481f-7d28-4b1a-bec3-e236f600fb9f\n:END:\nhttps://link.springer.com/article/10.1007/s00726-021-03011-w\n\ncrazy! so maybe meat stock is actually super good!\n\n5 mg/kg for rats. equivalent to humans, divide by 7.4 according to\nhttps://www.ncbi.nlm.nih.gov/pmc/articles/PMC4804402/\n\nso for me, 30g of glycine!\n\nit probably needs fat to be absoarbed correctly\n\naccording to this, https://academic.oup.com/jas/article/94/6/2603/4702294\nmuscle meat is only like 4% glycine!\nSo I'm getting like none!\n\n** Interaction between Lipopolysaccharide and Gut Microbiota in Inflammatory Bowel Diseases\nCandelli, M.; Franza, L.; Pignataro, G.; Ojetti, V.; Covino, M.; Piccioni, A.; Gasbarrini, A.; Franceschi, F. Interaction between Lipopolysaccharide and Gut Microbiota in Inflammatory Bowel Diseases. Int. J. Mol. Sci. 2021, 22, 6242. https://doi.org/10.3390/ijms22126242\nhttps://sci-hub.se/10.3390/ijms22126242\n\nsummary:\n- lps can by systemic and cause systemic inflammation leading to immune pathology\n  and gut inflammation which causes microbiome dysbiosis, which causes disease.\n\n- on sci hub\n- GALT = gut-associated lymphoid tissue\n  GM = gut microbiota\n    #+begin_quote\n    The first site in which LPS can exert its inflammatory action is the gut:\n    both GM and gut-associated lymphoid tissue (GALT) are influenced by LPS and\n    shift towards an inflammatory pattern.\n    #+end_quote\n- _metabolic endotoxemia_ - condition that modifies gut epithelial barrier to\n  allow lps into bloodstream\n\n#+begin_quote\nB-lymphocytes also drive gut inflammation in patients suffering from IBD,\nproducing a wide array of antibodies such as anti-pancreatic antibodies,...\nthese antibodies seem capable of cross-reacting with commonly present bacteria\nin the intestinal lumen [20].\n#+end_quote\n\nI should check my C-reactive protein (CRP)\n\n#+begin_quote\nWhile local changes are the drivers of IBD, systemic inflammation is what allows it to\nprogress. Indeed, it has been observed that in patients with IBD, inflammatory markers\nsuch as C-reactive protein (CRP) are increased used to monitor the progression of the\ndisease [23].\n#+end_quote\n\n- inflammation progresses the disease and causes growth of aero tolerant bacteria.\n  So the inflammation gives more oxigen\n\n#+begin_quote\nin inflamed conditions, bacteria that determine inflammation also tend to\nincrease. These changes are likely a consequence of the increased oxidative\nstatus, which is favorable for aero tolerant taxa such as Proteobacteria and\nActinobacteria [35].\n#+end_quote\n\n#+begin_quote\na fecal transplant in patients with both ulcerative colitis and Crohn’s disease:\nnot only did the disease go into remission, but also the whole immune system\nradically changed, demonstrating that, while the GM is not causative in the\ndevelopment of IBD, it is a key promoter [46].\n#+end_quote\n" 536870913] [10 :nodes/id "f48d481f-7d28-4b1a-bec3-e236f600fb9f" 536870913] [10 :nodes/properties {"CATEGORY" "20220917232614-lps", "ID" "f48d481f-7d28-4b1a-bec3-e236f600fb9f", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220917232614-lps.org", "PRIORITY" "B", "ITEM" "Protective effects of glycine against lipopolysaccharide-induced intestinal apoptosis and inflammation"} 536870913] [10 :nodes/title "Protective effects of glycine against lipopolysaccharide-induced intestinal apoptosis and inflammation" 536870913] [10 :nodes/value 2.0 536870913] [11 :nodes/content ":PROPERTIES:\n:ID:       c91cb8e4-fcc0-4f01-a6ff-8508ea47ef8f\n:END:\n#+title: joe-rogan-experience\n\n* To Watch\n- doublas murray\n" 536870913] [11 :nodes/id "c91cb8e4-fcc0-4f01-a6ff-8508ea47ef8f" 536870913] [11 :nodes/properties {"CATEGORY" "20210320134732-joe_rogan_experience", "ID" "c91cb8e4-fcc0-4f01-a6ff-8508ea47ef8f", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210320134732-joe_rogan_experience.org", "PRIORITY" "B"} 536870913] [11 :nodes/title "joe-rogan-experience" 536870913] [11 :nodes/value 2.500000089406967 536870913] [12 :nodes/content ":PROPERTIES:\n:ID:       4e6061e9-b883-4b44-ba62-c9f4fb15262f\n:END:\n#+title: productivity\n" 536870913] [12 :nodes/id "4e6061e9-b883-4b44-ba62-c9f4fb15262f" 536870913] [12 :nodes/properties {"CATEGORY" "20220721135322-productivity", "ID" "4e6061e9-b883-4b44-ba62-c9f4fb15262f", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220721135322-productivity.org", "PRIORITY" "B"} 536870913] [12 :nodes/title "productivity" 536870913] [12 :nodes/value 3.041666567325592 536870913] [13 :nodes/content ":PROPERTIES:\n:ID:       9eead69a-a0bf-410e-a46c-cd0b626e6457\n:END:\n#+title: blog ideas\n\n- why budhism is life-affirming\n  - an axiomatic approach to meditation\n    - requires you to believe that there is a qualitative difference in\n      attentiveness. The extent to which you are aware of your surroundings,\n      thoughts, feelings, body state, etc.--all input--varies.\n    - This variation is because you sense the input is disagreeable.\n- a nutrition one?\n  - I don't feel like I have enough to say on this\n  - ppl don't understand that there's something more to the fast\n    - That study where they fasted ppl at beginning and after\n      3 months they had changes different from control\n" 536870913] [13 :nodes/id "9eead69a-a0bf-410e-a46c-cd0b626e6457" 536870913] [13 :nodes/properties {"CATEGORY" "20220213222523-blog_ideas", "ID" "9eead69a-a0bf-410e-a46c-cd0b626e6457", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220213222523-blog_ideas.org", "PRIORITY" "B"} 536870913] [13 :nodes/title "blog ideas" 536870913] [13 :nodes/value 2.0 536870913] [14 :nodes/content ":PROPERTIES:\n:ID:       e121b27a-4abc-46ea-b0c2-747512090ce4\n:END:\n#+title: reading-exploration\n\n\nthis will by my temporary thought / interesting link dump\n\nit's better to give a lot of startups an 8 minute interview than to be more\nsure.\n\n* To Read\n** books\n- douglas adams https://en.wikipedia.org/wiki/Douglas_Adams\n- douglas murray madness of crouds (and his joe rogan!)\n- 50 Economics Classics\n- [[id:de85c368-7840-4102-b527-2d1c24d164d1][disunited-nations-zeihan]] disunited nations by peter zeihan\n- [[id:bdd841b3-53b0-4b0c-a81a-4b247435b4be][how-to-take-smart-notes]]\n** online\n- [[id:c91cb8e4-fcc0-4f01-a6ff-8508ea47ef8f][joe-rogan-experience]]\n- [[id:46fdb2ee-efa8-4fdb-bb6a-0e4be5437335][nix]]\n- [[https://polylith.gitbook.io/polylith/][polylith]] software architecture\n- remaining tdd sucks thing https://youtu.be/EZ05e7EMOLM?t=2103 .\n  - also, the book he mentioned of the OG creator of tdd seems cool\n- a clojure metrics collector https://riemann.io/\n- git branches /rebasing https://learngitbranching.js.org/\n- non GC lisp. insane - https://github.com/carp-lang/Carp\n- check out r/clojure tools sidebar. Seems like they have cool stuff. and a clojure ide.\n*** fogus blog\n:PROPERTIES:\n:ID:       65b168ad-644b-40d8-90f2-05f5c48a1a44\n:END:\n- http://blog.fogus.me/2021/\n- he seems like a great writer\n\n\n\n* Read\n** online\n- [[id:684beca0-7f73-4988-8a13-2e72198247f2][burnout-prevention-and-recovery]]\n" 536870913] [14 :nodes/id "65b168ad-644b-40d8-90f2-05f5c48a1a44" 536870913] [14 :nodes/properties {"CATEGORY" "20210318221627-reading_exploration", "ID" "65b168ad-644b-40d8-90f2-05f5c48a1a44", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210318221627-reading_exploration.org", "PRIORITY" "B", "ITEM" "fogus blog"} 536870913] [14 :nodes/title "fogus blog" 536870913] [14 :nodes/value 2.0 536870913] [15 :nodes/content ":PROPERTIES:\n:ID:       b719d97b-7bf0-4a56-8188-5c64bb322c46\n:END:\n#+title: org mode\n" 536870913] [15 :nodes/id "b719d97b-7bf0-4a56-8188-5c64bb322c46" 536870913] [15 :nodes/properties {"CATEGORY" "20210327181742-org_mode", "ID" "b719d97b-7bf0-4a56-8188-5c64bb322c46", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210327181742-org_mode.org", "PRIORITY" "B"} 536870913] [15 :nodes/title "org mode" 536870913] [15 :nodes/value 4.14000004529953 536870913] [16 :nodes/content ":PROPERTIES:\n:ID:       2bb8fe67-0197-422e-a4a9-f392764bbceb\n:END:\n#+title: startup ideas\n\n* online farmers market - grocery thing\n- problems:\n  - suppliers. suppliers won't sell to you at prices that will undercut their\n    distributors or they risk losing that relationship..\n    - this is why walmart works. because they're big enough to be supplier's sole\n      distributor\n- you buy a *supplier's* product\n** marc toney\n- you have to change the behavior of the consumer\n- basically a farmers market online\n- popcorn app\n  - basically instacard except in 15 minutes\n    a moving van with items in it\n- what's the value prop?\n  - for the\n- who would benefit most?\n- i.e. who are your users, who would benefit\n- how is this different from the existing method?\n  - whole foods / specialty stores\n  - farmers market\n- what problem are you trying to solve?\n  - farmers market problem.\n" 536870913] [16 :nodes/id "2bb8fe67-0197-422e-a4a9-f392764bbceb" 536870913] [16 :nodes/properties {"CATEGORY" "20211016222015-startup_ideas", "ID" "2bb8fe67-0197-422e-a4a9-f392764bbceb", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20211016222015-startup_ideas.org", "PRIORITY" "B"} 536870913] [16 :nodes/title "startup ideas" 536870913] [16 :nodes/value 2.9999999403953552 536870913] [17 :nodes/content ":PROPERTIES:\n:ID:       6577d39e-e0d5-442a-95b6-42409a3b904e\n:END:\n#+title: ekata svc-2486 slo-based monitoring\n\n* migrate other services (SVC-2513)\n:PROPERTIES:\n:ID:       a80369a0-febe-4a9f-8ba8-31fb89b263db\n:END:\n- [[https://jira.us-west-2.ec2.pages/browse/SVC-2513][ticket SVC-2513]]\n- worry about all of them. see [[https://docs.google.com/spreadsheets/d/10Gixq1EhgoYsN7_bCiVe7ezmd37z_YyqMdvCCLORU-4/edit#gid=0][sheet]]\n** nss\n- downstreams: idc-ng -- lowest latency is phone_intel which is 100ms\n- ng previous downstreams\n  - tis\n* latency alerting writeup (svc-2535)\n:PROPERTIES:\n:ID:       a4a2ac3d-cec9-4f4e-a235-c44afa3cde0c\n:END:\n** kevins notes\n- Where does the slo document go? should we actually create one or are the dashboards okay??\n- What is going to be the process for other services?\n  - seems like some supporting code will need to be created in prometheus-alert-rules\n** intro\n** burn rate alerting\nWe currently use Multiwindow, Multi-Burn-Rate Alerts from  https://sre.google/workbook/alerting-on-slos/#short_and_long_windows_for_alerting\n\nA /burn rate/ is defined as blah blah\n** defining slo\nsome tips about picking the SLO\n** implementing the alerts\n\n* svc 2486\n** notes\n*** services meeting\n- implement current alerts?\n  - side by side? or replace atomically?\n    - side by side for a little\n  - problems: low urgency ap\n    - run feature tests there?\n    - or disable all together\n    - so yeah we could enable feature tests there.\n- what do w/ low urgency? ticket or just a low urgency alert?\n  - low urgency should be good for now.\n*** post-product\n- email low urgency is fudged (us)\n- business low+high are fudged (us)\n- [X] fix query for /outcome to use outcome ingestor\n*** jason talk\n- have all of core / platform optional and then just require like jeff, janos, imre\n- maybe just not do apac region?\n*** alert problems\n- email low urgency us-west-2\n  - maybe should be raised\n- ao low urgency ap-southeast-1\n  - mitigate w/ feat tests ?\n- aoe low&high ap-southeast\n  - mitigate w/ feat tests (maybe?)\n- mero low&high us-west & apac\n  - us-west only a few days so should be fine\n  - ap-  also a few days but idk if cuz zero traffic\n*** what do:\n  - action items\n    - make application-level status counter (not required)\n    - propose current rules (maybe propose artificial traffic)\n    - talk to product\n  - implement current alerts?\n    - current problems\n      - no application level status code / error counter per endpoint\n      - ao firing all the time for AP\n      - product not wanting them to be this high\n    - talk to team? ignore ao for AP?\n  - talk to product?\n  - svend\n    - ao firing all the time in AP\n    - would our alerts fire specifically against k8s_cluster, track\n    - talk to product\n- [ ] add status to something\n  - should remove promethues ring instrumented metrics and introduce our own\n    counter that includes totals w/ full path\n- problems\n  - ao apac at 3d\n  - aoe apac at a few\n  - email apac\n  - phone eu\n  - trapi flappy\n- would we need to know the api version?\n- my guesstimations\n\n  | api                 | latency p99 slo (in ms) |\n  |---------------------+-------------------------|\n  | trapi               |                     200 |\n  | identity_check      |                     540 |\n  | account_opening     |                     520 |\n  | location_intel      |                     150 |\n  | 3.0/phone_intel     |                     110 |\n  | 4.0/phone_intel     |                     150 |\n  | merchant_onboarding |                     600 |\n  | ao express          |                     150 |\n  | /email              |                     550 |\n  | /phone              |                     300 |\n  | /location           |                     110 |\n\n   {k8s_cluster pro-apps.us-west-2a.ec2.pages, :name slo-alerts-identity_check, :step 5m}\n\n|      :time |             :value |\n|------------+--------------------|\n| 1630724461 | 0.3587368156513323 |\n| 1630724761 | 0.1961835620572401 |\n\n {k8s_cluster pro-apps.us-west-2b.ec2.pages, :name slo-alerts-identity_check, :step 5m}\n\n|      :time |              :value |\n|------------+---------------------|\n| 1630724461 | 0.36670322348525497 |\n| 1630724761 |  0.1834345029544752 |\n\n {k8s_cluster pro-apps.us-west-2b.ec2.pages, :name slo-alerts-merchant_onboarding, :step 360m}\n\n|      :time |               :value |\n|------------+----------------------|\n| 1630268461 |  0.04545455065894548 |\n| 1630311661 |  0.01754530958828408 |\n| 1630333261 | 0.023522351683254304 |\n| 1630354861 |  0.02083333306168855 |\n\n {k8s_cluster pro-apps.us-west-2a.ec2.pages, :name slo-alerts-merchant_onboarding, :step 5m}\n\n|      :time | :value |\n|------------+--------|\n| 1630983361 |      1 |\n\n {k8s_cluster pro-apps.eu-central-1b.prod.pages, :name slo-alerts-phone, :step 120m}\n\n|      :time |              :value |\n|------------+---------------------|\n| 1629476461 | 0.33333333333333337 |\n| 1630621261 |                 0.5 |\n\n {k8s_cluster pro-apps.eu-central-1b.prod.pages, :name slo-alerts-phone, :step 30m}\n\n|      :time | :value |\n|------------+--------|\n| 1629476461 |    0.5 |\n| 1630615861 |      1 |\n\n {k8s_cluster pro-apps.eu-central-1b.prod.pages, :name slo-alerts-phone, :step 360m}\n\n|      :time |              :value |\n|------------+---------------------|\n| 1629490861 | 0.11111111111111105 |\n| 1630635661 |                 0.5 |\n\n {k8s_cluster pro-apps.eu-central-1b.prod.pages, :name slo-alerts-phone, :step 5m}\n\n|      :time | :value |\n|------------+--------|\n| 1629475561 |      1 |\n| 1630615561 |      1 |\n\n\n\n  | api                 | burn rates |           slo guess | current alert                 |\n  |---------------------+------------+---------------------+-------------------------------|\n  | trapi               | [[https://thanos.us-west-2.utility.pages/graph?g0.expr=(%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Ftransaction_risk%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D))%20-%20on%20()%20group_right%0A%20%20%20%20%20%20%20%20%20%20%20sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Ftransaction_risk%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D~%220.1.*%22%7D%5B3d%5D))%20by%20(le))%0A%20%20%20%20%20%20%20%20%20%20%2F%20on%20()%20group_left%20()%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Ftransaction_risk%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D)))%0A%20%20%20%20%20%20%20%20)%20%2F%20(1%20-%200.99)%0A&g0.tab=0&g0.stacked=0&g0.range_input=2w&g0.max_source_resolution=0s&g0.deduplicate=1&g0.partial_response=0&g0.store_matches=%5B%5D][link]]       |                0.13 | low at 0.15; high at 0.3; 10m |\n  | identity_check      | [[https://thanos.us-west-2.utility.pages/graph?g0.expr=(%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Ftransaction_risk%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D))%20-%20on%20()%20group_right%0A%20%20%20%20%20%20%20%20%20%20%20sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Ftransaction_risk%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D~%220.1.*%22%7D%5B3d%5D))%20by%20(le))%0A%20%20%20%20%20%20%20%20%20%20%2F%20on%20()%20group_left%20()%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Ftransaction_risk%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D)))%0A%20%20%20%20%20%20%20%20)%20%2F%20(1%20-%200.99)%0A&g0.tab=0&g0.stacked=0&g0.range_input=2w&g0.max_source_resolution=0s&g0.deduplicate=1&g0.partial_response=0&g0.store_matches=%5B%5D][link]]       |                0.54 | none?                         |\n  | account_opening     | [[https://thanos.us-west-2.utility.pages/graph?g0.expr=(%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Faccount_opening%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D))%20-%20on%20()%20group_right%0A%20%20%20%20%20%20%20%20%20%20%20sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Faccount_opening%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D~%220.4.*%7C0.5.*%22%7D%5B3d%5D))%20by%20(le))%0A%20%20%20%20%20%20%20%20%20%20%2F%20on%20()%20group_left%20()%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Faccount_opening%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D)))%0A%20%20%20%20%20%20%20%20)%20%2F%20(1%20-%200.99)%0A&g0.tab=0&g0.stacked=0&g0.range_input=2w&g0.max_source_resolution=0s&g0.deduplicate=1&g0.partial_response=0&g0.store_matches=%5B%5D][link]]       |                0.49 | high at 0.55; 10m             |\n  | location_intel      | [[https://thanos.us-west-2.utility.pages/graph?g0.expr=(%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Flocation_intel%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D))%20-%20on%20()%20group_right%0A%20%20%20%20%20%20%20%20%20%20%20sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Flocation_intel%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D~%220.1.*%22%7D%5B3d%5D))%20by%20(le))%0A%20%20%20%20%20%20%20%20%20%20%2F%20on%20()%20group_left%20()%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Flocation_intel%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D)))%0A%20%20%20%20%20%20%20%20)%20%2F%20(1%20-%200.99)%0A&g0.tab=0&g0.stacked=0&g0.range_input=2w&g0.max_source_resolution=0s&g0.deduplicate=1&g0.partial_response=0&g0.store_matches=%5B%5D][link]]       |                0.11 | high at 0.2; 10m              |\n  | 3.0/phone_intel     | [[https://thanos.us-west-2.utility.pages/graph?g0.expr=(%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F3.0%2Fphone_intel%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D))%20-%20on%20()%20group_right%0A%20%20%20%20%20%20%20%20%20%20%20sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F3.0%2Fphone_intel%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D~%220.02.*%7C0.018%7C0.016%7C0.014%7C0.012%22%7D%5B3d%5D))%20by%20(le))%0A%20%20%20%20%20%20%20%20%20%20%2F%20on%20()%20group_left%20()%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F3.0%2Fphone_intel%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D)))%0A%20%20%20%20%20%20%20%20)%20%2F%20(1%20-%200.99)%0A&g0.tab=0&g0.stacked=0&g0.range_input=2w&g0.max_source_resolution=0s&g0.deduplicate=1&g0.partial_response=0&g0.store_matches=%5B%5D][link]]       |               0.014 | high at 0.03; 10m             |\n  | 4.0/phone_intel     | [[https://thanos.us-west-2.utility.pages/graph?g0.expr=(%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F4.0%2Fphone_intel%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D))%20-%20on%20()%20group_right%0A%20%20%20%20%20%20%20%20%20%20%20sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F4.0%2Fphone_intel%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D~%220.028%7C0.026%7C0.024%7C0.023%7C0.022%7C0.021%7C0.03.*%22%7D%5B3d%5D))%20by%20(le))%0A%20%20%20%20%20%20%20%20%20%20%2F%20on%20()%20group_left%20()%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F4.0%2Fphone_intel%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D)))%0A%20%20%20%20%20%20%20%20)%20%2F%20(1%20-%200.99)%0A&g0.tab=0&g0.stacked=0&g0.range_input=2w&g0.max_source_resolution=0s&g0.deduplicate=1&g0.partial_response=0&g0.store_matches=%5B%5D][link]]       |               0.023 | high at 0.04; 10m             |\n  | merchant_onboarding | [[https://thanos.us-west-2.utility.pages/graph?g0.expr=(%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Fmerchant_onboarding%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D))%20-%20on%20()%20group_right%0A%20%20%20%20%20%20%20%20%20%20%20sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Fmerchant_onboarding%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D~%220.3.*%22%7D%5B3d%5D))%20by%20(le))%0A%20%20%20%20%20%20%20%20%20%20%2F%20on%20()%20group_left%20()%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Fmerchant_onboarding%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D)))%0A%20%20%20%20%20%20%20%20)%20%2F%20(1%20-%200.99)%0A&g0.tab=0&g0.stacked=0&g0.range_input=2w&g0.max_source_resolution=0s&g0.deduplicate=1&g0.partial_response=0&g0.store_matches=%5B%5D][link]]       |  0.6 (lack of data) | high at 0.8; 10m              |\n  | ao express          | no data?   | 0.10 (but not sure) | high at 0.15; 10m             |\n  | /email              | [[https://thanos.us-west-2.utility.pages/graph?g0.expr=(%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Femail%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D))%20-%20on%20()%20group_right%0A%20%20%20%20%20%20%20%20%20%20%20sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Femail%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D~%220.07%7C0.06%7C0.05%7C0.04%7C0.03%7C0.02%22%7D%5B3d%5D))%20by%20(le))%0A%20%20%20%20%20%20%20%20%20%20%2F%20on%20()%20group_left%20()%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Femail%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D)))%0A%20%20%20%20%20%20%20%20)%20%2F%20(1%20-%200.99)%0A&g0.tab=0&g0.stacked=0&g0.range_input=2w&g0.max_source_resolution=0s&g0.deduplicate=1&g0.partial_response=0&g0.store_matches=%5B%5D][link]]       |                0.03 | none?                         |\n  | /phone              | [[https://thanos.us-west-2.utility.pages/graph?g0.expr=(%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Fphone%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D))%20-%20on%20()%20group_right%0A%20%20%20%20%20%20%20%20%20%20%20sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Fphone%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D~%220.2.*%22%7D%5B3d%5D))%20by%20(le))%0A%20%20%20%20%20%20%20%20%20%20%2F%20on%20()%20group_left%20()%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Fphone%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D)))%0A%20%20%20%20%20%20%20%20)%20%2F%20(1%20-%200.99)%0A&g0.tab=0&g0.stacked=0&g0.range_input=2w&g0.max_source_resolution=0s&g0.deduplicate=1&g0.partial_response=0&g0.store_matches=%5B%5D][link]]       | 0.27 (but not sure) | none?                         |\n  | /location           | [[https://thanos.us-west-2.utility.pages/graph?g0.expr=(%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Flocation%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D))%20-%20on%20()%20group_right%0A%20%20%20%20%20%20%20%20%20%20%20sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Flocation%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D~%220.1.*%22%7D%5B3d%5D))%20by%20(le))%0A%20%20%20%20%20%20%20%20%20%20%2F%20on%20()%20group_left%20()%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Flocation%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D)))%0A%20%20%20%20%20%20%20%20)%20%2F%20(1%20-%200.99)%0A&g0.tab=0&g0.stacked=0&g0.range_input=2w&g0.max_source_resolution=0s&g0.deduplicate=1&g0.partial_response=0&g0.store_matches=%5B%5D][link]]       |                0.11 | none?                         |\n\n\nvisualize the burn rate!\n#+begin_src\n(\n          (sum(rate(http_endpoint_latency_seconds_bucket{uri_base=~\"/.*/transaction_risk\", namespace=\"prod\", track!=\"sales\", le=\"+Inf\"}[3d])) - on () group_right sum(rate(http_endpoint_latency_seconds_bucket{uri_base=~\"/.*/transaction_risk\", namespace=\"prod\", track!=\"sales\", le=~\"0.1.*\"}[3d])) by (le))\n          / on () group_left ()\n          (sum(rate(http_endpoint_latency_seconds_bucket{uri_base=~\"/.*/transaction_risk\", namespace=\"prod\", track!=\"sales\", le=\"+Inf\"}[3d])))\n        ) / (1 - 0.99)\n#+end_src\n- [[https://grafana.pro-apps.us-west-2a.ec2.pages/d/transaction_risk-slos/transaction-risk-api-slos?orgId=1][graphana]]\n- so 150ms would be fine. We'd be mostly well above that\n- 100ms us might barely meet p99 eu is just below that,\n- looking https://docs.google.com/spreadsheets/d/1kKTYV_iK9Q6YdURakqBeQmAHEmFextjyjUgns2Npxz8/edit#gid=0\n- 60 70 80 90 100, 200, 300, ...\n\nWe'd like to define the slo's for all services. Denes\n-\n** svend meeting\n*** agenda\n- do you use an emacs terminal emulator? / which one?\n  - vterm - works very well for actually emulating a real terminal.\n  - shell mode more like regular. can't do interractive.\n  - ansi-term is what multi term wraps\n\n- code management:\n  - will this cue repo just be promoted to be infratructure code base and we'll make PR's to that?\n    ANS: yes\n  - should more custom alerts be added to this?\n    ANS: yes, but only SLO-related alerts. Svend mentions a cue-based approach\n    could be added somewhere to other metrics if we find this useful\n  - Then eventually old alerts will be depricated?\n    ANS: No. there will always be non-SLO based alerts. e.g. days since cass data release\n- deployment / testing of alerts?\n  - can go back in time to check if alerts would have fired. fudge values and check, etc.\n    + sanity check: go on there and poke it, mess w/ values make sure stuff fires\n  - I especially want to check low-traffic circumstances i.e. apac\n  - prometheus has unit tests... ?\n\n*** meeting notes\n- [ ] quality need todo\n  + Need to measure only degridated performance somehow\n  + would be nice to have common metric across all endpoints if possible\n- latency + error (500)\n  - measure at LB or at application\n\n- figure out what alerts are redundant\n\n*** action items\n- metric required for quality SLO of 95% non-degraded responses\n- Svend is going to shift ownership of his repo to all engineering, create a\n  pipeline that will deploy alerts + dashboards.\n  - WHEN?\n- use lb-level or application-level measures of 500's + latency?\n- service slo documents\n- testing.\n  - sanity checking ofc\n  - prometheus unit tests? this may require test data that would probably be a pita to maintain\n    - I assume we'll skip for now.\n*** warnings\n- internally we can use defex warnings to calculate degraded response\n- maybe can just add a label to an existing count metric like latency\n- formats utils namespace. Theres a function called warnings or failure. Or get-warnings. or something\n** current alerts\n- latency\n  + phone_intel latencies 5m avg > num (for 10m)\n  + locationintel latency 5m avg > 0.2 (for 10m)\n  + AO, mero, trapi latency all done w/ similar latency alerts\n- locationIntel partial error percent > 10\n- ng upstream client latency alerts\n- no traffic alerts\n" 536870913] [17 :nodes/id "a4a2ac3d-cec9-4f4e-a235-c44afa3cde0c" 536870913] [17 :nodes/properties {"CATEGORY" "20210823125707-ekata_svc_2486_slo_based_monitoring", "ID" "a4a2ac3d-cec9-4f4e-a235-c44afa3cde0c", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210823125707-ekata_svc_2486_slo_based_monitoring.org", "PRIORITY" "B", "ITEM" "latency alerting writeup (svc-2535)"} 536870913] [17 :nodes/title "latency alerting writeup (svc-2535)" 536870913] [17 :nodes/value 2.0 536870913] [18 :nodes/content ":PROPERTIES:\n:ID:       31fde7cb-45ac-4656-8eb5-67b0406794e0\n:END:\n#+title: fire in a bottle\n\n[[id:b77d4578-bc50-42a8-94c4-b11d27f78837][food]] [[id:334ffe1d-43dd-4f13-99a0-67cf89b73328][carnivore]]\n\nROS theory of obesity, inspired by [[id:406a4a8d-4aa4-4538-9294-0a6097df0cc5][hyperlipid]]\n\nlike his blog. reading\n\n\n* reductive stress as unified mechanism\nhttps://fireinabottle.net/pufa-induced-reductive-stress-as-a-unifying-mechanism-in-obesity/\n\n** Reductive Stress Makes You Fat\nhttps://fireinabottle.net/reductive-stress-makes-you-fat/\n- NAD+/NADH ratio getting too low is primary marker of reductive stress.\n  - i.e. too much electrons\n  - i.e. \"too much energy\"\n  - five things they can do:\n    - feed to complex I of ETC\n    - create superoxide from ETC\n    - NADPH oxidase can just create superoxide\n    - import pyruvate, convert to lactate (using NADH), then export the lactate\n    - De Novo Lipogenesis\n- CD38 enzyme activity removes NAD+ by converting it to Nicotinimide (NAM)\n- NAMPT does the opposite, NAM -> NMN\n\n** CD38 links obesity, bacterial-induced inflammation, and reductive stress\nhttps://fireinabottle.net/cd38-links-obesity-bacterial-induced-inflammation-and-reductive-stress/\n\n- CD38 increases throughout life (decreasing NAD+)\n- CD38 k/o mice don't get fat and EAT MORE\n- lipopolysaccharide (LPS) upregulates CD38​\n\n** The Flooded Engine, An Analogy; How Seed Oils Cause Reductive Stress, Part I\n- carnitine palmitoyltransferase (CPT1) takes a ffa (palmitate), attaches it to\n  carnitine, and creates acylcarnitine, to be transferred into mitochondria for\n  oxidation\n- in the mitochondria, we need NAD+ to burn up the fat in beta oxidation. When\n  there's not enough NAD+, these shorter, half-burnt fats, get filled up and\n  re-attached to carnitine and transferred back out of the mitochondria.\n- beta oxidation feeds into acetyl-CoA, competing with all other fuels.\n- mitochondrial enzymes become acetylated and turned off. acetyl-CoA increases this\n- Sirtuin enzymes – deacetylases that take acetyl groups off of enzymes – are\n  dependent on NAD+\n\n** The Mitochondrial Bottleneck as the carburetor screw; How seed oils cause reductive stress, part II\n- superoxide is ultimately converted into NAD+ with Glutathione\n- superoxide gets generated when complex I AND complex II are running hot.\n- complex II only runs hot with FADH2 poppin off\n\n** , Part III\n- acytlation turns on lipogenic enzymes\n- isocaloric experiments w/ rats and pigs show more saturation => less fattening\n- (my addition) feeding ad libidum (aka how we acutally eat) would make this\n  difference much bigger\n\n** Carbon Recycling: What Happens to Seed Oils When You Eat Them?..., Part IV\n- PUFA's are preferrentially oxidized. Then they're rebuilt as mono and\n  saturated fats for storage.\n- some (~18% in that study) was accumulated, mostly in visceral fat\n** Part V\n- taking sunflower oil instead of cream causes you not to burn glucose when you\n  exercise. i.e. lose metabolic flexibility\n** Part VI\n" 536870913] [18 :nodes/id "31fde7cb-45ac-4656-8eb5-67b0406794e0" 536870913] [18 :nodes/properties {"CATEGORY" "20220908220649-fire_in_a_bottle", "ID" "31fde7cb-45ac-4656-8eb5-67b0406794e0", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220908220649-fire_in_a_bottle.org", "PRIORITY" "B"} 536870913] [18 :nodes/title "fire in a bottle" 536870913] [18 :nodes/value 3.0833333134651184 536870913] [19 :nodes/content ":PROPERTIES:\n:ID:       9dc99445-2536-4cf2-ac19-6b3b22a590ea\n:END:\n#+title: clara rules\n\n[[id:c7f85840-11a5-4b2c-b574-0c8a028f6a7e][clojure]]\n\na rules engine in clojure\n\n** relation to datalog\n- obviously very similar to [[id:e7ec209c-0d5a-4d23-95e2-c0e12fec4eda][datalog]] in the queries, specifically [[http://www.clara-rules.org/docs/expressions/][facts]]\n- but maybe it's more like [[https://github.com/oakes/odoyle-rules][odoyle rules]] because there's no \"fact type\"'s in\n  datalog\n  - also more like odoyle bc rules are queries\n- but I think you could build a rules engine based on datalog fairly easily.\n  or, I guess you'd use like [[https://github.com/tonsky/datascript][datascript]] as an in-memory fact database\n" 536870913] [19 :nodes/id "9dc99445-2536-4cf2-ac19-6b3b22a590ea" 536870913] [19 :nodes/properties {"CATEGORY" "20210507144450-clara_rules", "ID" "9dc99445-2536-4cf2-ac19-6b3b22a590ea", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210507144450-clara_rules.org", "PRIORITY" "B"} 536870913] [19 :nodes/title "clara rules" 536870913] [19 :nodes/value 2.0 536870913] [20 :nodes/content ":PROPERTIES:\n:ID:       c8f29f62-436a-43e8-a4ef-b0eee15ab5b3\n:ROAM_ALIASES: sama\n:END:\n#+title: sam altman\n\n[[id:03f07731-cc68-432c-9d16-9c2944f6a21c][yc]] [[id:593d017c-1756-4583-9856-077289ca2ea4][ai optimism]]\n\n\nhttps://blog.samaltman.com/ai\n\nThis blog is so good.\n\n** how to be successful\nhttps://blog.samaltman.com/how-to-be-successful\n\n\"In a world where almost no one takes a truly long-term view, the market richly\nrewards those who do.\"\n\n** productivity\nfiguring out what to work on is much more important than optimizing\nproductivity. I'm assuming that by this he means that he sees lots of people be\nvery productive in the wrong direction.\n\nDon't waste time doing things you don't enjoy. It's horrific.\n\n_Make lists_ - he has lists of what he wants to accomplish each year, month, &\nday. He apparently has lots of lists.\n\n\"Lists are very focusing, and they help me with multitasking because I don’t\nhave to keep as much in my head.\"\n\nI think I need to elaborate on this because a simple list doesn't make sense.\nHe says it as if you just forget it, but that's not the case. It's for your past\nself to hold your current self accountable. Switching to morning pages\n2022-12-08\n" 536870913] [20 :nodes/id "c8f29f62-436a-43e8-a4ef-b0eee15ab5b3" 536870913] [20 :nodes/properties {"CATEGORY" "20220822211858-sam_altman", "ROAM_ALIASES" "sama", "ID" "c8f29f62-436a-43e8-a4ef-b0eee15ab5b3", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220822211858-sam_altman.org", "PRIORITY" "B"} 536870913] [20 :nodes/title "sam altman" 536870913] [20 :nodes/value 2.473333328962326 536870913] [21 :nodes/content ":PROPERTIES:\n:ID:       1eca4241-9815-471f-900c-d8864678ba9f\n:END:\n#+title: david chapman\n\n[[id:ea23ff75-2ef5-4333-9fc8-2432a196891c][machine learning]]\n\nhis friend's blog: http://bactra.org/notebooks/ai.html\n\n* twitter\nhttps://openreview.net/pdf?id=HklBjCEKvH\n** google ai post\nhttps://twitter.com/Meaningness/status/1561062170074370048?s=20&t=fYaCPp-0T9HKBek8A2dxqg\n\n[[id:e3ac4fcc-4ef1-4fce-9938-292af6ab8020][ai doom]]\n" 536870913] [21 :nodes/id "1eca4241-9815-471f-900c-d8864678ba9f" 536870913] [21 :nodes/properties {"CATEGORY" "20220724101501-david_chapman", "ID" "1eca4241-9815-471f-900c-d8864678ba9f", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220724101501-david_chapman.org", "PRIORITY" "B"} 536870913] [21 :nodes/title "david chapman" 536870913] [21 :nodes/value 5.0625 536870913] [22 :nodes/content ":PROPERTIES:\n:ID:       88b7e6fc-183d-477d-99ce-c5c255c617dc\n:END:\n#+title: paul saladino\n\n[[id:334ffe1d-43dd-4f13-99a0-67cf89b73328][carnivore]]\n\n** more on paul\ndavid sinclair talk\nhttps://www.youtube.com/watch?v=ADwKwMvI5BY&ab_channel=CarnivoreMD\nhttps://www.youtube.com/watch?v=NkZ87xZmpDg&ab_channel=CarnivoreMD\n** podcast\n*** How to Have the Best Poop of Your Life. Lucy Mailing PhD Returns!\nhttps://www.youtube.com/watch?v=FBimNYiYulc&ab_channel=CarnivoreMD\n[[id:ef0a7129-b276-48a3-8907-81dbf1596eea][microbiome]]\n- normally the microbiome is anaerobic, but when there's inflammation, oxygen\n  gets in and allows pathogenic microbes to out-compete other microbes\n- metagenomic sequencing (shotgun sequencing)\n  - take all dna in sample, grind it up, sequnce it, and compare it to databases\n    to see what it is\n    - best and most granular\n  - 16s ribosomal subunit seqencing sucks. Can only get to genus\n- 2/3 of your microbiome is unique\n  - so you can only say what is /functionally/ a healthy microbiome.\n    You can't say what it actually consists of\n- pathogenic state\n  - less butyrate producers, more enterobaceriea (E. coli, samonela). And these\n    are more inflammatory\n- ALSO says you can feed epithelial cells in colon not just with butyrate, but\n  also with ketones, just like [[id:aa276919-dce8-4427-b939-9dea096a12a2][ketotic blog]] said\n  - but there's even MORE fuels\n- low fiber, high sugar is bad for mucus layer!\n  - bc ketosis protects the epithelial cells\n- Paul does NO DAIRY\n  - colostrum? he talks about it on other things.\n- fermented foods help diversity and in general lower inflammation\n*** controversial thoughts: the dangers of long-term ketogenic diets\nhttps://www.youtube.com/watch?v=1VsnQU7Q1jQ&ab_channel=CarnivoreMD\n- he now includes fruit + honey\n- he eats roughly\n  - 1g per pound bodyweight protein. medium fat.\n    200g protein 30%\n  - 150g carbs 20%\n  - 150g fat 50%\n  - 2750-3k per day\n  - NOT ketogenic at all.\n- *note: he probably ate too much protein before!*\n- why not keto?\n  - 3yrs ago he did carnivore\n  - felt amazing for a year, THEN\n    - had sleep disturbance\n    - was cold\n    - bad cramps\n    - T3 was low, testosterone was low\n- he has other vids on honey\n  - felt much better after introducing honey\n    - july tsh 1.49\n- labs on pure carnivore vs a year after.\n  - keto lowers testosterone\n  - carbs improved everything!\n  - fasting insulin was just as low!\n- continuous glucose monitor\n- concerns w/ long-term keto\n  - elevated fasting blood glucose compared to carb eater\n  - electrolyte defficiency\n  - hypothyroid\n  - low testosterone\n  - possibly cortisol and epinepherine effects\n- excess insulin from carbs is NOT WHAT causes METABOLIC disfunction!\n" 536870913] [22 :nodes/id "88b7e6fc-183d-477d-99ce-c5c255c617dc" 536870913] [22 :nodes/properties {"CATEGORY" "20220329180338-paul_saladino", "ID" "88b7e6fc-183d-477d-99ce-c5c255c617dc", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220329180338-paul_saladino.org", "PRIORITY" "B"} 536870913] [22 :nodes/title "paul saladino" 536870913] [22 :nodes/value 2.0 536870913] [23 :nodes/content ":PROPERTIES:\n:ID:       cddc46b9-df1f-44bb-9a1a-1bebf19a8bbc\n:END:\n#+title: rich hickey\n\n[[id:c7f85840-11a5-4b2c-b574-0c8a028f6a7e][clojure]] [[id:a5fd6b10-d451-4e8f-89bb-e8eff37b4b0f][blog people]]\n\n** TODO\n[[id:a3529826-3ac1-4413-a97a-893fcefc2d62][hammock driven development rich hickey]]\n[[https://www.youtube.com/watch?v=f84n5oFoZBc&ab_channel=ClojureTV][hammock driven dev]] purely about coming up with clear ideas (i think). seems cool\n[[https://channel9.msdn.com/Shows/Going+Deep/Expert-to-Expert-Rich-Hickey-and-Brian-Beckman-Inside-Clojure][inside clojure]] idk, janos said it was good\n** clojure.spec\nhttps://vimeo.com/195711510\n\n- dynamic languages don't have a way to communicate what they expect. i.e. how they communicate.\n- better errors\n- better testing\n- flexibility - language level types don't work!! Edges of programs need this.\n\n- all software is _data processing_\n  - clojure is data oriented\n  - most langs don't have a good representation of pure data.\n  - spec leverages the data-oriented nature of clojure\n\n- specs will validate all keys in a map when you call s/validate or s/explain\n  even if they're NOT in the MAP SPEC!\n" 536870913] [23 :nodes/id "cddc46b9-df1f-44bb-9a1a-1bebf19a8bbc" 536870913] [23 :nodes/properties {"CATEGORY" "20210331182745-rich_hickey", "ID" "cddc46b9-df1f-44bb-9a1a-1bebf19a8bbc", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210331182745-rich_hickey.org", "PRIORITY" "B"} 536870913] [23 :nodes/title "rich hickey" 536870913] [23 :nodes/value 2.6666666865348816 536870913] [24 :nodes/content ":PROPERTIES:\n:ID:       ab580cd6-ff4a-4d78-b648-75fcffaf4711\n:END:\n#+title: fiddlehead inspirations\n\n[[id:cbc60d55-4187-4233-8bee-44d37e345392][music]] [[id:ae02ca23-5c6a-462f-89c8-4ec81a0e0e7e][spotify]]\n\nspotify playlist \"fiddlehead inspirations\"\n" 536870913] [24 :nodes/id "ab580cd6-ff4a-4d78-b648-75fcffaf4711" 536870913] [24 :nodes/properties {"CATEGORY" "20210327091502-fiddlehead_inspirations", "ID" "ab580cd6-ff4a-4d78-b648-75fcffaf4711", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210327091502-fiddlehead_inspirations.org", "PRIORITY" "B"} 536870913] [24 :nodes/title "fiddlehead inspirations" 536870913] [24 :nodes/value 2.0 536870913] [25 :nodes/content ":PROPERTIES:\n:ID:       1a2a5a92-20d2-4b2f-b5e0-3716c0dbc5f1\n:END:\n#+title: real estate\n\nhttps://realestatedecoded.com/case-shiller/\n\nWanna buy a house soon! 2023-01-08\n" 536870913] [25 :nodes/id "1a2a5a92-20d2-4b2f-b5e0-3716c0dbc5f1" 536870913] [25 :nodes/properties {"CATEGORY" "20230108185331-real_estate", "ID" "1a2a5a92-20d2-4b2f-b5e0-3716c0dbc5f1", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20230108185331-real_estate.org", "PRIORITY" "B"} 536870913] [25 :nodes/title "real estate" 536870913] [25 :nodes/value 2.0 536870913] [26 :nodes/content ":PROPERTIES:\n:ID:       8dcd5d3c-81d8-4836-9525-953de2522b77\n:END:\n#+title: tony fadell\n\n\nfound him on [[id:add2a593-5edf-477a-aa2a-30fef8a4ad26][tim ferriss]]\n\nseems awesome\n\nhis [[id:876a8e7d-8daf-4e9a-9f05-30eb0ea81061][books]] recs!\n- hundred year marathon\n- [[id:a98f2385-5e5e-40fd-b70e-828f71d2af8d][Changing World Order]]\n- HIS book: [[id:e34756cb-0ea9-4f97-a982-e87f65a5ee1c][build tony fadell]]\n" 536870913] [26 :nodes/id "8dcd5d3c-81d8-4836-9525-953de2522b77" 536870913] [26 :nodes/properties {"CATEGORY" "20221021122437-tony_fadell", "ID" "8dcd5d3c-81d8-4836-9525-953de2522b77", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221021122437-tony_fadell.org", "PRIORITY" "B"} 536870913] [26 :nodes/title "tony fadell" 536870913] [26 :nodes/value 2.7333333492279053 536870913] [27 :nodes/content ":PROPERTIES:\n:ID:       4f9113d9-fef2-4f02-a826-54757c43159a\n:END:\n#+title: vitamin d\n\n[[id:b77d4578-bc50-42a8-94c4-b11d27f78837][food]]\n\n- d3 can kill h. pylori https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6526874/\n\n** The Effect of Vitamin D on Intestinal Inflammation and Faecal Microbiota in Patients with Ulcerative Colitis\n  https://pubmed.ncbi.nlm.nih.gov/29726893/\n\n  platlet count down, albumen up, some other changes\n** Vitamin D and The Gut Microbiota: a Narrative Literature Review\nhttps://www.ncbi.nlm.nih.gov/pmc/articles/PMC8331286/\n\n- \"vitamin D deficiency is highly associated with gastrointestinal diseases,\n  including inflammatory bowel disease (IBD), irritable bowel syndrome (IBS),\n  and colon cancer\"\n  - I followed the reference and found NO mention of \"vitamin\" in it!\n    It just says weird microbiome, so maybe there's an implicit link. Fuckers.\n\n- d3 defficient diet => high LPS\n  - https://pubmed.ncbi.nlm.nih.gov/24823836/\n" 536870913] [27 :nodes/id "4f9113d9-fef2-4f02-a826-54757c43159a" 536870913] [27 :nodes/properties {"CATEGORY" "20220925141108-vitamin_d", "ID" "4f9113d9-fef2-4f02-a826-54757c43159a", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220925141108-vitamin_d.org", "PRIORITY" "B"} 536870913] [27 :nodes/title "vitamin d" 536870913] [27 :nodes/value 2.095238097012043 536870913] [28 :nodes/content ":PROPERTIES:\n:ID:       a98f2385-5e5e-40fd-b70e-828f71d2af8d\n:END:\n#+title: Changing World Order Ray Dalio\n" 536870913] [28 :nodes/id "a98f2385-5e5e-40fd-b70e-828f71d2af8d" 536870913] [28 :nodes/properties {"CATEGORY" "20221021122620-changing_world_order", "ID" "a98f2385-5e5e-40fd-b70e-828f71d2af8d", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221021122620-changing_world_order.org", "PRIORITY" "B"} 536870913] [28 :nodes/title "Changing World Order Ray Dalio" 536870913] [28 :nodes/value 3.391666740179062 536870913] [29 :nodes/content ":PROPERTIES:\n:ID:       e5e65dfc-85e0-4c9a-986c-14db1deaf453\n:END:\n#+title: evil keybindings\n\n[[id:26843ee8-2d1a-4021-a576-60c06ad709f8][evil mode]] [[id:184f9ed0-8eec-44c8-82e2-e1a5cc4ad6ff][emacs]]\n\n[[https://github.com/noctuid/evil-guide#further-integrating-evil-and-emacs][this section]] is particularly good\n\n[[https://github.com/noctuid/general.el#override-keymaps-and-buffer-local-keybindings][general]] is what I want to use for keybindings now in case I ever migrate\n" 536870913] [29 :nodes/id "e5e65dfc-85e0-4c9a-986c-14db1deaf453" 536870913] [29 :nodes/properties {"CATEGORY" "20210327090239-evil_keybindings", "ID" "e5e65dfc-85e0-4c9a-986c-14db1deaf453", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210327090239-evil_keybindings.org", "PRIORITY" "B"} 536870913] [29 :nodes/title "evil keybindings" 536870913] [29 :nodes/value 3.0 536870913] [30 :nodes/content ":PROPERTIES:\n:ID:       ec2c9b93-7906-431e-80f1-22ee402c76b1\n:END:\n#+title: lyn alden\n\n[[id:4c761d6c-e68a-45a2-90d6-62b47c45e0aa][crypto]] [[id:9ee3fe7b-8e6a-49f1-9061-52a9689abc8c][macro econ]]\n\n** lightning network\nhttps://www.lynalden.com/lightning-network/\n\n\"When we look at the adoption pattern of the Bitcoin network and some of its\nfailed forks and competitors, we can quickly see a basic problem that many of\nthese forks/competitors encountered and why they failed. They tried to make a\nbroad medium of exchange out of something that was not a store of value, and\nwithout the government power of fiat.\"\n\nBig problem with Monero (and Zcash too!) is that its not auditable. Which is a\ncore component for its trustworthiness!\n- Probably the better thing would be to modify bitcoin to give more privacy more\n  easily.\n\n\"in order to invent a successful decentralized peer-to-peer Visa-type network\n(fast transaction layer), one must first invent an underlying decentralized\npeer-to-peer Fedwire-type network (settlement layer), along with a reason why\nthe underlying unit should be held for the long-term compared to other assets\n(digital gold).\"\n" 536870913] [30 :nodes/id "ec2c9b93-7906-431e-80f1-22ee402c76b1" 536870913] [30 :nodes/properties {"CATEGORY" "20230103213933-lyn_alden", "ID" "ec2c9b93-7906-431e-80f1-22ee402c76b1", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20230103213933-lyn_alden.org", "PRIORITY" "B"} 536870913] [30 :nodes/title "lyn alden" 536870913] [30 :nodes/value 2.0 536870913] [31 :nodes/content ":PROPERTIES:\n:ID:       0b1263e6-7b9a-450e-8775-06f5df043e6b\n:END:\n#+title: bpc 157\n\n[[id:f08e30aa-e83b-451f-88b7-fe954bab2f6e][supplements]]\n\nfirst of all, endorsed by [[id:82365fe3-8d59-4ae4-841e-2830f02d251a][amber o'hearn]]\n\n** Gastric pentadecapeptide body protection compound BPC 157 and its role in accelerating musculoskeletal soft tissue healing\nhttps://link.springer.com/article/10.1007/s00441-019-03016-8\n\n- it is apparent that BPC 157 has huge potential and following further\n  development has promise as a therapy to conservatively treat or aid recovery\n  in hypovascular and hypocellular soft tissues\n- efficacy of BPC 157 is yet to be confirmed in humans\n" 536870913] [31 :nodes/id "0b1263e6-7b9a-450e-8775-06f5df043e6b" 536870913] [31 :nodes/properties {"CATEGORY" "20221020204821-bpc_157", "ID" "0b1263e6-7b9a-450e-8775-06f5df043e6b", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221020204821-bpc_157.org", "PRIORITY" "B"} 536870913] [31 :nodes/title "bpc 157" 536870913] [31 :nodes/value 2.095238097012043 536870913] [32 :nodes/content ":PROPERTIES:\n:ID:       a3529826-3ac1-4413-a97a-893fcefc2d62\n:END:\n#+title: hammock driven development rich hickey\n\n[[https://www.youtube.com/watch?v=f84n5oFoZBc&ab_channel=ClojureTV][hammock driven dev]] purely about coming up with clear ideas (i think). seems cool\n\n* first go\n** you need inputs\nread research papers, other people's solutions etc.\n** tradeoffs require two perspectives\n** you can't focus if you are on the computer\n** two minds\n*** waking mind\n- analytical thinking, criticizing\n- find local maxima\n- the point of waking mind is to feed stuff to the background mind\n*** background mind\n- good at making connections\n- find another hill to climb for your waking mind\n- when you think you are making decisions, you are really just digging shit up\n  that your background mind already figured out\n" 536870913] [32 :nodes/id "a3529826-3ac1-4413-a97a-893fcefc2d62" 536870913] [32 :nodes/properties {"CATEGORY" "20210402160940-hammock_driven_development_rich_hickey", "ID" "a3529826-3ac1-4413-a97a-893fcefc2d62", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210402160940-hammock_driven_development_rich_hickey.org", "PRIORITY" "B"} 536870913] [32 :nodes/title "hammock driven development rich hickey" 536870913] [32 :nodes/value 2.8333333134651184 536870913] [33 :nodes/content ":PROPERTIES:\n:ID:       21cb5455-19d1-4516-80ce-dad565cb80c6\n:END:\n#+title: mozilla javascript guide\n\n[[id:81a17d27-594a-4f01-9ec9-7686271bcf24][coding]]\n\n- see file:///Users/kevinkrausse/Documents/projects/learn-javascript\n\n** emacs notes\n- I should get [[https://github.com/joaotavora/eglot][eglot]]\n- with tsserver\n- use skewer mode. already in doom.\n\n** intro\njs reference is there, kind of on the same page\n\n\"a cross-platform, object-oriented scripting language\"\n\n\"In contrast to Java's compile-time system of classes built by declarations,\nJavaScript supports a runtime system based on a small number of data types\nrepresenting numeric, Boolean, and string values.\"\n\n\"The prototype-based model provides dynamic inheritance; that is, what is\ninherited can vary for individual objects. JavaScript also supports functions\nwithout any special declarative requirements. Functions can be properties of\nobjects, executing as loosely typed methods.\"\n\n\"Java's class inheritance and strong typing generally require\ntightly coupled object hierarchies. These requirements make Java programming\nmore complex than JavaScript programming.\"\n** Grammar & types\ninstructions are called statements and are separated by semicolons\n\nA _*semicolon is not necessary*_ after a statement if it is written on its own line.\nBut if more than one statement on a line is desired, then they must be separated\nby semicolons.\n- It is considered best practice, however, to always write a semicolon after a\n  statement, even when it is not strictly needed. This practice reduces the\n  chances of bugs getting into the code.\n- ^seems like bullshit?\n\n=var= can be used to declare both local and global variables.\n  - in a function, it's scoped to the function (NOT just the block)\n  - not in a function, it's global\n\n=let & const= are for local, block-scoped variables\n\nlots of [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment][destructuring assignment]] forms\n\nvars are _hoisted_, but let/const are not\n\n- undefined\n  - NaN when used in numberical context\n  - falsey\n** functions\n- if a fn assigns a new value to a parameter, this does not change the calling scope\n\n- if a fn /modifies/ the parameter's properties, this is global.\n** iteration\n- iterable protocol\n  - to conform, an object must implement the @@iterator method\n  - when object iterated, this method is called w/ no arguments\n    - it must return something implementing the *iterator* protocol\n  - can *be a generator* fn. so each entity can be provided using =yield=\n- iterator protocol\n  - implements `next()` taking zero or one arguments and returns an =IteratorResult=\n    - IteratorResult\n      - done: true when iteration is over\n      - value: the value returns. Can be omitted if done is true.\n** inheritance and prototypes\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\n\nwhen an object property is looked up, it follows the object's prototype chain\n\nthe following `Box`s are equivalent:\n\n#+begin_src javascript\n\nfunction Box(value) {\n  this.value = value;\n}\n\nBox.prototype.getValue = function () {\n  return this.value;\n};\n\nclass Box {\n  constructor(value) {\n    this.value = value;\n  }\n\n  // Methods are created on Box.prototype\n  getValue() {\n    return this.value;\n  }\n}\n#+end_src\n\nnote, Constructor.prototype is the prototype of all objects created from that\nconstructor. NOT the constructor's prototype.\n\nuse Object.getPrototypeOf(obj)\n\nand to make a chain:\n#+begin_src javascript :results output\nfunction Base() {}\nfunction Derived() {}\nObject.setPrototypeOf(Derived.prototype, Base.prototype)\n\n// or equivalently:\nclass Base { t1() { return \"t1\" } }\nclass Base2 { t2() { return \"poop\" } }\nclass Derived extends Base {}\n\nx = new Derived()\nx.t1() // works\nx.t2() // error\nObject.setPrototypeOf(Derived.prototype, Base2.prototype)\nx.t2() // works\nx.t1() // error\n#+end_src\n\nNote: use Object.setPrototypeOf instead of assigning Base.prototype.\n\nAll functions BESIDES arrow functions! have a default prototype property created on them!\nit basically has a reference to the original fn under `constructor` and like that's it.\n\nyou can also manually add proto like this: `x = {a: \"a\", __proto__: base}`\n" 536870913] [33 :nodes/id "21cb5455-19d1-4516-80ce-dad565cb80c6" 536870913] [33 :nodes/properties {"CATEGORY" "20221005082458-mozilla_javascript_guide", "ID" "21cb5455-19d1-4516-80ce-dad565cb80c6", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221005082458-mozilla_javascript_guide.org", "PRIORITY" "B"} 536870913] [33 :nodes/title "mozilla javascript guide" 536870913] [33 :nodes/value 2.0 536870913] [34 :nodes/content ":PROPERTIES:\n:ID:       e8fa18e5-c1ab-4c7f-995f-9ac46f2e6228\n:END:\n#+title: gpt-3\n\n[[id:ea23ff75-2ef5-4333-9fc8-2432a196891c][ai]] [[id:863ea47f-7cd3-4e41-9ab0-a1254de45051][openai]]\n\nproject ideas\n- how can I connect this to current news / information to make it actually have\n  info about stuff?\n  Or is that even what I want? Maybe a different interface would be better\n- twitter interface\n  - how do I query tweets?\n    - I could have a sub-summary. like issue a query, have it summarize all the tweets and cite the tweets, then supply that so it makes a subsequent query?\n" 536870913] [34 :nodes/id "e8fa18e5-c1ab-4c7f-995f-9ac46f2e6228" 536870913] [34 :nodes/properties {"CATEGORY" "20221203211325-gpt_3", "ID" "e8fa18e5-c1ab-4c7f-995f-9ac46f2e6228", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221203211325-gpt_3.org", "PRIORITY" "B"} 536870913] [34 :nodes/title "gpt-3" 536870913] [34 :nodes/value 2.0 536870913] [35 :nodes/content ":PROPERTIES:\n:ID:       6927c0a1-4bfd-476f-bf81-a6644bc09394\n:END:\n#+title: on lisp paul graham\n\n[[id:269bc84d-7abe-4059-a90a-f35c254bddfb][paul graham]] [[id:aefbec29-99b8-459f-a729-41c3d4b7270c][lisp]]\n\n** 2 functions\n#+begin_src elisp\n(defun double (x) (* x 2))\n\n(eq #'double (car (list #'double)))\n;; => t\n((lambda (x) (* x 2)) 3)\n;; can have a variable called same thing\n(setq double 2)\n(double double)\n#'double\n(symbol-function 'double)\n;; => (lambda (x) (* x 2))\n(symbol-value 'double)\n;; => 2\n\n;; defun is equivalent to the following\n(setf (symbol-function 'double)\n      #'(lambda (x) (* x 2)))\n#+end_src\n\nto use a function from a variable, use `apply` or `funcall`\n\n#+begin_src elisp\n(apply #'+ 1 '(2))\n(funcall #'+ 1 2)\n(mapcar #'(lambda (x) (+ x 1000))\n        '(1 2 3 4))\n\n;; weird common lisp / elisp bull shit\n\n(defun double (x) (* x 2))\n(funcall double 3) ;; error\n(setq double-var (lambda (x) (* x 2)))\n(funcall double-var 3) ;; works\n(funcall #'double 3) ;; works\n;; this might just be a elisp, not common lisp thing:\n(funcall 'double 3) ;; works\n\n(setq lst '(1 2 3 4))\n(reverse lst)\n(nreverse lst) ;; destructively reverse (reuse existing data structure)\nlst ;; => (1)\n(setq lst '(1 2 3 4))\n(setf lst (nreverse lst))\nlst ;; => (4 3 2 1)\n#+end_src\n\nfunctional => /minimal/ side effects, not none\n\n#+begin_src elisp\n;; rare\n\n(defun exclaim (expression)\n  (append expression '(oh my)))\n\n(exclaim '(lions tigers and bears)) ;; => (lions tigers and bears oh my)\n(nconc (exclaim '(lions tigers and bears)) '(goodness))\n(exclaim '(wow shmow)) ;; => (wow shmow oh my goodness)\n;; bad!!\n;; fix with:\n(defun exclaim (expression)\n  (append expression (list 'oh 'my)))\n\n#+end_src\n\n*** interactive coding\n#+begin_quote\nImagine the kind of conver- sation you would have with someone so far away that there was a transmission delay of one minute. Now imagine speaking to someone in the next room. You wouldn’t just have the same conversation faster, you would have a different kind of conversation. In Lisp, developing software is like speaking face-to-face. You can test code as you’re writing it. And instant turnaround has just as dramatic an effect on development as it does on conversation. You don’t just write the same program faster; you write a different kind of program.\n...\nIn Lisp, as in any language, development is a cycle of writing and testing. But in Lisp the cycle is very short: single functions, or even parts of functions.\n#+end_quote\n=> I need to actually start doing this\n\nI mean, I do test as I'm writing, but I use live values in the system rather\nthan setting up the unittest environment in a persistable way. Then I basically\nhave to re-write all the tests again when I finish and need to write unit tests.\nInstead, I think I should do it all in one go. Kind fo set up the unit test\nenvironment as I'm writing.\n\n#+begin_quote\nIt brings an extra degree of confidence which enables Lisp programmers to break free, at least part of the time, from the old plan-and-implement style of software development.\n#+end_quote\n\nand this is so important!! I was just talking about this.\n\nread more bout this so I can follow along. https://orgmode.org/worg/org-contrib/babel/intro.html\nwould also be cool to have this with clojure and modify the output formatting\n" 536870913] [35 :nodes/id "6927c0a1-4bfd-476f-bf81-a6644bc09394" 536870913] [35 :nodes/properties {"CATEGORY" "20210508120426-on_lisp_paul_graham", "ID" "6927c0a1-4bfd-476f-bf81-a6644bc09394", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210508120426-on_lisp_paul_graham.org", "PRIORITY" "B"} 536870913] [35 :nodes/title "on lisp paul graham" 536870913] [35 :nodes/value 2.0 536870913] [36 :nodes/content ":PROPERTIES:\n:ID:       a5fd6b10-d451-4e8f-89bb-e8eff37b4b0f\n:END:\n#+title: blog people\n" 536870913] [36 :nodes/id "a5fd6b10-d451-4e8f-89bb-e8eff37b4b0f" 536870913] [36 :nodes/properties {"CATEGORY" "20210331182827-blog_people", "ID" "a5fd6b10-d451-4e8f-89bb-e8eff37b4b0f", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210331182827-blog_people.org", "PRIORITY" "B"} 536870913] [36 :nodes/title "blog people" 536870913] [36 :nodes/value 2.8333333134651184 536870913] [37 :nodes/content ":PROPERTIES:\n:ID:       d479f2d2-0cbb-4c91-a263-2ab6f504ca78\n:END:\n#+title: tucker goodrich\n#+alias: \"yelling stop\"\n\n[[id:b77d4578-bc50-42a8-94c4-b11d27f78837][food]] [[id:014d95aa-bba2-4a62-9d92-182d0aac0a62][keto]] [[id:6c2f6dee-77f5-451e-a76b-6a68a3f01498][barefoot]] [[id:d295f68e-a5d2-4081-90c5-e6aa1eb47b11][blogs]]\n\nhttp://yelling-stop.blogspot.com/\n\nfound from amber.\nhas some interesting stuff on seed oils / pufas\n\nhttps://yelling-stop.blogspot.com/2020/11/linoleic-acid-and-its-metabolites-primer.html?m=1\n" 536870913] [37 :nodes/id "d479f2d2-0cbb-4c91-a263-2ab6f504ca78" 536870913] [37 :nodes/properties {"CATEGORY" "20220719235254-tucker_goodrich", "ID" "d479f2d2-0cbb-4c91-a263-2ab6f504ca78", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220719235254-tucker_goodrich.org", "PRIORITY" "B"} 536870913] [37 :nodes/title "tucker goodrich" 536870913] [37 :nodes/value 2.5 536870913] [38 :nodes/content ":PROPERTIES:\n:ID:       065f0e41-b3e1-4d07-9da4-78be89e37aff\n:END:\n#+title: zero carb zen\n\n[[id:334ffe1d-43dd-4f13-99a0-67cf89b73328][carnivore]]\n\nthe page on [[https://zerocarbzen.com/histamines/][histamine intolerance]] really got me thinking\n" 536870913] [38 :nodes/id "065f0e41-b3e1-4d07-9da4-78be89e37aff" 536870913] [38 :nodes/properties {"CATEGORY" "20210710114122-zero_carb_zen", "ID" "065f0e41-b3e1-4d07-9da4-78be89e37aff", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210710114122-zero_carb_zen.org", "PRIORITY" "B"} 536870913] [38 :nodes/title "zero carb zen" 536870913] [38 :nodes/value 2.361111104488373 536870913] [39 :nodes/content ":PROPERTIES:\n:ID:       e34756cb-0ea9-4f97-a982-e87f65a5ee1c\n:END:\n#+title: build tony fadell\n\n\n\n[[id:876a8e7d-8daf-4e9a-9f05-30eb0ea81061][books]] [[id:8dcd5d3c-81d8-4836-9525-953de2522b77][tony fadell]]\n\n** intro\n- generalmagicthemovie.com\n" 536870913] [39 :nodes/id "e34756cb-0ea9-4f97-a982-e87f65a5ee1c" 536870913] [39 :nodes/properties {"CATEGORY" "20221021123754-build_tony_fadell", "ID" "e34756cb-0ea9-4f97-a982-e87f65a5ee1c", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221021123754-build_tony_fadell.org", "PRIORITY" "B"} 536870913] [39 :nodes/title "build tony fadell" 536870913] [39 :nodes/value 2.466666668653488 536870913] [40 :nodes/content ":PROPERTIES:\n:ID:       f91cb1a7-c65d-4e85-8abe-f0cc498ef979\n:ROAM_ALIASES: personal\n:END:\n#+title: private\n\nreference pages. Pages with links to this will be excluded when publishing.\n\n- gerber collision should be good -- nope\n  - drop off at 330pm oct 13th\n  - don't buy additional insurance for rental vehicle.\n    put desposit down for rental vehicle. will be paid back.\n    responsible for our own back.\n    put me in a like-size vehicle.\n    - going to text w/ repair info and rental\n\n206-971-5400\n- Carie state farm agent\n- had renters insurance, but it hasn't been active.\n- have auto insurance but i'm still registered in california\n  - auto: 1380113B0475J\n  - old renters active from 2019-2020: AR: 04B3H4168\n    - also give another number too sept. 2016 til dec. 2020 CA: 75EQM4713\n" 536870913] [40 :nodes/id "f91cb1a7-c65d-4e85-8abe-f0cc498ef979" 536870913] [40 :nodes/properties {"CATEGORY" "20221002011027-private", "ROAM_ALIASES" "personal", "ID" "f91cb1a7-c65d-4e85-8abe-f0cc498ef979", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221002011027-private.org", "PRIORITY" "B"} 536870913] [40 :nodes/title "private" 536870913] [40 :nodes/value 2.0 536870913] [41 :nodes/content ":PROPERTIES:\n:ID:       3bd788a9-4e68-49a0-9fe1-d31fb2720840\n:END:\n#+title: clojurescript unraveled\n\n[[id:ba5e9b97-1bbc-45dc-85f4-d9f3e6cf1b20][clojurescript]]\n\nbook!\n\nhttp://funcool.github.io/clojurescript-unraveled/#tooling-compiler\n" 536870913] [41 :nodes/id "3bd788a9-4e68-49a0-9fe1-d31fb2720840" 536870913] [41 :nodes/properties {"CATEGORY" "20211229173845-clojurescript_unraveled", "ID" "3bd788a9-4e68-49a0-9fe1-d31fb2720840", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20211229173845-clojurescript_unraveled.org", "PRIORITY" "B"} 536870913] [41 :nodes/title "clojurescript unraveled" 536870913] [41 :nodes/value 2.0 536870913] [42 :nodes/content ":PROPERTIES:\n:ID:       b77d4578-bc50-42a8-94c4-b11d27f78837\n:ROAM_ALIASES: nutrition\n:END:\n#+title: food\n\nwill eventually have more stuff here..\n\nhttps://taco\n" 536870913] [42 :nodes/id "b77d4578-bc50-42a8-94c4-b11d27f78837" 536870913] [42 :nodes/properties {"CATEGORY" "20210318212049-food", "ROAM_ALIASES" "nutrition", "ID" "b77d4578-bc50-42a8-94c4-b11d27f78837", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210318212049-food.org", "PRIORITY" "B"} 536870913] [42 :nodes/title "food" 536870913] [42 :nodes/value 18.944761998951435 536870913] [43 :nodes/content ":PROPERTIES:\n:ID:       49a71561-f98b-42a5-812a-031f2a88c7ee\n:END:\n#+title: quattype-smart-notes\n\nI'm amazed that I read this a while ago (at least a week and a half) and then\nsubconsciously might have stuck with me and now I'm trying roam.\n\nhe references a book here. Might be good to read when I need more motivation\n[[id:dc845692-28a8-4d53-bec6-e41102f54cac][some-example]]\n\nhttps://quanttype.net/posts/2021-02-27-smart-notes.html\n" 536870913] [43 :nodes/id "49a71561-f98b-42a5-812a-031f2a88c7ee" 536870913] [43 :nodes/properties {"CATEGORY" "20210318211543-quattype_smart_notes", "ID" "49a71561-f98b-42a5-812a-031f2a88c7ee", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210318211543-quattype_smart_notes.org", "PRIORITY" "B"} 536870913] [43 :nodes/title "quattype-smart-notes" 536870913] [43 :nodes/value 4.16222220659256 536870913] [44 :nodes/content ":PROPERTIES:\n:ID:       d1ef30ff-b53f-4fa4-b834-6bdb02d1071a\n:END:\n#+title: minikube replacing docker desktop\n\n- install minikube with hyperkit driver\n- start it\n  #+begin_src bash\nminikube start --driver=hyperkit\n  #+end_src\n- connect docker to it with\n  #+begin_src bash\neval $(minikube -p minikube docker-env)\n  #+end_src\n- change docker-compose to use ip from `minikube ip`` instread of 127.0.0.1\n- do port forwarding to minikube ip\n  #+begin_src bash\nPORT=6379 ssh -L 127.0.0.1:$PORT:192.168.64.2:$PORT -N 127.0.0.1\n  #+end_src\n  where 6379 is the port we listen on and  192.168.64.2 is the minikube ip\n\n  for faster port forwarding:\n\n  #+begin_src bb\n(require '[babashka.process :as p])\n\n\n(def port-ranges [[8000 8006]\n                  [7000 7006]\n                  [9000 9001]])\n\n(doseq [from-to port-ranges\n        port (apply range from-to)]\n  (-> (p/process ['ssh '-L (format \"127.0.0.1:%s:192.168.64.2:%s\" port port) '-N \"127.0.0.1\"]\n                 {:out :string\n                  :err :string})))\n  #+end_src\n" 536870913] [44 :nodes/id "d1ef30ff-b53f-4fa4-b834-6bdb02d1071a" 536870913] [44 :nodes/properties {"CATEGORY" "20220128155026-minikube_replacing_docker_desktop", "ID" "d1ef30ff-b53f-4fa4-b834-6bdb02d1071a", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220128155026-minikube_replacing_docker_desktop.org", "PRIORITY" "B"} 536870913] [44 :nodes/title "minikube replacing docker desktop" 536870913] [44 :nodes/value 2.0 536870913] [45 :nodes/content ":PROPERTIES:\n:ID:       de85c368-7840-4102-b527-2d1c24d164d1\n:END:\n#+title: disunited-nations-zeihan\n\nDisunited Nations: The Scramble for Power in an Ungoverned World\n\nauthor: Peter Zeihan\nyear: 2020\nread: March 2021\n\n[[id:f7a10a2c-284c-4e42-a90b-d1a0465759ec][peter zeihan]] [[id:3b618cff-e581-4cf0-b16b-91e563e72436][econ-geopolitics]]\n\n- America is the best geographically placed country on the planet\n  - most navigable natural waterways than everywhere else combined\n  - most arable land and fertile (midwest)\n  - perfect defense (pacific & atlantic oceans)\n" 536870913] [45 :nodes/id "de85c368-7840-4102-b527-2d1c24d164d1" 536870913] [45 :nodes/properties {"CATEGORY" "20210323193229-disunited_nations_zeihan", "ID" "de85c368-7840-4102-b527-2d1c24d164d1", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210323193229-disunited_nations_zeihan.org", "PRIORITY" "B"} 536870913] [45 :nodes/title "disunited-nations-zeihan" 536870913] [45 :nodes/value 2.333333343267441 536870913] [46 :nodes/content ":PROPERTIES:\n:ID:       68a54c7b-545e-46e0-84bd-60940fa5f207\n:END:\n#+title: toread\n" 536870913] [46 :nodes/id "68a54c7b-545e-46e0-84bd-60940fa5f207" 536870913] [46 :nodes/properties {"CATEGORY" "20210329085348-toread", "ID" "68a54c7b-545e-46e0-84bd-60940fa5f207", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210329085348-toread.org", "PRIORITY" "B"} 536870913] [46 :nodes/title "toread" 536870913] [46 :nodes/value 4.25 536870913] [47 :nodes/content ":PROPERTIES:\n:ID:       1bed2bfd-611d-4dfe-b70e-d4be05cf3753\n:END:\n#+title: essay\n" 536870913] [47 :nodes/id "1bed2bfd-611d-4dfe-b70e-d4be05cf3753" 536870913] [47 :nodes/properties {"CATEGORY" "20221119213330-essay", "ID" "1bed2bfd-611d-4dfe-b70e-d4be05cf3753", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221119213330-essay.org", "PRIORITY" "B"} 536870913] [47 :nodes/title "essay" 536870913] [47 :nodes/value 2.0 536870913] [48 :nodes/content ":PROPERTIES:\n:ID:       c8c4efcf-4345-493d-937e-b4ec46cd277f\n:END:\n#+title: trips\n" 536870913] [48 :nodes/id "c8c4efcf-4345-493d-937e-b4ec46cd277f" 536870913] [48 :nodes/properties {"CATEGORY" "20210710184318-trips", "ID" "c8c4efcf-4345-493d-937e-b4ec46cd277f", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210710184318-trips.org", "PRIORITY" "B"} 536870913] [48 :nodes/title "trips" 536870913] [48 :nodes/value 3.5 536870913] [49 :nodes/content ":PROPERTIES:\n:ID:       2ce79228-cfbe-4da0-87e8-082fe0728b1d\n:END:\n#+title: software designed for flexibility hanson sussman\n\n[[id:81a17d27-594a-4f01-9ec9-7686271bcf24][coding]] [[id:876a8e7d-8daf-4e9a-9f05-30eb0ea81061][books]]\n\nChapter 1\n- near end: The problem with requiring proofs is that it is usually harder to\n  prove general properties.. than it is to prove special properties. This\n  Encourages us to make stuff as special as possible so we can simplify proofs.\n  - I interpret \"proofs\" here as \"tests\"\n" 536870913] [49 :nodes/id "2ce79228-cfbe-4da0-87e8-082fe0728b1d" 536870913] [49 :nodes/properties {"CATEGORY" "20221108105444-software_designed_for_flexibility_hanson_sussman", "ID" "2ce79228-cfbe-4da0-87e8-082fe0728b1d", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221108105444-software_designed_for_flexibility_hanson_sussman.org", "PRIORITY" "B"} 536870913] [49 :nodes/title "software designed for flexibility hanson sussman" 536870913] [49 :nodes/value 2.0 536870913] [50 :nodes/content ":PROPERTIES:\n:ID:       9ee3fe7b-8e6a-49f1-9061-52a9689abc8c\n:END:\n#+title: macro econ\n" 536870913] [50 :nodes/id "9ee3fe7b-8e6a-49f1-9061-52a9689abc8c" 536870913] [50 :nodes/properties {"CATEGORY" "20230103213951-macro_econ", "ID" "9ee3fe7b-8e6a-49f1-9061-52a9689abc8c", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20230103213951-macro_econ.org", "PRIORITY" "B"} 536870913] [50 :nodes/title "macro econ" 536870913] [50 :nodes/value 2.9999999403953552 536870913] [51 :nodes/content ":PROPERTIES:\n:ID:       9a6affea-e97f-412d-9478-ff8d8f7f7683\n:END:\n#+title: cooking fat\n\nThis is a theory I have that cooking w/ fats, even \"good\" fats like tallow can\nfuck you up.\n\n\n- https://www.jacc.org/doi/abs/10.1016/S0735-1097(98)00681-0\n  - fast food restaurant fat fucks up vasodilation bigtime!\n  - Diets containing high levels of lipid oxidation products may accelerate atherogenesis\n\n- [[id:406a4a8d-4aa4-4538-9294-0a6097df0cc5][hyperlipid]]\n  - eating cream increases TBARS! don't know why\n    - https://high-fat-nutrition.blogspot.com/2007/12/loosing-plot.html\n    - TBARS - from wikipedia:\n      #+begin_quote\n      Because reactive oxygen species (ROS) have extremely short half-lives, they are\n      difficult to measure directly. Instead, what can be measured are several\n      products of the damage produced by oxidative stress, such as TBARS\n      #+end_quote\n    - Thiobarbituric acid reactive substances\n    - NF-kappaB also does this\n    - same w/ CRP\n  - dietary fat causes increase absoarbtion of endotoxins!\n    - https://high-fat-nutrition.blogspot.com/2009/02/fats-absorbing-endotoxin.html\n    - endotoxins = lipopolysaccharides = LPS\n  - chylomicrons cause lower immune response in higher clearance of LPS by liver\n    - https://high-fat-nutrition.blogspot.com/2014/06/cholesterol-do-chylomicrons-clog-your.html\n  - lipoproteins--the DL's and chylomicrons--neutralize LPS\n    - https://high-fat-nutrition.blogspot.com/2014/06/endotoxin-absorption-on-high-fat-diet.html\n" 536870913] [51 :nodes/id "9a6affea-e97f-412d-9478-ff8d8f7f7683" 536870913] [51 :nodes/properties {"CATEGORY" "20220828121229-cooking_fat", "ID" "9a6affea-e97f-412d-9478-ff8d8f7f7683", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220828121229-cooking_fat.org", "PRIORITY" "B"} 536870913] [51 :nodes/title "cooking fat" 536870913] [51 :nodes/value 2.0 536870913] [52 :nodes/content ":PROPERTIES:\n:ID:       5a5d437f-579a-44df-99fb-7d019d13156d\n:END:\n#+title: typescript\n\n[[id:81a17d27-594a-4f01-9ec9-7686271bcf24][coding]]\n\n** the handbook\nhttps://www.typescriptlang.org/docs/handbook/intro.html\n\nsee file://Users/kevinkrausse/Documents/projects/learn-typescript/learn/src/index.ts\n\n\"JavaScript’s rather peculiar runtime semantics\" - which ones?\n\nLIE:\n\"The most common kinds of errors that programmers write can be described as type\nerrors\"\n\nHowever, I definitely see the case for it, and for editor tools\n\n*** Everyday Types\nWhen a [anonymous] function appears in a place where TypeScript can determine how it’s going\nto be called, the parameters of that function are automatically given types.\n\n- object types\n  =function something(coords: {x: number, y: number, color?: string}) { ... }=\n\n- unions =string | number=\n  - \"TypeScript will only allow an operation if it is valid for every member of\n    the union. For example, if you have the union string | number, you can’t use\n    methods that are only available on string\"\n    - BUT you can do _narrowing_\n      #+begin_src typescript\nfunction welcomePeople(x: string[] | string) {\n  if (Array.isArray(x)) {\n    // Here: 'x' is 'string[]'\n    console.log(\"Hello, \" + x.join(\" and \"));\n  } else {\n    // Here: 'x' is 'string'\n    console.log(\"Welcome lone traveler \" + x);\n  }\n// OR!\n  if (typeof x === \"string\") x.toUpper()\n}\n      #+end_src\n\n    - also works for =if (typeof id === \"string\")...=\n\n- _type assersions_\n  =const myCanvas = document.getElementById(\"main_canvas\") as HTMLCanvasElement;=\n  - TypeScript only allows type assertions which convert to a more specific or\n    less specific version of a type. cant to =\"something\" as number=\n  - but you can break free w/ =const a = (someCall() as any) and numberj\n\n- _literals_\n  -  in =const x = \"taco\";=, the type of x is literally \"taco\".\n    This may seem useless, but say you have a function\n    =function(enu: \"emu\"|\"turkey\"|\"ostrich\") { return \"bosst\" }=\n    Then it will be helpful!\n  - numeric literals work the same way\n" 536870913] [52 :nodes/id "5a5d437f-579a-44df-99fb-7d019d13156d" 536870913] [52 :nodes/properties {"CATEGORY" "20221017173436-typescript", "ID" "5a5d437f-579a-44df-99fb-7d019d13156d", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221017173436-typescript.org", "PRIORITY" "B"} 536870913] [52 :nodes/title "typescript" 536870913] [52 :nodes/value 2.0 536870913] [53 :nodes/content ":PROPERTIES:\n:ID:       b23d40cd-e712-427e-b393-fc2e462d1731\n:ROAM_ALIASES: fastai\n:END:\n#+title: fast ai practical deep learning\n\n[[id:ea23ff75-2ef5-4333-9fc8-2432a196891c][ai]]\n\nI think I should actually just run these locally instead..\n\nWhat project could I do today?\n- I think I could solve an ocr problem and put it on my blog as a sample?\n\n* practical deep learning for coders\n** chapter 1\n*** lecture\n- bird/nonbird is really easy compared to 2015\n- google ai blog\n  - basic word problems, explaining jokes\n- radek osmulski\n  - wrote a book about learning deep learning and getting a job and stuff!\n- kaggle does ML competitions! and this guy was #1\n- he invented the ULMFiT alg - which was core for the NLP revolution\n- at tesla and openai they make ppl do this course\n\n- why able to do this so fast?\n  - in 2012, they manually engineered features which takes a shit ton of effor\n    and engineering time and math and phD's wasting time\n  - deep learning doesn't require this! neural nets do this automatically\n\n- you don't need intense hardware!!\n  - myth that we need lots of data is companies trying to sell it\n  - this is bc of transfer learning\n\n- we are using pyTorch, tensorflow is dying\n- fastai is a lib built on top of pytorch\n\n- kaggle\n  - his is jhoward, jupyter notebook 101\n\n- DataBlock is important. All the best algs are already known and you don't\n  spend time tweaking them in practice. Mostly you just need to get the data\n  into your model to train\n  - inputs\n    - blocks = types of inputs\n    - get_items = fn to return your training sets\n    - splitter = how you get your training set\n    - get_y = how to get the label.\n    - item_tfms = how to transform each object. i.e. resize\n  - at the end you get a data loaders object, which pytorch uses to pull sample data to\n    train the model with\n  - docs.fast.ai is how you get api info\n  - can also use DataLoaders, which is an even simpler way to create this\n\n- learner\n  - something that combines a model and the data used to train it with.\n    pass in a model and a data loader object\n  - can use a standard model, or you can use timm!\n    - which is a pytorch library of a bunch of different models!\n  - by default, fastai downloads pre-trained weights for you\n    - ie someone else has already trained the model and made the parameters\n      available on the internet.\n- fine_tune\n  - takes original dataset and your dataset, and just finds the differences and\n    tunes the parameters in just that special way.\n*** book\n#+begin_quote\nTrying to spend too much time on the theory can be counterproductive. The key is\nto just code and try to solve problems: the theory can come later, when you have\ncontext and motivation.\n#+end_quote\n\n- the fastai =cnn_learner= will remove the last layer of the model and replace it\n  with one or more layers w/ random weights.\n  - the _head_ is this last added part\n\n- _transfer learning_ is greatly underrated, but is awesome\n  _fine-tuning_ is the process of adapting a pretrained model\n  - it will change the later layers (esp. the /head/) faster\n- _epoch_ is one pass through the training set\n\n#+begin_quote\ndataset contains over 20 million sentence pairs in French and English. He built\nthe dataset in a really clever way: by crawling millions of Canadian web pages\n(which are often multilingual) and then using a set of simple heuristics to\ntransform URLs of French content onto URLs pointing to the same content in\nEnglish.\n#+end_quote\n\nCreating datasets in creative ways is important. keep this in the back of your\nhead.\n\n- by exploring hyperparameters, and measuring their effectiveness against a\n  validation set, we can inadvertantly be over-fitting!\n  - thus, we have a _test set_ to only use at the very very end to see how well\n    we did\n** chapter 2\n*** video\n- formums.fast.ai\n  - every lesson has additional information\n  - tanishq abraham -- has awesome blog post about deploying models\n- jupyter notebook extensions\n  - table of contents (2) - give a nice navigation bar\n  - collapsable headings - collapse and navigate to top\n  - nbdev - install with mamba\n\n\n- more epochs, you might want to augment images in the transformer\n\n- train model /before/ cleaning data!\n  - this can help you find problematic images by using fastai's\n    ImageClassifierCleaner\n\n- huggingface.co -\n  - uses gradio sdk. then make a git repo, then you push it to the repo (which\n    is hosted on huggingface), and then you have an app!\n    - which is actually really cool!\n    - on the forum, he has some examples\n      =learn.export= gives you a file. in kaggle, you can save this file, and\n      then go to the data tab, and find that file.\n      - in colab, you can do the same thing and download from their file browser\n      Then you just take this model, and save it to your github.\n      - can just call =load_learner=\n  - gradio has some cool input mechanisms, gr.Interface\n    - then you can run it locally and see!\n    - they have a lot of widgets and stuff. streamlit.io has a cool thing too.\n    - gradio acutally publishes an API!!!\n      - so you can just talk to it with javascript\n\n  - =#|export= at the top of cells marks them for export. then you run:\n    #+begin_src python\n    import nbdev.export from notebook2script\n    notebook2script.export('app.py')\n    #+end_src\n    and it will write a file, app.py with the concattenation of those cells!\n\n- =?fn_name= in notebook shows short docs of thing =??fn_name= shows extended docs\n\n- you can do most stuff on your own computer, but when you need a gpu, just go to\n  kaggle or colab\n  - fastai/fastsetup github repo - this sets up everything\n    - use conda / your own dev python! DONT use the system python!\n      don't wanna fuck with that.\n\n- use mamba instead of pip bc it will work on your gpu better!\n\n*** book\n- look at books website for newest methods on getting new datasets\n\n- resizing\n  - cutting, squishing, and filling are less than ideal due to throwing out\n    features, unrealistic input, and wasted computation\n  - in practice they re-frame some subset of the image. often taking a different\n    subsection each time.\n- data augmentation\n  - like in images we rotate, flip, crop, warp, change contrast/brightness to\n    make the model more flexible\n** episode 3 / chapter 4\n- gradient / paperspace is awesome and give you a legit computer\n- matrix mult is unintuitive\n  - remind yourself that it's just multiplication and addition.\n    then you have to transpose the weights for each row\n- should try the titanic competition!\n\n- numpy doesn't use GPU or calculating gradients\n\n- _mini-batch_ is the group of items we calculate the loss over before doing an\n  optimization step\n  - batches are good bc they optimize by being able to put a lot into the GPU\n    all at once. But too much can overload the gpu memory\n  - a =DataLoader= can automatically split stuff into batches\n    - you give a DL a =DataSet= which is a collection of tuples containing\n      the independent and dependent variables\n\n- torch.sigmoid() calculates the sigmoid. e.g. =my_tensor.sigmoid()=\n\n- PyTorch gradients\n  - you call .requires_grad_() on a tensor to mark it for calculation.\n    Then every time you perform an operation on it, it remembers the current\n    gradient.\n    - so youd do e.g.\n      #+begin_src python\ndef mnist_loss(predictions, targets):\n    predictions = predictions.sigmoid()\n    return torch.where(targets==1, 1-predictions, predictions).mean()\n\nweights = init_params((28*28,1))\nbias = init_params(1)\ndl = DataLoader(dset, batch_size=256)\nbatch_size = 4\nbatch = train_x[:batch_size]\npreds = batch@weights + bias\nloss = mnist_loss(preds, train_y[:batch_size])\nloss.backward() # and THIS calculates the grad for weights and bias, which will show up below as:\nweights.grad, bias.grad\n      #+end_src\n      NOTE: calling =backward()= actually /adds/ the gradients of loss to\n      existing gradients, so you should call =weights.grad.zero_()=\n\n  - to NOT include something in the gradient you must do\n     =with torch.no_grad(): <expr>=\n\n#+begin_src python\ndef train_epoch(model, lr, params):\n    for xb,yb in dl:\n        calc_grad(xb, yb, model)\n        for p in params:\n            p.data -= p.grad*lr\n            p.grad.zero_()\n#+end_src\n\n- PyTorch modules\n  - a class inheriting from =nn.Module=\n  - contains basically the parameters for some basic models. e.g. nn.Linear\n  - can combine them! e.g. =nn.Sequential(nn.Linear(28*28,30), nn.ReLU(), nn.Linear(30,1))=\n- Optimizer (might be a fastai thing?)\n  - takes in model params, and learning rate\n  - defines =step()= and =zero_grad()=\n  - fastai provides the SGD optimizer\n- Learner. combines everything and runs it\n  #+begin_src python\nLearner(dls, nn.Linear(28*28,1), opt_func=SGD, loss_func=mnist_loss, metrics=batch_accuracy)\n  #+end_src\n** lesson 4 (NLP)\n- will be using transformers i.e. from [[id:d751c891-f4e9-4687-a2d5-800dbec5da9b][attention is all you need]] but the book uses recurrent neural networks\n- watch lesson 0! from the previous section\n\n- likes paperspace!\n\n- huggingface transformers library\n\n- 4 key libs: numpy, matplotlib, pandas, pytorch\n  - book by authors of pandas called \"python for data analysis 3E\"\n  - the fastai book and this will give basically everything you need to make\n    something totally fucking awesome\n  - it's good to know the basics\n\n- hugging face model hub is dope\n  deberta-v3-small\n\n** book chapter 10\n- language models guess the next word in a sequence. you don't need training\n  data, just to give it lots of text. so it's _self-supervised_ learning in this\n  sense.\n- BUT you don't usually directly use these. You use them as pre-trained models for something else bc they come to understand lots about language in their many weights\n" 536870913] [53 :nodes/id "b23d40cd-e712-427e-b393-fc2e462d1731" 536870913] [53 :nodes/properties {"CATEGORY" "20220823150816-fast_ai_practical_deep_learning", "ROAM_ALIASES" "fastai", "ID" "b23d40cd-e712-427e-b393-fc2e462d1731", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220823150816-fast_ai_practical_deep_learning.org", "PRIORITY" "B"} 536870913] [53 :nodes/title "fast ai practical deep learning" 536870913] [53 :nodes/value 2.0 536870913] [54 :nodes/content ":PROPERTIES:\n:ID:       0b0345c1-6f87-4204-803c-21c4b8049b89\n:END:\n#+title: nac\n\n[[id:f08e30aa-e83b-451f-88b7-fe954bab2f6e][supplements]]\n\n** TODO: Perspective: Prospects for Nutraceutical Support of Intestinal Barrier Function\n\nhttps://doi.org/10.1093/advances/nmaa139\n\nlot of good theory here\n\n** N-Acetylcysteine (NAC): Impacts on Human Health\n\nhttps://doi.org/10.3390/antiox10060967\n\n- used as treatment for tylenol overdose?\n\n- 4.7. Gastrointestinal Diseases\n  - helps efficacy of antibiotics\n  - used in treatment of H. Pylori infections.\n" 536870913] [54 :nodes/id "0b0345c1-6f87-4204-803c-21c4b8049b89" 536870913] [54 :nodes/properties {"CATEGORY" "20230129201342-nac", "ID" "0b0345c1-6f87-4204-803c-21c4b8049b89", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20230129201342-nac.org", "PRIORITY" "B"} 536870913] [54 :nodes/title "nac" 536870913] [54 :nodes/value 2.0 536870913] [55 :nodes/content ":PROPERTIES:\n:ID:       c96bbc45-f182-4fe7-8bee-e876dc694b2c\n:END:\n#+title: ben bikman\n\n[[id:014d95aa-bba2-4a62-9d92-182d0aac0a62][keto]] [[id:a49db2ff-0264-4192-a734-0ee6402102df][researcher]]\n\n- in podcast STEM-Talk 143\n  - ketosis is protein sparing. partially bc it reduces amino acid oxidation\n    (and decreases gluconeogenesis), but ALSO in its own right in muscles.\n    - this relates to [[id:5cd35f00-71bc-47f2-b256-8830189ba73e][fat and protein]] requirements\n" 536870913] [55 :nodes/id "c96bbc45-f182-4fe7-8bee-e876dc694b2c" 536870913] [55 :nodes/properties {"CATEGORY" "20221119132349-ben_bikman", "ID" "c96bbc45-f182-4fe7-8bee-e876dc694b2c", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221119132349-ben_bikman.org", "PRIORITY" "B"} 536870913] [55 :nodes/title "ben bikman" 536870913] [55 :nodes/value 2.649999976158142 536870913] [56 :nodes/content ":PROPERTIES:\n:ID:       e6eeb8fa-b223-45d2-96cf-11bbfc64a4f0\n:END:\n#+title: yc startup job guide\n\n[[id:2edcdb52-f77b-477c-8af5-c8c2eb8c5353][jobsearch]] [[id:03f07731-cc68-432c-9d16-9c2944f6a21c][y combinator]]\n\nhttps://www.ycombinator.com/library/Ei-yc-ultimate-startup-job-guide\n\n\nsalary info!\nhttps://www.levels.fyi/?compare=Amazon,Microsoft,Facebook&track=Software%20Engineer\n\n- I need to work on my story\n  - why I left ekata and why this addresses those issues and aligns with my\n    next career steps\n- I need a single page resume -- see their template\n  - just re-read \"Writing a great resume\"\n  - No \"tech dump\" at the bottom of the resume\n\n** job workshop!\n- earlier stage, the more generalist you are, talking to customers, etc.\n- resume\n  - keep to one page. Make it brief af!\n  - he has a little summary at the top\n  - don't list hackathons\n  - put things in context. Dont have a skills or qualities section. just put\n    in the work\n  - craft resume for each job!\n    Have a mega resume and then trim down per job\n  - one liner at the top of what you're looking for could be cool\n  - for each position:\n    - what did you work on?\n    - what impact did you have?\n      - this is less so for engineers, but try to put it.\n    - what skills did you use?\n    - what responsibility did they give you?\n*** know your story!\n- know your motivation!\n- working at a startup is better for learning about starting a startup.\n- financial upside could be huge at startup. BUT you can't rely on that.\n  - you'll get paid pretty well cuz they need to compete!\n- the people you pay the most are the first people to leave.\n  They're the first people to get pissed.\n- ownership at startup is about creating a new thing and owning it.\n  Impact is the number of people who's life was impacted.\n- Topgrade yourself!\n  - it shows how introspective you are. say what you could do better!\n- you have to be passionate about what they're building.\n  people can tell when you're just trying to get a job anywhere\n- this guy got rejected at pinterest, slack, facebook. Which is dope!\n- cold outreach\n  - know the product!\n  - get excited about working there!\n  - narrow down to <10 companies!\n  - connect directly to founders asking for a job\n  - suggest 2-3 things you'd improve about the product or business\n    - you don't need to be right. you just need to be thinking.\n    - you'll skip the interview and just talk about what you want to talk about!\n      Put the interveiw on your terms\n  - he's thrown an interview in the trash\n- what's your runway\n  - check that they're transparent and honest\n  - gives you a foothold for how much equity and comp you should ask for.\n  - you should know that if they can only emply you for a year.\n- how do you think about test automation?\n  - shares a lot about how they think about deployment and engineer productivity\n\n\n** what is a startup\n- _product market fit_ - turning point is acheiving\n  - this transitions into growth mode\n  - pre-turning point startups can operate for 2-3 years with no revenue\n- _business model_ - how they intend to make money\n- some startups don't need a lot of funding bc they generate\n  early on, but some need lots of funding to reach critical mass\n- money is very important\n  - _burn rate_ - money company spends per month\n  - _runway_ - months company has left given it's funding, revenue, & burn rate\nquestion: whats your runway / burn rate / revenue?\nquestion: what's your growth rate?\nquestion: do you intend to seek more funding?\n** how to pick a good startup\n#+begin_quote\nAs you browse jobs, do some soul searching to figure out what you actually find\ninteresting. Ask yourself if this startup in particular has an interesting\ntechnology for you to work on – then make sure you channel that interest and\nexcitement for the tech when you talk with the team.\n#+end_quote\n\nquestion: what would I actually be doing?\n\n#+begin_quote\nSo be open about your areas of interest and concerns, and look for answers to\nyour questions that are thoughtful and balanced — revealing both the pros and\nthe cons of any scenario.\n#+end_quote\n\nquestion: ask about my concerns\n** interviewing at a startup\n- tech interview\n- in-person project to work on together\n- _contract/trial_ a short period contract to work with someone for a short\n  period to see if their a good fit\nquestion: what is the interview process?\nquestion: do you offer contract?\n\n** why work at a startup\n- At a startup, your contributions are not limited by your title or role.\n  - i.e. you move up in the company faster\n" 536870913] [56 :nodes/id "e6eeb8fa-b223-45d2-96cf-11bbfc64a4f0" 536870913] [56 :nodes/properties {"CATEGORY" "20220818175343-yc_startup_job_guide", "ID" "e6eeb8fa-b223-45d2-96cf-11bbfc64a4f0", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220818175343-yc_startup_job_guide.org", "PRIORITY" "B"} 536870913] [56 :nodes/title "yc startup job guide" 536870913] [56 :nodes/value 2.375 536870913] [57 :nodes/content ":PROPERTIES:\n:ID:       aea9bcb4-0f5d-438a-b4df-99706a8f7527\n:END:\n#+title: herbal antibiotics harrod buhner\n\n- says pharmesutical antibiotics will soon be totally useless\n\n- [[id:a49bfbb3-9c08-42cf-909d-4a9f789aeb61][berberine]] related substances\n  - [[id:fead6bfc-126d-47d7-9f4a-1bdcd7b41da8][coptis chinensis]] has more 4 to 8 percent berberine\n    Guy says whole plants are better bc they have synergistic compounds in them.\n  - make a tincture w/ 1:5 coptis:liquid ratio by weight 70% alcohol & acidic.\n" 536870913] [57 :nodes/id "aea9bcb4-0f5d-438a-b4df-99706a8f7527" 536870913] [57 :nodes/properties {"CATEGORY" "20221003143312-herbal_antibiotics_harrod_buhner", "ID" "aea9bcb4-0f5d-438a-b4df-99706a8f7527", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221003143312-herbal_antibiotics_harrod_buhner.org", "PRIORITY" "B"} 536870913] [57 :nodes/title "herbal antibiotics harrod buhner" 536870913] [57 :nodes/value 2.0 536870913] [58 :nodes/content ":PROPERTIES:\n:ID:       edebe1c5-087e-4e0b-9c72-5a5640a32489\n:END:\n#+title: personal-projects\n\n[[id:f8d477e4-c321-4864-93fc-38dc7db66fc6][kev-nrepl]]\n" 536870913] [58 :nodes/id "edebe1c5-087e-4e0b-9c72-5a5640a32489" 536870913] [58 :nodes/properties {"CATEGORY" "20210318212810-personal_projects", "ID" "edebe1c5-087e-4e0b-9c72-5a5640a32489", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210318212810-personal_projects.org", "PRIORITY" "B"} 536870913] [58 :nodes/title "personal-projects" 536870913] [58 :nodes/value 2.0 536870913] [59 :nodes/content ":PROPERTIES:\n:ID:       83a85a81-5256-4915-8758-10777d5dc1fb\n:END:\n#+title: hayek\n\n[[id:903253ec-c378-4afd-881c-195447e4e4cb][liberalism]]\n" 536870913] [59 :nodes/id "83a85a81-5256-4915-8758-10777d5dc1fb" 536870913] [59 :nodes/properties {"CATEGORY" "20220412132905-hayek", "ID" "83a85a81-5256-4915-8758-10777d5dc1fb", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220412132905-hayek.org", "PRIORITY" "B"} 536870913] [59 :nodes/title "hayek" 536870913] [59 :nodes/value 2.6666666865348816 536870913] [60 :nodes/content ":PROPERTIES:\n:ID:       a49bfbb3-9c08-42cf-909d-4a9f789aeb61\n:END:\n#+title: berberine\n\n[[id:f08e30aa-e83b-451f-88b7-fe954bab2f6e][supplements]] [[id:9dba0048-02d0-4bde-9866-50ca4a6bf2ff][metformin]] [[id:19378c31-8c63-4f00-b18e-fb15f8ff07f5][drugs]]\n\n\n- current story\n  - berberine -> kills BSH bacteria that bread down bile acid -> more bile acid ->\n    FXR signaling -> expression of anti-microbial genes -> clearning of bacteria\n    and better health\n  - could this be why I usually diarrhea post-fast? during the fast, lots of\n    BSH bacteria die, then when I eat, lots more bile acid, then subsequent FXR\n    activiation and anti-microbe activity?\n\n** Activation of IGF-1/IGFBP-3 signaling by berberine improves intestinal mucosal barrier of rats with acute endotoxemia\n\nhttps://doi.org/10.1016/j.fitote.2017.11.012\n\n\"LPS has been reported to inhibit IGF-I and IGFBP-3 expression\"\n- why?\n  - Activity of GH/IGF-I axis in trauma and septic patients during artificial\n    nutrition (https://link.springer.com/article/10.1007/BF03343993)\n    Says there's less growth hormone (GH) response to growth hormone stimulating\n    hormode (GHSH) in sepsis patients. This feeds into IGF-1 not being\n    stimulated, which causes lack of expression and tight junction failing\n  - THEORY: immune system demand becomes so high that the body develops \"growth\n    resistance\" (e.g. to GH) in order to spare building capacity for the immune\n    system / acute trauma.\n    - related: https://doi.org/10.1093/advances/nmaa139\n\n** Brands to buy!\nhttps://www.ncbi.nlm.nih.gov/pmc/articles/PMC5807210/\n\nbasically, Thorne, Integrative Therapeutics, or Vital Nutrients (most expensive)\n\nBUT Dr. Whitaker Berberine Supplement is the best!\n** Efficacy of Berberine in Patients with Type 2 Diabetes\n\nhttps://doi.org/10.1016%2Fj.metabol.2008.01.013\n\nused to treat sibo. related to metformin (like same family of molecules). But\nmight be better for sibo? [[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2410097/#:~:text=Compared%20with%20metformin%2C%20berberine%20exhibited,activity%20is%20better%20than%20metformin][better than metform]].\n** potential post?\n- amber (and I) had fat intolerance?\n  - link this with less bile production\n- we had sibo\n** Regulation of antibacterial defense in the small intestine by the nuclear bile acid receptor\n:PROPERTIES:\n:ID:       e22d1b38-9b0c-46df-ac70-f9fe028527e7\n:END:\nfound via [[id:919e9425-207e-45b9-9ab8-891fd455f7f4][Berberine Directly Affects the Gut Microbiota to Promote Intestinal Farnesoid X Receptor Activation]]\n\nhttps://pubmed.ncbi.nlm.nih.gov/16473946/\nhttps://sci-hub.se/10.1073/pnas.0509592103\n#+begin_quote\nObstruction of bile flow in humans or rodents causes proliferation of intestinal\nbacteria and mucosal injury, which can lead to bacterial translocation across\nthe mucosal barrier and systemic infection (2).  Oral administration of bile\nacids inhibits the bacterial overgrowth and translocation caused by biliary\nobstruction in rodents (3, 4).\n#+end_quote\n\nreminds me of https://fireinabottle.net/campari-is-a-dual-bile-acid-receptor-agonist-that-activates-ampk/\n\nFXR activation causes\n- aniboitic effect\n- less bacteria\n\n- _ileum_ = last section of small intestine\n\nYou can stop FXR activation by performing bile duct ligation (BDL). This causes\nbacterial overgrowth in ileum, /especially aerobes/. This is completely blocked\nby giving an FXR agonist.\n\"FXR-KO mice had 10-fold higher levels of aerobic bacteria in mesenteric lymph nodes as compared with WT animals\"\n\"transmission electron microscopy revealed large ruptures in the mucosal surface of BDL WT\nmice, with bacteria penetrating deep into the epithelium\"\n\"Virtually no mucosal damage was detected in electron microscopy studies done by using tissue from GW4064-treated mice\"\nFXR-KO mice had higher bacterial translocation\n** microbiota section\n*** Effects of Berberine on the Gastrointestinal Microbiota\nhttps://www.ncbi.nlm.nih.gov/pmc/articles/PMC7933196/\n\n  #+begin_quote\nBerberine is also known to reduce the diversity of the GM and interfere with the relative abundance of Desulfovibrio, Eubacterium, and Bacteroides\n  #+end_quote\n\nHEALS SIBO\n\n  #+begin_quote\n  Short-term exposure to berberine alters the populations of intestinal bacteria by reducing the activity of Clostridium cluster XIVa and IV, and their bile salt hydrolase (BSH), thus leading to the accumulation of taurocholic acid (TCA). TCA can activate intestinal farnesoid X receptor (FXR) which can then mediate the metabolism of bile acids, lipids, and glucose (Tian et al., 2019).\n  #+end_quote\n\n*** Berberine Directly Affects the Gut Microbiota to Promote Intestinal Farnesoid X Receptor Activation\n:PROPERTIES:\n:ID:       919e9425-207e-45b9-9ab8-891fd455f7f4\n:END:\nwhich links to FXR receptor link:\nThis a good overview\nhttps://www.ncbi.nlm.nih.gov/pmc/articles/PMC6323626/\n\n- \"A recent study indicated a novel mechanism for the intestine-restricted FXR\n  agonist fexaramine that can activate intestinal FXR and TGR5/GLP-1 signaling\n  through intestinal microbiota activity to protect against obesity and related\n  metabolic disease\"\n- \"Recent evidence suggested the lipid-lowering effect of BBR involves\n  modulating bile acid composition and activating intestinal FXR signaling (Guo\n  et al., 2016; Sun et al., 2017).\"\n- \"We demonstrated that BBR directly altered the gut microbiota by\nreducing Clostridium spp. and subsequently altered intestinal FXR signaling\"\n- Berberine in a dish of bacteria changes the composition, \"especially\nreducing BSH-expressing bacteria like Clostridium spp.\".\n- so reduces Clostridium and its bile salt hydrolase (bsh) activity.\n- need to look more into BSH bacteria\n- how to bile acids work? conjugation / deconjugation\n    - see http://www.vivo.colostate.edu/hbooks/pathphys/digestion/liver/bile.html\n*** The complex structure of bile salt hydrolase from Lactobacillus salivarius reveals the structural basis of substrate specificity\n- https://www.nature.com/articles/s41598-019-48850-6 seems very interesting\n    #+begin_quote\n    The bile salt hydrolase (BSH) produced by intestinal bacteria catalyzes deconjugation of glyco-conjugated and tauro-conjugated bile acids through the hydrolysis of the amide bond and the release of free bile acids (e.g. cholic acid and chenodeoxycholic acid) and amino acids (glycine and taurine)1. Deconjugation is a gateway reaction in the metabolism of bile acids in the small intestine2,3. Therefore, BSH participates in a range of metabolic processes in mammalians including the regulation of dietary lipid absorption, cholesterol metabolism, energy and inflammation homeostasis4,5,6.\n    #+end_quote\n- other shite\n- which caused buildup of taurocholic acid (tca) \"TCA was associated with\nactivation of intestinal FXR, which can mediate bile acid, lipid, and\nglucose metabolism\".\n*** Intestinal Farnesoid X Receptor Signaling Modulates Metabolic Disease\n\n- fxr also affects ceramide synthesis in the small intestine according\n    to https://pubmed.ncbi.nlm.nih.gov/28249275/\n    which might be a mechanism for better sugar absoarbtion\n- but why would you produce ceramides in this case?\n\n*** Regulation of antibacterial defense in the small intestine by the nuclear bile acid receptor\nhttps://www.ncbi.nlm.nih.gov/pmc/articles/PMC1450165/\n\n- FXR activiation leads to many anti microbial gene expression\n\n** Berberine Ameliorates Periodontal Bone Loss by Regulating Gut Microbiota\nhttps://pubmed.ncbi.nlm.nih.gov/30199654/\n\nbasically just that it improves intestinal barrier, which could be why it\nimproves post-menopausal bone loss.\n\n** questions\n- why would this bile salt in latter intestine cause expression of anti-microbial genes?\n  How does the regulation get out of wack in the first place? Like shouldn't\n  these just be signaled all the time?\n  - Well maybe initial disbiosis causes bacterial BSH to interfere with normal\n    signalling and this breaks the whole system. Maybe these bacteria in a\n    sense evolved to do that\n" 536870913] [60 :nodes/id "919e9425-207e-45b9-9ab8-891fd455f7f4" 536870913] [60 :nodes/properties {"CATEGORY" "20220330224805-berberine", "ID" "919e9425-207e-45b9-9ab8-891fd455f7f4", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220330224805-berberine.org", "PRIORITY" "B", "ITEM" "Berberine Directly Affects the Gut Microbiota to Promote Intestinal Farnesoid X Receptor Activation"} 536870913] [60 :nodes/title "Berberine Directly Affects the Gut Microbiota to Promote Intestinal Farnesoid X Receptor Activation" 536870913] [60 :nodes/value 3.666666753590107 536870913] [61 :nodes/content ":PROPERTIES:\n:ID:       903253ec-c378-4afd-881c-195447e4e4cb\n:END:\n#+title: liberalism\n" 536870913] [61 :nodes/id "903253ec-c378-4afd-881c-195447e4e4cb" 536870913] [61 :nodes/properties {"CATEGORY" "20220412132948-liberalism", "ID" "903253ec-c378-4afd-881c-195447e4e4cb", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220412132948-liberalism.org", "PRIORITY" "B"} 536870913] [61 :nodes/title "liberalism" 536870913] [61 :nodes/value 6.947916567325592 536870913] [62 :nodes/content ":PROPERTIES:\n:ID:       ee83656e-7b72-4a3f-8759-629630d8437d\n:END:\n#+title: getting-things-done-allen\n\nGetting Things Done: The Art of Stress-Free Productivity\n\nauthors: david allen\nyear: 2001\nread: march 2021\n\n- if you write something into a structure you can trust, it eases the heavy\n  burden of having to remember it.\n- little burdens of unwritten todos cause serious stress, harm productivity bc of\n  high resting cognitive load, and can cause burnout\n  - with nothing having to stay in your mind, you can clear it and have\n    \"mind like water\" where we just focus on what's right in front of us\n  - most distractions don't come from environment but from our own minds\n  - this only works if your mind FULLY trusts your system\n- put everything that needs to get done in one place and process in a standardized\n  way\n" 536870913] [62 :nodes/id "ee83656e-7b72-4a3f-8759-629630d8437d" 536870913] [62 :nodes/properties {"CATEGORY" "20210323195116-getting_things_done_allen", "ID" "ee83656e-7b72-4a3f-8759-629630d8437d", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210323195116-getting_things_done_allen.org", "PRIORITY" "B"} 536870913] [62 :nodes/title "getting-things-done-allen" 536870913] [62 :nodes/value 3.683333396911621 536870913] [63 :nodes/content ":PROPERTIES:\n:ID:       ae02ca23-5c6a-462f-89c8-4ec81a0e0e7e\n:END:\n#+title: spotify\n" 536870913] [63 :nodes/id "ae02ca23-5c6a-462f-89c8-4ec81a0e0e7e" 536870913] [63 :nodes/properties {"CATEGORY" "20210327091620-spotify", "ID" "ae02ca23-5c6a-462f-89c8-4ec81a0e0e7e", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210327091620-spotify.org", "PRIORITY" "B"} 536870913] [63 :nodes/title "spotify" 536870913] [63 :nodes/value 2.9999999403953552 536870913] [64 :nodes/content ":PROPERTIES:\n:ID:       dc845692-28a8-4d53-bec6-e41102f54cac\n:END:\n#+title: some-example\n\n* some\n** stuff\nbasically\n" 536870913] [64 :nodes/id "dc845692-28a8-4d53-bec6-e41102f54cac" 536870913] [64 :nodes/properties {"CATEGORY" "20210320135152-some_example", "ID" "dc845692-28a8-4d53-bec6-e41102f54cac", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210320135152-some_example.org", "PRIORITY" "B"} 536870913] [64 :nodes/title "some-example" 536870913] [64 :nodes/value 3.7666666507720947 536870913] [65 :nodes/content ":PROPERTIES:\n:ID:       7ff8180b-2d58-44a2-b49b-386821b0fe4f\n:END:\n#+title: dr solimon\n\n** 2021-07-29\n- what's difference between amph salts and just dextroamph\n- did >5 mg's and had electrolyte problems, slightly swollen feet.\n  What gives with that? How can I mitigate that?\n" 536870913] [65 :nodes/id "7ff8180b-2d58-44a2-b49b-386821b0fe4f" 536870913] [65 :nodes/properties {"CATEGORY" "20210729085807-dr_solimon", "ID" "7ff8180b-2d58-44a2-b49b-386821b0fe4f", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210729085807-dr_solimon.org", "PRIORITY" "B"} 536870913] [65 :nodes/title "dr solimon" 536870913] [65 :nodes/value 2.0 536870913] [66 :nodes/content ":PROPERTIES:\n:ID:       13a39de3-44c1-4116-bb39-cbaac1768828\n:publish_date: 2023-02-07\n:END:\n#+title: home\n*** Latest Posts\n[[id:1769e7fd-ea9f-462f-bcda-f890a1b8bc93][Why Breaking a Fast Sucks]]\n\n*** topic pages (mostly backlinks)\n[[id:81a17d27-594a-4f01-9ec9-7686271bcf24][coding]]\n[[id:876a8e7d-8daf-4e9a-9f05-30eb0ea81061][books]]\n[[id:b77d4578-bc50-42a8-94c4-b11d27f78837][food]]\n[[id:d295f68e-a5d2-4081-90c5-e6aa1eb47b11][blogs]]\n\n*** random\n[[./#/graph][roam graph]] (might be slow)\n" 536870913] [66 :nodes/id "13a39de3-44c1-4116-bb39-cbaac1768828" 536870913] [66 :nodes/properties {"CATEGORY" "20221031201811-home", "PUBLISH_DATE" "2023-02-07", "ID" "13a39de3-44c1-4116-bb39-cbaac1768828", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221031201811-home.org", "PRIORITY" "B"} 536870913] [66 :nodes/title "home" 536870913] [66 :nodes/value 2.0 536870913] [67 :nodes/content ":PROPERTIES:\n:ID:       53e3138a-6619-4fd5-82ee-1c6c95aaf864\n:END:\n#+title: bel lang source\n\n[[id:7b2d57bc-1f3c-4ab6-a4d6-b557cc1a7259][bel lang]]\n\njust a local copy of bel lang source to help reading\n\n#+begin_src bash :results output\ncurl \"https://sep.yimg.com/ty/cdn/paulgraham/bel.bel\"\n#+end_src\n\n﻿; Bel in Bel. 9 October 2019, 9:14 GMT\n\n\n(def no (x)\n  (id x nil))\n\n(def atom (x)\n  (no (id (type x) 'pair)))\n\n(def all (f xs)\n  (if (no xs)      t\n      (f (car xs)) (all f (cdr xs))\n                   nil))\n\n(def some (f xs)\n  (if (no xs)      nil\n      (f (car xs)) xs\n                   (some f (cdr xs))))\n\n(def reduce (f xs)\n  (if (no (cdr xs))\n      (car xs)\n      (f (car xs) (reduce f (cdr xs)))))\n\n(def cons args\n  (reduce join args))\n\n(def append args\n  (if (no (cdr args)) (car args)\n      (no (car args)) (apply append (cdr args))\n                      (cons (car (car args))\n                            (apply append (cdr (car args))\n                                          (cdr args)))))\n\n(def snoc args\n  (append (car args) (cdr args)))\n\n(def list args\n  (append args nil))\n\n(def map (f . ls)\n  (if (no ls)       nil\n      (some no ls)  nil\n      (no (cdr ls)) (cons (f (car (car ls)))\n                          (map f (cdr (car ls))))\n                    (cons (apply f (map car ls))\n                          (apply map f (map cdr ls)))))\n\n(mac fn (parms . body)\n  (if (no (cdr body))\n      `(list 'lit 'clo scope ',parms ',(car body))\n      `(list 'lit 'clo scope ',parms '(do ,@body))))\n\n(set vmark (join))\n\n(def uvar ()\n  (list vmark))\n\n(mac do args\n  (reduce (fn (x y)\n            (list (list 'fn (uvar) y) x))\n          args))\n\n(mac let (parms val . body)\n  `((fn (,parms) ,@body) ,val))\n\n(mac macro args\n  `(list 'lit 'mac (fn ,@args)))\n\n(mac def (n . rest)\n  `(set ,n (fn ,@rest)))\n\n(mac mac (n . rest)\n  `(set ,n (macro ,@rest)))\n\n(mac or args\n  (if (no args)\n      nil\n      (let v (uvar)\n        `(let ,v ,(car args)\n           (if ,v ,v (or ,@(cdr args)))))))\n\n(mac and args\n  (reduce (fn es (cons 'if es))\n          (or args '(t))))\n\n(def = args\n  (if (no (cdr args))  t\n      (some atom args) (all [id _ (car args)] (cdr args))\n                       (and (apply = (map car args))\n                            (apply = (map cdr args)))))\n\n(def symbol (x) (= (type x) 'symbol))\n\n(def pair   (x) (= (type x) 'pair))\n\n(def char   (x) (= (type x) 'char))\n\n(def stream (x) (= (type x) 'stream))\n\n(def proper (x)\n  (or (no x)\n      (and (pair x) (proper (cdr x)))))\n\n(def string (x)\n  (and (proper x) (all char x)))\n\n(def mem (x ys (o f =))\n  (some [f _ x] ys))\n\n(def in (x . ys)\n  (mem x ys))\n\n(def cadr  (x) (car (cdr x)))\n\n(def cddr  (x) (cdr (cdr x)))\n\n(def caddr (x) (car (cddr x)))\n\n(mac case (expr . args)\n  (if (no (cdr args))\n      (car args)\n      (let v (uvar)\n        `(let ,v ,expr\n           (if (= ,v ',(car args))\n               ,(cadr args)\n               (case ,v ,@(cddr args)))))))\n\n(mac iflet (var . args)\n  (if (no (cdr args))\n      (car args)\n      (let v (uvar)\n        `(let ,v ,(car args)\n           (if ,v\n               (let ,var ,v ,(cadr args))\n               (iflet ,var ,@(cddr args)))))))\n\n(mac aif args\n  `(iflet it ,@args))\n\n(def find (f xs)\n  (aif (some f xs) (car it)))\n\n(def begins (xs pat (o f =))\n  (if (no pat)               t\n      (atom xs)              nil\n      (f (car xs) (car pat)) (begins (cdr xs) (cdr pat) f)\n                             nil))\n\n(def caris (x y (o f =))\n  (begins x (list y) f))\n\n(def hug (xs (o f list))\n  (if (no xs)       nil\n      (no (cdr xs)) (list (f (car xs)))\n                    (cons (f (car xs) (cadr xs))\n                          (hug (cddr xs) f))))\n\n(mac with (parms . body)\n  (let ps (hug parms)\n    `((fn ,(map car ps) ,@body)\n      ,@(map cadr ps))))\n\n(def keep (f xs)\n  (if (no xs)      nil\n      (f (car xs)) (cons (car xs) (keep f (cdr xs)))\n                   (keep f (cdr xs))))\n\n(def rem (x ys (o f =))\n  (keep [no (f _ x)] ys))\n\n(def get (k kvs (o f =))\n  (find [f (car _) k] kvs))\n\n(def put (k v kvs (o f =))\n  (cons (cons k v)\n        (rem k kvs (fn (x y) (f (car x) y)))))\n\n(def rev (xs)\n  (if (no xs)\n      nil\n      (snoc (rev (cdr xs)) (car xs))))\n\n(def snap (xs ys (o acc))\n  (if (no xs)\n      (list acc ys)\n      (snap (cdr xs) (cdr ys) (snoc acc (car ys)))))\n\n(def udrop (xs ys)\n  (cadr (snap xs ys)))\n\n(def idfn (x)\n  x)\n\n(def is (x)\n  [= _ x])\n\n(mac eif (var (o expr) (o fail) (o ok))\n  (with (v (uvar)\n         w (uvar)\n         c (uvar))\n    `(let ,v (join)\n       (let ,w (ccc (fn (,c)\n                      (dyn err [,c (cons ,v _)] ,expr)))\n         (if (caris ,w ,v id)\n             (let ,var (cdr ,w) ,fail)\n             (let ,var ,w ,ok))))))\n\n(mac onerr (e1 e2)\n  (let v (uvar)\n    `(eif ,v ,e2 ,e1 ,v)))\n\n(mac safe (expr)\n  `(onerr nil ,expr))\n\n(def literal (e)\n  (or (in e t nil o apply)\n      (in (type e) 'char 'stream)\n      (caris e 'lit)\n      (string e)))\n\n(def variable (e)\n  (if (atom e)\n      (no (literal e))\n      (id (car e) vmark)))\n\n(def isa (name)\n  [begins _ `(lit ,name) id])\n\n(def bel (e (o g globe))\n  (ev (list (list e nil))\n      nil\n      (list nil g)))\n\n(def mev (s r (p g))\n  (if (no s)\n      (if p\n          (sched p g)\n          (car r))\n      (sched (if (cdr (binding 'lock s))\n                 (cons (list s r) p)\n                 (snoc p (list s r)))\n             g)))\n\n(def sched (((s r) . p) g)\n  (ev s r (list p g)))\n\n(def ev (((e a) . s) r m)\n  (aif (literal e)            (mev s (cons e r) m)\n       (variable e)           (vref e a s r m)\n       (no (proper e))        (sigerr 'malformed s r m)\n       (get (car e) forms id) ((cdr it) (cdr e) a s r m)\n                              (evcall e a s r m)))\n\n(def vref (v a s r m)\n  (let g (cadr m)\n    (if (inwhere s)\n        (aif (or (lookup v a s g)\n                 (and (car (inwhere s))\n                      (let cell (cons v nil)\n                        (xdr g (cons cell (cdr g)))\n                        cell)))\n             (mev (cdr s) (cons (list it 'd) r) m)\n             (sigerr 'unbound s r m))\n        (aif (lookup v a s g)\n             (mev s (cons (cdr it) r) m)\n             (sigerr (list 'unboundb v) s r m)))))\n\n(set smark (join))\n\n(def inwhere (s)\n  (let e (car (car s))\n    (and (begins e (list smark 'loc))\n         (cddr e))))\n\n(def lookup (e a s g)\n  (or (binding e s)\n      (get e a id)\n      (get e g id)\n      (case e\n        scope (cons e a)\n        globe (cons e g))))\n\n(def binding (v s)\n  (get v\n       (map caddr (keep [begins _ (list smark 'bind) id]\n                        (map car s)))\n       id))\n\n(def sigerr (msg s r m)\n  (aif (binding 'err s)\n       (applyf (cdr it) (list msg) nil s r m)\n       (err 'no-err)))\n\n(mac fu args\n  `(list (list smark 'fut (fn ,@args)) nil))\n\n(def evmark (e a s r m)\n  (case (car e)\n    fut  ((cadr e) s r m)\n    bind (mev s r m)\n    loc  (sigerr 'unfindable s r m)\n    prot (mev (cons (list (cadr e) a)\n                    (fu (s r m) (mev s (cdr r) m))\n                    s)\n              r\n              m)\n         (sigerr 'unknown-mark s r m)))\n\n(set forms (list (cons smark evmark)))\n\n(mac form (name parms . body)\n  `(set forms (put ',name ,(formfn parms body) forms)))\n\n(def formfn (parms body)\n  (with (v  (uvar)\n         w  (uvar)\n         ps (parameters (car parms)))\n    `(fn ,v\n       (eif ,w (apply (fn ,(car parms) (list ,@ps))\n                      (car ,v))\n               (apply sigerr 'bad-form (cddr ,v))\n               (let ,ps ,w\n                 (let ,(cdr parms) (cdr ,v) ,@body))))))\n\n(def parameters (p)\n  (if (no p)           nil\n      (variable p)     (list p)\n      (atom p)         (err 'bad-parm)\n      (in (car p) t o) (parameters (cadr p))\n                       (append (parameters (car p))\n                               (parameters (cdr p)))))\n\n(form quote ((e) a s r m)\n  (mev s (cons e r) m))\n\n(form if (es a s r m)\n  (if (no es)\n      (mev s (cons nil r) m)\n      (mev (cons (list (car es) a)\n                 (if (cdr es)\n                     (cons (fu (s r m)\n                             (if2 (cdr es) a s r m))\n                           s)\n                     s))\n           r\n           m)))\n\n(def if2 (es a s r m)\n  (mev (cons (list (if (car r)\n                       (car es)\n                       (cons 'if (cdr es)))\n                   a)\n             s)\n       (cdr r)\n       m))\n\n(form where ((e (o new)) a s r m)\n  (mev (cons (list e a)\n             (list (list smark 'loc new) nil)\n             s)\n       r\n       m))\n\n(form dyn ((v e1 e2) a s r m)\n  (if (variable v)\n      (mev (cons (list e1 a)\n                 (fu (s r m) (dyn2 v e2 a s r m))\n                 s)\n           r\n           m)\n      (sigerr 'cannot-bind s r m)))\n\n(def dyn2 (v e2 a s r m)\n  (mev (cons (list e2 a)\n             (list (list smark 'bind (cons v (car r)))\n                   nil)\n             s)\n       (cdr r)\n       m))\n\n(form after ((e1 e2) a s r m)\n  (mev (cons (list e1 a)\n             (list (list smark 'prot e2) a)\n             s)\n       r\n       m))\n\n(form ccc ((f) a s r m)\n  (mev (cons (list (list f (list 'lit 'cont s r))\n                   a)\n             s)\n       r\n       m))\n\n(form thread ((e) a s r (p g))\n  (mev s\n       (cons nil r)\n       (list (cons (list (list (list e a))\n                         nil)\n                   p)\n             g)))\n\n(def evcall (e a s r m)\n  (mev (cons (list (car e) a)\n             (fu (s r m)\n               (evcall2 (cdr e) a s r m))\n             s)\n       r\n       m))\n\n(def evcall2 (es a s (op . r) m)\n  (if ((isa 'mac) op)\n      (applym op es a s r m)\n      (mev (append (map [list _ a] es)\n                   (cons (fu (s r m)\n                           (let (args r2) (snap es r)\n                             (applyf op (rev args) a s r2 m)))\n                         s))\n           r\n           m)))\n\n(def applym (mac args a s r m)\n  (applyf (caddr mac)\n          args\n          a\n          (cons (fu (s r m)\n                  (mev (cons (list (car r) a) s)\n                       (cdr r)\n                       m))\n                s)\n          r\n          m))\n\n(def applyf (f args a s r m)\n  (if (= f apply)    (applyf (car args) (reduce join (cdr args)) a s r m)\n      (caris f 'lit) (if (proper f)\n                         (applylit f args a s r m)\n                         (sigerr 'bad-lit s r m))\n                     (sigerr 'cannot-apply s r m)))\n\n(def applylit (f args a s r m)\n  (aif (and (inwhere s) (find [(car _) f] locfns))\n       ((cadr it) f args a s r m)\n       (let (tag . rest) (cdr f)\n         (case tag\n           prim (applyprim (car rest) args s r m)\n           clo  (let ((o env) (o parms) (o body) . extra) rest\n                  (if (and (okenv env) (okparms parms))\n                      (applyclo parms args env body s r m)\n                      (sigerr 'bad-clo s r m)))\n           mac  (applym f (map [list 'quote _] args) a s r m)\n           cont (let ((o s2) (o r2) . extra) rest\n                  (if (and (okstack s2) (proper r2))\n                      (applycont s2 r2 args s r m)\n                      (sigerr 'bad-cont s r m)))\n                (aif (get tag virfns)\n                     (let e ((cdr it) f (map [list 'quote _] args))\n                       (mev (cons (list e a) s) r m))\n                     (sigerr 'unapplyable s r m))))))\n\n(set virfns nil)\n\n(mac vir (tag . rest)\n  `(set virfns (put ',tag (fn ,@rest) virfns)))\n\n(set locfns nil)\n\n(mac loc (test . rest)\n  `(set locfns (cons (list ,test (fn ,@rest)) locfns)))\n\n(loc (is car) (f args a s r m)\n  (mev (cdr s) (cons (list (car args) 'a) r) m))\n\n(loc (is cdr) (f args a s r m)\n  (mev (cdr s) (cons (list (car args) 'd) r) m))\n\n(def okenv (a)\n  (and (proper a) (all pair a)))\n\n(def okstack (s)\n  (and (proper s)\n       (all [and (proper _) (cdr _) (okenv (cadr _))]\n            s)))\n\n(def okparms (p)\n  (if (no p)       t\n      (variable p) t\n      (atom p)     nil\n      (caris p t)  (oktoparm p)\n                   (and (if (caris (car p) o)\n                            (oktoparm (car p))\n                            (okparms (car p)))\n                        (okparms (cdr p)))))\n\n(def oktoparm ((tag (o var) (o e) . extra))\n  (and (okparms var) (or (= tag o) e) (no extra)))\n\n(set prims '((id join xar xdr wrb ops)\n             (car cdr type sym nom rdb cls stat sys)\n             (coin)))\n\n(def applyprim (f args s r m)\n  (aif (some [mem f _] prims)\n       (if (udrop (cdr it) args)\n           (sigerr 'overargs s r m)\n           (with (a (car args)\n                  b (cadr args))\n             (eif v (case f\n                      id   (id a b)\n                      join (join a b)\n                      car  (car a)\n                      cdr  (cdr a)\n                      type (type a)\n                      xar  (xar a b)\n                      xdr  (xdr a b)\n                      sym  (sym a)\n                      nom  (nom a)\n                      wrb  (wrb a b)\n                      rdb  (rdb a)\n                      ops  (ops a b)\n                      cls  (cls a)\n                      stat (stat a)\n                      coin (coin)\n                      sys  (sys a))\n                    (sigerr v s r m)\n                    (mev s (cons v r) m))))\n       (sigerr 'unknown-prim s r m)))\n\n(def applyclo (parms args env body s r m)\n  (mev (cons (fu (s r m)\n               (pass parms args env s r m))\n             (fu (s r m)\n               (mev (cons (list body (car r)) s)\n                    (cdr r)\n                    m))\n             s)\n       r\n       m))\n\n(def pass (pat arg env s r m)\n  (let ret [mev s (cons _ r) m]\n    (if (no pat)       (if arg\n                           (sigerr 'overargs s r m)\n                           (ret env))\n        (literal pat)  (sigerr 'literal-parm s r m)\n        (variable pat) (ret (cons (cons pat arg) env))\n        (caris pat t)  (typecheck (cdr pat) arg env s r m)\n        (caris pat o)  (pass (cadr pat) arg env s r m)\n                       (destructure pat arg env s r m))))\n\n(def typecheck ((var f) arg env s r m)\n  (mev (cons (list (list f (list 'quote arg)) env)\n             (fu (s r m)\n               (if (car r)\n                   (pass var arg env s (cdr r) m)\n                   (sigerr 'mistype s r m)))\n             s)\n       r\n       m))\n\n(def destructure ((p . ps) arg env s r m)\n  (if (no arg)   (if (caris p o)\n                     (mev (cons (list (caddr p) env)\n                                (fu (s r m)\n                                  (pass (cadr p) (car r) env s (cdr r) m))\n                                (fu (s r m)\n                                  (pass ps nil (car r) s (cdr r) m))\n                                s)\n                          r\n                          m)\n                     (sigerr 'underargs s r m))\n      (atom arg) (sigerr 'atom-arg s r m)\n                 (mev (cons (fu (s r m)\n                              (pass p (car arg) env s r m))\n                            (fu (s r m)\n                              (pass ps (cdr arg) (car r) s (cdr r) m))\n                            s)\n                      r\n                      m)))\n\n(def applycont (s2 r2 args s r m)\n  (if (or (no args) (cdr args))\n      (sigerr 'wrong-no-args s r m)\n      (mev (append (keep [and (protected _) (no (mem _ s2 id))]\n                         s)\n                   s2)\n           (cons (car args) r2)\n           m)))\n\n(def protected (x)\n  (some [begins (car x) (list smark _) id]\n        '(bind prot)))\n\n(def function (x)\n  (find [(isa _) x] '(prim clo)))\n\n(def con (x)\n  (fn args x))\n\n(def compose fs\n  (reduce (fn (f g)\n            (fn args (f (apply g args))))\n          (or fs (list idfn))))\n\n(def combine (op)\n  (fn fs\n    (reduce (fn (f g)\n              (fn args\n                (op (apply f args) (apply g args))))\n            (or fs (list (con (op)))))))\n\n(set cand (combine and)\n     cor  (combine or))\n\n(def foldl (f base . args)\n  (if (or (no args) (some no args))\n      base\n      (apply foldl f\n                   (apply f (snoc (map car args) base))\n                   (map cdr args))))\n\n(def foldr (f base . args)\n  (if (or (no args) (some no args))\n      base\n      (apply f (snoc (map car args)\n                     (apply foldr f base (map cdr args))))))\n\n(def of (f g)\n  (fn args (apply f (map g args))))\n\n(def upon args\n  [apply _ args])\n\n(def pairwise (f xs)\n  (or (no (cdr xs))\n      (and (f (car xs) (cadr xs))\n           (pairwise f (cdr xs)))))\n\n(def fuse (f . args)\n  (apply append (apply map f args)))\n\n(mac letu (v . body)\n  (if ((cor variable atom) v)\n      `(let ,v (uvar) ,@body)\n      `(with ,(fuse [list _ '(uvar)] v)\n         ,@body)))\n\n(mac pcase (expr . args)\n  (if (no (cdr args))\n      (car args)\n      (letu v\n        `(let ,v ,expr\n           (if (,(car args) ,v)\n               ,(cadr args)\n               (pcase ,v ,@(cddr args)))))))\n\n(def match (x pat)\n  (if (= pat t)                t\n      (function pat)           (pat x)\n      (or (atom x) (atom pat)) (= x pat)\n                               (and (match (car x) (car pat))\n                                    (match (cdr x) (cdr pat)))))\n\n(def split (f xs (o acc))\n  (if ((cor atom f:car) xs)\n      (list acc xs)\n      (split f (cdr xs) (snoc acc (car xs)))))\n\n(mac when (expr . body)\n  `(if ,expr (do ,@body)))\n\n(mac unless (expr . body)\n  `(when (no ,expr) ,@body))\n\n(set i0  nil\n     i1  '(t)\n     i2  '(t t)\n     i10 '(t t t t t t t t t t)\n     i16 '(t t t t t t t t t t t t t t t t))\n\n(set i< udrop)\n\n(def i+ args\n  (apply append args))\n\n(def i- (x y)\n  (if (no x) (list '- y)\n      (no y) (list '+ x)\n             (i- (cdr x) (cdr y))))\n\n(def i* args\n  (foldr (fn (x y) (fuse (con x) y))\n         i1\n         args))\n\n(def i/ (x y (o q))\n  (if (no x)   (list q nil)\n      (i< x y) (list q x)\n               (i/ (udrop y x) y (i+ q i1))))\n\n(def i^ (x y)\n  (foldr i* i1 (map (con x) y)))\n\n(def r+ ((xn xd) (yn yd))\n  (list (i+ (i* xn yd) (i* yn xd))\n        (i* xd yd)))\n\n(def r- ((xn xd) (yn yd))\n  (let (s n) (i- (i* xn yd) (i* yn xd))\n    (list s n (i* xd yd))))\n\n(def r* ((xn xd) (yn yd))\n  (list (i* xn yn) (i* xd yd)))\n\n(def r/ ((xn xd) (yn yd))\n  (list (i* xn yd) (i* xd yn)))\n\n(set srzero (list '+ i0 i1)\n     srone  (list '+ i1 i1))\n\n(def sr+ ((xs . xr) (ys . yr))\n  (if (= xs '-)\n      (if (= ys '-)\n          (cons '- (r+ xr yr))\n          (r- yr xr))\n      (if (= ys '-)\n          (r- xr yr)\n          (cons '+ (r+ xr yr)))))\n\n(def sr- (x y)\n  (sr+ x (srinv y)))\n\n(def srinv ((s n d))\n  (list (if (and (= s '+) (~= n i0)) '- '+)\n        n\n        d))\n\n(def sr* ((xs . xr) (ys . yr))\n  (cons (if (= xs '-)\n            (case ys - '+ '-)\n            ys)\n        (r* xr yr)))\n\n(def sr/ (x y)\n  (sr* x (srrecip y)))\n\n(def srrecip ((s (t n [~= _ i0]) d))\n  (list s d n))\n\n(def sr< ((xs xn xd) (ys yn yd))\n  (if (= xs '+)\n      (if (= ys '+)\n          (i< (i* xn yd) (i* yn xd))\n          nil)\n      (if (= ys '+)\n          (~= xn yn i0)\n          (i< (i* yn xd) (i* xn yd)))))\n\n(set srnum cadr\n     srden caddr)\n\n(def c+ ((xr xi) (yr yi))\n  (list (sr+ xr yr) (sr+ xi yi)))\n\n(def c* ((xr xi) (yr yi))\n  (list (sr- (sr* xr yr) (sr* xi yi))\n        (sr+ (sr* xi yr) (sr* xr yi))))\n\n(def litnum (r (o i srzero))\n  (list 'lit 'num r i))\n\n(def number (x)\n  (let r (fn (y)\n           (match y (list [in _ '+ '-] proper proper)))\n    (match x `(lit num ,r ,r))))\n\n(set numr car:cddr\n     numi cadr:cddr)\n\n(set rpart litnum:numr\n     ipart litnum:numi)\n\n(def real (x)\n  (and (number x) (= (numi x) srzero)))\n\n(def inv (x)\n  (litnum (srinv:numr x) (srinv:numi x)))\n\n(def abs (x)\n  (litnum (cons '+ (cdr (numr x)))))\n\n(def simplify ((s n d))\n  (if (= n i0) (list '+ n i1)\n      (= n d)  (list s i1 i1)\n               (let g (apply i* ((of common factor) n d))\n                 (list s (car:i/ n g) (car:i/ d g)))))\n\n(def factor (x (o d i2))\n  (if (i< x d)\n      nil\n      (let (q r) (i/ x d)\n        (if (= r i0)\n            (cons d (factor q d))\n            (factor x (i+ d i1))))))\n\n(def common (xs ys)\n  (if (in nil xs ys)\n      nil\n      (let (a b) (split (is (car xs)) ys)\n        (if b\n            (cons (car xs)\n                  (common (cdr xs) (append a (cdr b))))\n            (common (cdr xs) ys)))))\n\n(set buildnum (of litnum simplify))\n\n(def recip (x)\n  (with (r (numr x)\n         i (numi x))\n    (let d (sr+ (sr* r r) (sr* i i))\n      (buildnum (sr/ r d)\n                (sr/ (srinv i) d)))))\n\n(def + ns\n  (foldr (fn (x y)\n           (apply buildnum ((of c+ cddr) x y)))\n         0\n         ns))\n\n(def - ns\n  (if (no ns)       0\n      (no (cdr ns)) (inv (car ns))\n                    (+ (car ns) (inv (apply + (cdr ns))))))\n\n(def * ns\n  (foldr (fn (x y)\n           (apply buildnum ((of c* cddr) x y)))\n         1\n         ns))\n\n(def / ns\n  (if (no ns)\n      1\n      (* (car ns) (recip (apply * (cdr ns))))))\n\n(def inc (n) (+ n 1))\n\n(def dec (n) (- n 1))\n\n(def pos (x ys (o f =))\n  (if (no ys)        nil\n      (f (car ys) x) 1\n                     (aif (pos x (cdr ys) f) (+ it 1))))\n\n(def len (xs)\n  (if (no xs) 0 (inc:len:cdr xs)))\n\n(def charn (c)\n  (dec:pos c chars caris))\n\n(def < args\n  (pairwise bin< args))\n\n(def > args\n  (apply < (rev args)))\n\n(def list< (x y)\n  (if (no x) y\n      (no y) nil\n             (or (< (car x) (car y))\n                 (and (= (car x) (car y))\n                      (< (cdr x) (cdr y))))))\n\n(def bin< args\n  (aif (all no args)                    nil\n       (find [all (car _) args] comfns) (apply (cdr it) args)\n                                        (err 'incomparable)))\n\n(set comfns nil)\n\n(def com (f g)\n  (set comfns (put f g comfns)))\n\n(com real (of sr< numr))\n\n(com char (of < charn))\n\n(com string list<)\n\n(com symbol (of list< nom))\n\n(def int (n)\n  (and (real n) (= (srden:numr n) i1)))\n\n(def whole (n)\n  (and (int n) (~< n 0)))\n\n(def pint (n)\n  (and (int n) (> n 0)))\n\n(def yc (f)\n  ([_ _] [f (fn a (apply (_ _) a))]))\n\n(mac rfn (name . rest)\n  `(yc (fn (,name) (fn ,@rest))))\n\n(mac afn args\n  `(rfn self ,@args))\n\n(def wait (f)\n  ((afn (v) (if v v (self (f))))\n   (f)))\n\n(def runs (f xs (o fon (and xs (f (car xs)))))\n  (if (no xs)\n      nil\n      (let (as bs) (split (if fon ~f f) xs)\n        (cons as (runs f bs (no fon))))))\n\n(def whitec (c)\n  (in c \\sp \\lf \\tab \\cr))\n\n(def tokens (xs (o break whitec))\n  (let f (if (function break) break (is break))\n    (keep ~f:car (runs f xs))))\n\n(def dups (xs (o f =))\n  (if (no xs)                   nil\n      (mem (car xs) (cdr xs) f) (cons (car xs)\n                                      (dups (rem (car xs) (cdr xs) f) f))\n                                (dups (cdr xs) f)))\n\n(set simple (cor atom number))\n\n(mac do1 args\n  (letu v\n    `(let ,v ,(car args)\n       ,@(cdr args)\n       ,v)))\n\n(def gets (v kvs (o f =))\n  (find [f (cdr _) v] kvs))\n\n(def consif (x y)\n  (if x (cons x y) y))\n\n(mac check (x f (o alt))\n  (letu v\n    `(let ,v ,x\n       (if (,f ,v) ,v ,alt))))\n\n(mac withs (parms . body)\n  (if (no parms)\n      `(do ,@body)\n      `(let ,(car parms) ,(cadr parms)\n         (withs ,(cddr parms) ,@body))))\n\n(mac bind (var expr . body)\n  `(dyn ,var ,expr (do ,@body)))\n\n(mac atomic body\n  `(bind lock t ,@body))\n\n(def tail (f xs)\n  (if (no xs) nil\n      (f xs)  xs\n              (tail f (cdr xs))))\n\n(set dock rev:cdr:rev)\n\n(def lastcdr (xs)\n  (if (no (cdr xs))\n      xs\n      (lastcdr (cdr xs))))\n\n(set last car:lastcdr)\n\n(def newq ()\n  (list nil))\n\n(def enq (x q)\n  (atomic (xar q (snoc (car q) x)))\n  q)\n\n(def deq (q)\n  (atomic (do1 (car (car q))\n               (xar q (cdr (car q))))))\n\n(mac set args\n  (cons 'do\n        (map (fn ((p (o e t)))\n               (letu v\n                 `(atomic (let ,v ,e\n                            (let (cell loc) (where ,p t)\n                              ((case loc a xar d xdr) cell ,v))))))\n             (hug args))))\n\n(mac zap (op place . args)\n  (letu (vo vc vl va)\n    `(atomic (with (,vo       ,op\n                    (,vc ,vl) (where ,place)\n                    ,va       (list ,@args))\n               (case ,vl\n                 a (xar ,vc (apply ,vo (car ,vc) ,va))\n                 d (xdr ,vc (apply ,vo (cdr ,vc) ,va))\n                   (err 'bad-place))))))\n\n(mac ++ (place (o n 1))\n  `(zap + ,place ,n))\n\n(mac -- (place (o n 1))\n  `(zap - ,place ,n))\n\n(mac push (x place)\n  (letu v\n    `(let ,v ,x\n       (zap [cons ,v _] ,place))))\n\n(mac pull (x place . rest)\n  (letu v\n    `(let ,v ,x\n       (zap [rem ,v _ ,@rest] ,place))))\n\n(set cbuf '((nil)))\n\n(def open args\n  (let s (apply ops args)\n    (push (list s) cbuf)\n    s))\n\n(def close (s)\n  (pull s cbuf caris)\n  (cls s))\n\n(def peek ((o s ins))\n  (if ((cor no stream) s)\n      (let c (wait (fn ()\n                     (atomic (let p (get s cbuf)\n                               (or (cdr p)\n                                   (aif (bitc s) (xdr p it) nil))))))\n        (if (= c 'eof) nil c))\n      (car (car s))))\n\n(def rdc ((o s ins))\n  (if ((cor no stream) s)\n      (let c (wait (fn ()\n                     (atomic (let p (get s cbuf)\n                               (aif (cdr p)\n                                    (do (xdr p nil) it)\n                                    (bitc s))))))\n        (if (= c 'eof) nil c))\n      (deq s)))\n\n(set bbuf nil)\n\n(def bitc ((o s ins))\n  (let bits (get s bbuf)\n    (aif (gets (rev (cdr bits)) chars)\n         (do (pull s bbuf caris)\n             (car it))\n         (let b (rdb s)\n           (if (in b nil 'eof)\n               b\n               (do (if bits\n                       (push b (cdr bits))\n                       (push (list s b) bbuf))\n                   (bitc s)))))))\n\n(def digit (c (o base i10))\n  (mem c (udrop (udrop base i16) \"fedcba9876543210\")))\n\n(set breakc (cor no whitec (is \\;) [get _ syntax]))\n\n(def signc (c)\n  (in c \\+ \\-))\n\n(def intrac (c)\n  (in c \\. \\!))\n\n(set source (cor no stream (cand pair string:car)))\n\n(def read ((o s|source ins) (o (t base [<= 2 _ 16]) 10) (o eof))\n  (car (rdex s (srnum:numr base) eof)))\n\n(def saferead ((o s ins) (o alt) (o base 10))\n  (onerr alt (read s base alt)))\n\n(def rdex ((o s ins) (o base i10) (o eof) (o share))\n  (eatwhite s)\n  (let c (rdc s)\n    (aif (no c)         (list eof share)\n         (get c syntax) ((cdr it) s base share)\n                        (list (rdword s c base) share))))\n\n(def eatwhite (s)\n  (pcase (peek s)\n    whitec  (do (rdc s)\n                (eatwhite s))\n    (is \\;) (do (charstil s (is \\lf))\n                (eatwhite s))))\n\n(def charstil (s f)\n  (if ((cor no f) (peek s))\n      nil\n      (cons (rdc s) (charstil s f))))\n\n(set syntax nil)\n\n(mac syn (c . rest)\n  `(set syntax (put ,c (fn ,@rest) syntax)))\n\n(syn \\( (s base share)\n  (rdlist s \\) base share))\n\n(syn \\) args\n  (err 'unexpected-terminator))\n\n(syn \\[ (s base share)\n  (let (e newshare) (rdlist s \\] base share)\n    (list (list 'fn '(_) e) newshare)))\n\n(syn \\] args\n  (err 'unexpected-terminator))\n\n(def rdlist (s term base share (o acc))\n  (eatwhite s)\n  (pcase (peek s)\n    no        (err 'unterminated-list)\n    (is \\.)   (do (rdc s) (rddot s term base share acc))\n    (is term) (do (rdc s) (list acc share))\n              (let (e newshare) (rdex s base nil share)\n                (rdlist s term base newshare (snoc acc e)))))\n\n(def rddot (s term base share acc)\n  (pcase (peek s)\n    no     (err 'unterminated-list)\n    breakc (if (no acc)\n               (err 'missing-car)\n               (let (e newshare) (hard-rdex s base share 'missing-cdr)\n                 (if (car (rdlist s term base share))\n                     (err 'duplicate-cdr)\n                     (list (apply cons (snoc acc e))\n                           newshare))))\n           (rdlist s term base share (snoc acc (rdword s \\. base)))))\n\n(def hard-rdex (s base share msg)\n  (let eof (join)\n    (let v (rdex s base eof share)\n      (if (id (car v) eof) (err msg) v))))\n\n(set namecs '((bel . \\bel) (tab . \\tab) (lf . \\lf) (cr . \\cr) (sp . \\sp)))\n\n(syn \\\\ (s base share)\n  (list (pcase (peek s)\n          no     (err 'escape-without-char)\n          breakc (rdc s)\n                 (let cs (charstil s breakc)\n                   (if (cdr cs)\n                       (aif (get (sym cs) namecs)\n                            (cdr it)\n                            (err 'unknown-named-char))\n                       (car cs))))\n        share))\n\n(syn \\' (s base share)\n  (rdwrap s 'quote base share))\n\n(syn \\` (s base share)\n  (rdwrap s 'bquote base share))\n\n(syn \\, (s base share)\n  (case (peek s)\n    \\@ (do (rdc s)\n           (rdwrap s 'comma-at base share))\n       (rdwrap s 'comma base share)))\n\n(def rdwrap (s token base share)\n  (let (e newshare) (hard-rdex s base share 'missing-expression)\n    (list (list token e) newshare)))\n\n(syn \\\" (s base share)\n  (list (rddelim s \\\") share))\n\n(syn \\¦ (s base share)\n  (list (sym (rddelim s \\¦)) share))\n\n(def rddelim (s d (o esc))\n  (let c (rdc s)\n    (if (no c)   (err 'missing-delimiter)\n        esc      (cons c (rddelim s d))\n        (= c \\\\) (rddelim s d t)\n        (= c d)  nil\n                 (cons c (rddelim s d)))))\n\n(syn \\# (s base share)\n  (let name (charstil s ~digit)\n    (if (= (peek s) \\=)\n        (do (rdc s)\n            (rdtarget s base name (join) share))\n        (aif (get name share)\n             (list (cdr it) share)\n             (err 'unknown-label)))))\n\n(def rdtarget (s base name cell oldshare)\n  (withs (share        (cons (cons name cell) oldshare)\n          (e newshare) (hard-rdex s base share 'missing-target))\n    (if (simple e)\n        (err 'bad-target)\n        (do (xar cell (car e))\n            (xdr cell (cdr e))\n            (list cell newshare)))))\n\n(def rdword (s c base)\n  (parseword (cons c (charstil s breakc)) base))\n\n(def parseword (cs base)\n  (or (parsenum cs base)\n      (if (= cs \".\")       (err 'unexpected-dot)\n          (mem \\| cs)      (parset cs base)\n          (some intrac cs) (parseslist (runs intrac cs) base)\n                           (parsecom cs base))))\n\n(def parsenum (cs base)\n  (if (validi cs base)\n      (buildnum srzero (parsei cs base))\n      (let sign (check (car cs) signc)\n        (let (ds es) (split signc (if sign (cdr cs) cs))\n          (and (validr ds base)\n               (or (no es) (validi es base))\n               (buildnum (parsesr (consif sign ds) base)\n                         (if (no es) srzero (parsei es base))))))))\n\n(def validi (cs base)\n  (and (signc (car cs))\n       (= (last cs) \\i)\n       (let digs (cdr (dock cs))\n         (or (no digs) (validr digs base)))))\n\n(def validr (cs base)\n  (or (validd cs base)\n      (let (n d) (split (is \\/) cs)\n        (and (validd n base)\n             (validd (cdr d) base)))))\n\n(def validd (cs base)\n  (and (all (cor [digit _ base] (is \\.)) cs)\n       (some [digit _ base] cs)\n       (~cdr (keep (is \\.) cs))))\n\n(def parsei (cs base)\n  (if (cddr cs)\n      (parsesr (dock cs) base)\n      (if (caris cs \\+)\n          srone\n          (srinv srone))))\n\n(def parsesr (cs base)\n  (withs (sign  (if (signc (car cs)) (sym (list (car cs))))\n          (n d) (split (is \\/) (if sign (cdr cs) cs)))\n    (simplify (cons (or sign '+)\n                    (r/ (parsed n base)\n                        (if d\n                            (let rd (parsed (cdr d) base)\n                              (if (caris rd i0)\n                                  (err 'zero-denominator)\n                                  rd))\n                            (list i1 i1)))))))\n\n(def parsed (cs base)\n  (let (i f) (split (is \\.) cs)\n    (if (cdr f)\n        (list (parseint (rev (append i (cdr f))) base)\n              (i^ base\n                  (apply i+ (map (con i1) (cdr f)))))\n        (list (parseint (rev i) base) i1))))\n\n(def parseint (ds base)\n  (if ds\n      (i+ (charint (car ds))\n          (i* base (parseint (cdr ds) base)))\n      i0))\n\n(def charint (c)\n  (map (con t) (mem c \"fedcba987654321\")))\n\n(def parset (cs base)\n  (if (cdr (keep (is \\|) cs))\n      (err 'multiple-bars)\n      (let vt (tokens cs \\|)\n        (if (= (len vt) 2)\n            (cons t (map [parseword _ base] vt))\n            (err 'bad-tspec)))))\n\n(def parseslist (rs base)\n  (if (intrac (car (last rs)))\n      (err 'final-intrasymbol)\n      (map (fn ((cs ds))\n             (if (cdr cs)      (err 'double-intrasymbol)\n                 (caris cs \\!) (list 'quote (parsecom ds base))\n                               (parsecom ds base)))\n           (hug (if (intrac (car (car rs)))\n                    (cons \".\" \"upon\" rs)\n                    (cons \".\" rs))))))\n\n(def parsecom (cs base)\n  (if (mem \\: cs)\n      (cons 'compose (map [parseno _ base] (tokens cs \\:)))\n      (parseno cs base)))\n\n(def parseno (cs base)\n  (if (caris cs \\~)\n      (if (cdr cs)\n          (list 'compose 'no (parseno (cdr cs) base))\n          'no)\n      (or (parsenum cs base) (sym cs))))\n\n(mac bquote (e)\n  (let (sub change) (bqex e nil)\n    (if change sub (list 'quote e))))\n\n(def bqex (e n)\n  (if (no e)   (list nil nil)\n      (atom e) (list (list 'quote e) nil)\n               (case (car e)\n                 bquote   (bqthru e (list n) 'bquote)\n                 comma    (if (no n)\n                              (list (cadr e) t)\n                              (bqthru e (car n) 'comma))\n                 comma-at (if (no n)\n                              (list (list 'splice (cadr e)) t)\n                              (bqthru e (car n) 'comma-at))\n                          (bqexpair e n))))\n\n(def bqthru (e n op)\n  (let (sub change) (bqex (cadr e) n)\n    (if change\n        (list (if (caris sub 'splice)\n                  `(cons ',op ,(cadr sub))\n                  `(list ',op ,sub))\n              t)\n        (list (list 'quote e) nil))))\n\n(def bqexpair (e n)\n  (with ((a achange) (bqex (car e) n)\n         (d dchange) (bqex (cdr e) n))\n    (if (or achange dchange)\n        (list (if (caris d 'splice)\n                  (if (caris a 'splice)\n                      `(apply append (spa ,(cadr a)) (spd ,(cadr d)))\n                      `(apply cons ,a (spd ,(cadr d))))\n                  (caris a 'splice)\n                  `(append (spa ,(cadr a)) ,d)\n                  `(cons ,a ,d))\n              t)\n        (list (list 'quote e) nil))))\n\n(def spa (x)\n  (if (and x (atom x))\n      (err 'splice-atom)\n      x))\n\n(def spd (x)\n  (pcase x\n    no   (err 'splice-empty-cdr)\n    atom (err 'splice-atom)\n    cdr  (err 'splice-multiple-cdrs)\n         x))\n\n(mac comma args\n  '(err 'comma-outside-backquote))\n\n(mac comma-at args\n  '(err 'comma-at-outside-backquote))\n\n(mac splice args\n  '(err 'comma-at-outside-list))\n\n(def print (x (o s outs) (o names (namedups x)) (o hist))\n  (aif (simple x)        (do (prsimple x s) hist)\n       (ustring x names) (prstring x s names hist)\n       (get x names id)  (do (prc \\# s)\n                             (print (cdr it) s)\n                             (if (mem x hist id)\n                                 hist\n                                 (do (prc \\= s)\n                                     (if (ustring (cdr x) names)\n                                         (prstring x s names (cons x hist))\n                                         (prpair x s names (cons x hist))))))\n                         (prpair x s names hist)))\n\n(def namedups (x (o n 0))\n  (map [cons _ (++ n)] (dups (cells x) id)))\n\n(def cells (x (o seen))\n  (if (simple x)      seen\n      (mem x seen id) (snoc seen x)\n                      (cells (cdr x)\n                             (cells (car x) (snoc seen x)))))\n\n(def prc (c (o s outs))\n  (if (atom s)\n      (aif (get c chars)\n           (map [wrb _ s] (cdr it))\n           (err 'unknown char))\n      (enq c s))\n  c)\n\n(def ustring (x names)\n  (and x (string x) (~tail [get _ names id] x)))\n\n(def prstring (x s names hist)\n  (prc \\\" s)\n  (presc x \\\" s)\n  (prc \\\" s)\n  hist)\n\n(def presc (cs esc s)\n  (map (fn (c)\n         (if (in c esc \\\\) (prc \\\\ s))\n         (prc c s))\n       cs))\n\n(def prsimple (x s)\n  (pcase x\n    symbol (prsymbol x s)\n    char   (do (prc \\\\ s) (prc x s))\n    stream (map [prc _ s] \"<stream>\")\n    number (prnum (numr x) (numi x) s)\n           (err 'cannot-print)))\n\n(def prsymbol (x s)\n  (let cs (nom x)\n    (let odd (~= (saferead (list cs)) x)\n      (if odd (prc \\¦ s))\n      (presc cs \\¦ s)\n      (if odd (prc \\¦ s)))))\n\n(def prnum (r i s)\n  (unless (and (= r srzero) (~= i srzero))\n    (if (caris r '-) (prc \\- s))\n    (map [prc _ s] (rrep (cdr r))))\n  (unless (= i srzero)\n    (print (car i) s)\n    (unless (apply = (cdr i))\n      (map [prc _ s] (rrep (cdr i))))\n    (prc \\i s)))\n\n(def rrep ((n d) (o base i10))\n  (append (irep n base)\n          (if (= d i1) nil (cons \\/ (irep d base)))))\n\n(def irep (x base)\n  (if (i< x base)\n      (list (intchar x))\n      (let (q r) (i/ x base)\n        (snoc (irep q base) (intchar r)))))\n\n(def intchar (x)\n  (car (udrop x \"0123456789abcdef\")))\n\n(def prpair (x s names hist)\n  (prc \\( s)\n  (do1 (prelts x s names hist)\n       (prc \\) s)))\n\n(def prelts ((x . rest) s names hist)\n  (let newhist (print x s names hist)\n    (if (or (and rest (simple rest))\n            (ustring rest names)\n            (get rest names id))\n        (do (map [prc _ s] \" . \")\n            (print rest s names newhist))\n        (if rest\n            (do (prc \\sp s)\n                (prelts rest s names newhist))\n            newhist))))\n\n(def prn args\n  (map [do (print _) (prc \\sp)] args)\n  (prc \\lf)\n  (last args))\n\n(def pr args\n  (map prnice args))\n\n(def prnice (x (o s outs))\n  (pcase x\n    char   (prc x s)\n    string (map [prc _ s] x)\n           (print x s nil))\n  x)\n\n(def drop (n|whole xs)\n  (if (= n 0)\n      xs\n      (drop (- n 1) (cdr xs))))\n\n(def nth (n|pint xs|pair)\n  (if (= n 1)\n      (car xs)\n      (nth (- n 1) (cdr xs))))\n\n(vir num (f args)\n  `(nth ,f ,@args))\n\n(def nchar (n)\n  (car ((+ n 1) chars)))\n\n(def first (n|whole xs)\n  (if (or (= n 0) (no xs))\n      nil\n      (cons (car xs)\n            (first (- n 1) (cdr xs)))))\n\n(mac catch body\n  (letu v\n    `(ccc (fn (,v) (bind throw ,v ,@body)))))\n\n(def cut (xs (o start 1) (o end (len xs)))\n  (first (- (+ end 1 (if (< end 0) (len xs) 0))\n            start)\n         (drop (- start 1) xs)))\n\n(mac whenlet (var expr . body)\n  `(iflet ,var ,expr (do ,@body)))\n\n(mac awhen args\n  `(whenlet it ,@args))\n\n(mac each (var expr . body)\n  `(map (fn (,var) ,@body) ,expr))\n\n(def flip (f)\n  (fn args (apply f (rev args))))\n\n(def part (f . args)\n  (fn rest\n    (apply f (append args rest))))\n\n(def trap (f . args)\n  (flip (apply part (flip f) (rev args))))\n\n(def only (f)\n  (fn args\n    (if (car args) (apply f args))))\n\n(def >= args\n  (pairwise ~bin< args))\n\n(def <= args\n  (apply >= (rev args)))\n\n(def floor (x|real)\n  (let (s n d) (numr x)\n    (let (f m) (i/ n d)\n      (litnum (list s\n                    (i+ f (if (or (= s '+) (= m i0))\n                              i0\n                              i1))\n                    i1)))))\n\n(set ceil -:floor:-)\n\n(def mod (x y)\n  (* (- (/ x y) (floor (/ x y)))\n     y))\n\n(mac whilet (var expr . body)\n  (letu (vf vp)\n    `((rfn ,vf (,vp)\n        (whenlet ,var ,vp ,@body (,vf ,expr)))\n      ,expr)))\n\n(mac loop (var init update test . body)\n  (letu v\n    `((rfn ,v (,var)\n        (when ,test ,@body (,v ,update)))\n      ,init)))\n\n(mac while (expr . body)\n  (letu v\n    `(loop ,v ,expr ,expr ,v ,@body)))\n\n(mac til (var expr test . body)\n  `(loop ,var ,expr ,expr (no ,test)\n     ,@body))\n\n(mac for (var init max . body)\n  (letu (vi vm)\n    `(with (,vi ,init\n            ,vm ,max)\n       (loop ,var ,vi (+ ,var 1) (<= ,var ,vm)\n         ,@body))))\n\n(mac repeat (n . body)\n  `(for ,(uvar) 1 ,n ,@body))\n\n(mac poll (expr f)\n  (letu (vr ve vf)\n    `((rfn ,vr (,ve ,vf)\n        (if (,vf ,ve) ,ve (,vr ,expr ,vf)))\n      ,expr\n      ,f)))\n\n(mac accum (var . body)\n  (letu v\n    `(withs (,v   nil\n             ,var [push _ ,v])\n       ,@body\n       (rev ,v))))\n\n(mac nof (n expr)\n  (letu v\n    `(accum ,v (repeat ,n (,v ,expr)))))\n\n(mac drain (expr (o f 'no))\n  (letu v\n    `(accum ,v\n       (poll ,expr (cor ,f (compose no ,v))))))\n\n(def ^w (x y|whole)\n  (apply * (nof y x)))\n\n(def clog2 (n)\n  (if (<= n 2) 1 (inc:clog2 (/ n 2))))\n\n(def randlen (n)\n  (read (list (nof n (if (coin) \\0 \\1)))\n        2))\n\n(def rand (n|pint)\n  (poll (randlen (clog2 n)) [< _ n]))\n\n(mac wipe args\n  `(set ,@(fuse [list _ nil] args)))\n\n(mac pop (place)\n  `(let (cell loc) (where ,place)\n     (let xs ((case loc a car d cdr) cell)\n       ((case loc a xar d xdr) cell (cdr xs))\n       (car xs))))\n\n(mac clean (f place)\n  (letu v\n    `(let ,v (compose no ,f)\n       (zap [keep ,v _] ,place))))\n\n(mac swap places\n  (let vs (map [nof 3 (uvar)] places)\n    `(atomic (withs ,(fuse (fn (place (cell loc val))\n                             (list (list cell loc)\n                                   `(where ,place)\n                                   val\n                                   `((case ,loc a car d cdr) ,cell)))\n                           places\n                           vs)\n               ,@(map (fn ((cellx locx valx) (celly locy valy))\n                        `((case ,locx a xar d xdr) ,cellx ,valy))\n                      vs\n                      (snoc (cdr vs) (car vs)))))))\n\n(def adjoin (x ys (o f =))\n  (if (mem x ys f) ys (cons x ys)))\n\n(mac pushnew (x place (o f '=))\n  (letu v\n    `(let ,v ,x\n       (zap [adjoin ,v _ ,f] ,place))))\n\n(def dedup (xs (o f =))\n  (rev (foldl (trap adjoin f) nil xs)))\n\n(def insert (f x ys)\n  (if (no ys)        (list x)\n      (f x (car ys)) (cons x ys)\n                     (cons (car ys) (insert f x (cdr ys)))))\n\n(def sort (f xs)\n  (foldr (part insert f) nil (rev xs)))\n\n(set best car:sort)\n\n(def max args\n  (best > args))\n\n(def min args\n  (best < args))\n\n(def even (n)\n  (int (/ n 2)))\n\n(set odd (cand int ~even))\n\n(def round (n)\n  (let r (fn (n)\n           (withs (f (floor n)\n                   d (- n f))\n             (if (or (> d 1/2) (and (= d 1/2) (odd f)))\n                 (ceil n)\n                 f)))\n    (if (< n 0) (-:r:- n) (r n))))\n\n(mac withfile (var name dir . body)\n  `(let ,var (open ,name ,dir)\n     (after (do ,@body) (close ,var))))\n\n(mac from (name . body)\n  (letu v\n    `(withfile ,v ,name 'in\n       (bind ins ,v ,@body))))\n\n(mac to (name . body)\n  (letu v\n    `(withfile ,v ,name 'out\n       (bind outs ,v ,@body))))\n\n(def readall ((o s ins) (o base 10))\n  (let eof (join)\n    (drain (read s base eof) [id _ eof])))\n\n(def load (name)\n  (let eof (join)\n    (withfile s name 'in\n      (til e (read s 10 eof) (id e eof)\n        (bel e)))))\n\n(mac record body\n  (letu v\n    `(let ,v (newq)\n       (bind outs ,v ,@body)\n       (car ,v))))\n\n(def prs args\n  (record (apply pr args)))\n\n(def array (dims (o default))\n  (if (no dims)\n      default\n      `(lit arr ,@(nof (car dims)\n                       (array (cdr dims) default)))))\n\n(vir arr (f args)\n  `(aref ,f ,@args))\n\n(def aref (a|isa!arr n . ns)\n  (if (no ns)\n      (n (cddr a))\n      (apply aref (n (cddr a)) ns)))\n\n(def table ((o kvs))\n  `(lit tab ,@kvs))\n\n(vir tab (f args)\n  `(tabref ,f ,@args))\n\n(def tabref (tab key (o default))\n  (aif (get key (cddr tab))\n       (cdr it)\n       default))\n\n(loc isa!tab (f args a s r m)\n  (let e `(list (tabloc ,f ,@(map [list 'quote _] args)) 'd)\n    (mev (cons (list e a) (cdr s)) r m)))\n\n(def tabloc (tab key)\n  (or (get key (cddr tab))\n      (let kv (cons key nil)\n        (push kv (cddr tab))\n        kv)))\n\n(def tabrem (tab key (o f =))\n  (clean [caris _ key f] (cddr tab)))\n\n(set templates (table))\n\n(mac tem (name . fields)\n  `(set (templates ',name)\n        (list ,@(map (fn ((k v)) `(cons ',k (fn () ,v)))\n                     (hug fields)))))\n\n(mac make (name . args)\n  `(inst ',name\n         (list ,@(map (fn ((k v)) `(cons ',k ,v))\n                      (hug args)))))\n\n(def inst (name kvs)\n  (aif templates.name\n       (table (map (fn ((k . f))\n                     (cons k\n                           (aif (get k kvs) (cdr it) (f))))\n                   it))\n       (err 'no-template)))\n\n(def readas (name (o s ins))\n  (withs (eof (join)\n          v   (read s 10 eof))\n    (if (id v eof)  nil\n        (isa!tab v) (inst name (cddr v))\n                    (err 'inst-nontable))))\n" 536870913] [67 :nodes/id "53e3138a-6619-4fd5-82ee-1c6c95aaf864" 536870913] [67 :nodes/properties {"CATEGORY" "20220324215908-bel_lang_source", "ID" "53e3138a-6619-4fd5-82ee-1c6c95aaf864", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220324215908-bel_lang_source.org", "PRIORITY" "B"} 536870913] [67 :nodes/title "bel lang source" 536870913] [67 :nodes/value 2.8333333134651184 536870913] [68 :nodes/content ":PROPERTIES:\n:ID:       fead6bfc-126d-47d7-9f4a-1bdcd7b41da8\n:END:\n#+title: coptis chinensis\n\nchinese medicine substance containing [[id:a49bfbb3-9c08-42cf-909d-4a9f789aeb61][berberine]]\n\n** Preventive effect of Coptis chinensis and berberine on intestinal injury in rats challenged with lipopolysaccharides\nhttps://doi.org/10.1016/j.fct.2010.09.032\n[[id:3f2f352f-af50-4b01-ae2c-791bbb145ee1][lps]]\n\nused 300 mg/kg coptis ((75 / 7.4) * 300 = 3040 for Kevin equivalent dose), and 30mg/kg berberine\n(bc their coptis is 9.9% berberine).\n- NEVERMIND! this is RATS, not mice so my dose would be higher. like 2x as much\n\n- also tried 120 mg/kg pure berberine and this did worse on all fronts. Almost as bad as untreated LPS control\n\ncoptis chinensis did significantly better than pure berberine at preventing villi atrophy!\n\ncoptis chinensis was on par (maybe a tinge better) with berberine alone at inflammatory marker reduction\n\n\nthey think its bc berberine/chinensis increased superoxide dismutase (SOD) &\nglutathione peroxidase (GSH-Px). i.e. prevented reductive stress according to [[id:31fde7cb-45ac-4656-8eb5-67b0406794e0][fire in a bottle]]\n\n** Coptisine from Coptis chinensis exerts diverse beneficial properties: A concise review\nhttps://doi.org/10.1111/jcmm.14725\n\nisoquinoline alkaloids in CC, namely berberine, coptisine, palmatine,\nepiber‐berine  and  jatrorrhizine,  are  the  main  constituents  responsible\nfor  its  bioactive  properties.\n\n- anti H. pylori effect by inhibiting urease\n" 536870913] [68 :nodes/id "fead6bfc-126d-47d7-9f4a-1bdcd7b41da8" 536870913] [68 :nodes/properties {"CATEGORY" "20221003143152-coptis_chinensis", "ID" "fead6bfc-126d-47d7-9f4a-1bdcd7b41da8", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221003143152-coptis_chinensis.org", "PRIORITY" "B"} 536870913] [68 :nodes/title "coptis chinensis" 536870913] [68 :nodes/value 2.6666666865348816 536870913] [69 :nodes/content ":PROPERTIES:\n:ID:       2428de28-f973-4e35-a8ff-d361dbd7c501\n:END:\n#+title: butyrate\n" 536870913] [69 :nodes/id "2428de28-f973-4e35-a8ff-d361dbd7c501" 536870913] [69 :nodes/properties {"CATEGORY" "20220328222549-butyrate", "ID" "2428de28-f973-4e35-a8ff-d361dbd7c501", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220328222549-butyrate.org", "PRIORITY" "B"} 536870913] [69 :nodes/title "butyrate" 536870913] [69 :nodes/value 2.866071403026581 536870913] [70 :nodes/content ":PROPERTIES:\n:ID:       b08fc803-1a29-4374-82a9-151e8694d899\n:END:\n#+title: zoltan 1v1\n\n** 2022-02-01\n- I love the team\n- been a year now holy shite\n- I'd like seniors to have more time to work on codebase\n  - in our \"health check\" today, we were all \"meh\" on\n    code quality.\n\n- we are probably going from covid view.\n  - hungarians have sino-pharm vax\n  - sputnik..\n\n- asking everyone\n  - q4\n\n- where did we deliver\n- can I grow\n- personal\n  - think about it more\n  - where I feel like I need to grow\n  - where shoudl I get better?\n    - be more deliberate\n  - suggestion:\n    - if I have understanding issues\n    - feel free to talk to jason\n    - reach out to the team more about this\n      - bc maybe it's just me!\n        and imre can help elevate stuff\n\n- feel free to ping about anything\n" 536870913] [70 :nodes/id "b08fc803-1a29-4374-82a9-151e8694d899" 536870913] [70 :nodes/properties {"CATEGORY" "20220201121506-zoltan_1v1", "ID" "b08fc803-1a29-4374-82a9-151e8694d899", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220201121506-zoltan_1v1.org", "PRIORITY" "B"} 536870913] [70 :nodes/title "zoltan 1v1" 536870913] [70 :nodes/value 2.0 536870913] [71 :nodes/content ":PROPERTIES:\n:ID:       bb4a963e-92ac-43c2-b868-26899b9500a4\n:END:\n#+title: san juan\n\n[[id:c8c4efcf-4345-493d-937e-b4ec46cd277f][trips]]\n\n* checklist\n- [ ] PR hotel\n- [ ] PR ferry\n- [ ] PR golf cart\n* resources\n** reddit\nhttps://www.reddit.com/r/PuertoRicoTravel/comments/o0kyh8/how_has_the_ferry_to_vieques_been_lately/\n* things\n** condado\n*** food\n- kbbq https://ujeongkbbqpr.com/eat\n*** surf school\nhttp://spectrumsurfschool.com/\n*** rainforest day trip (tripadvisor)\n*** one of the [[https://www.tripadvisor.com/Attraction_Products-g147320-t11963-zfg11865-San_Juan_Puerto_Rico.html][sunset cruises]]\nhttps://www.tripadvisor.com/Attraction_Review-g147320-d5989826-Reviews-Sail_San_Juan_Bay-San_Juan_Puerto_Rico.html\n** vieques\nneed snorkle gear when we come\n*** scooter/cart rental\nhttp://scootersvieques.com/reservation.html\n" 536870913] [71 :nodes/id "bb4a963e-92ac-43c2-b868-26899b9500a4" 536870913] [71 :nodes/properties {"CATEGORY" "20210710184340-san_juan", "ID" "bb4a963e-92ac-43c2-b868-26899b9500a4", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210710184340-san_juan.org", "PRIORITY" "B"} 536870913] [71 :nodes/title "san juan" 536870913] [71 :nodes/value 2.0 536870913] [72 :nodes/content ":PROPERTIES:\n:ID:       bdd841b3-53b0-4b0c-a81a-4b247435b4be\n:END:\n#+title: how-to-take-smart-notes\n\nHow to Take Smart Notes: One Simple Technique to Boost Writing, Learning and Thinking - for Students, Academics and Nonfiction Book Writers\n\nauthor: Ahrens, Sönke\nyear: 2017\nread: March 2021\n\n[[https://www.amazon.com/How-Take-Smart-Notes-Nonfiction-ebook/dp/B06WVYW33Y][how to take smart notes]]\n\n- writing doesn't start at the blank page. It takes place months or years before the essay.\n- creating a structure to work in that empowers creativity and new ideas can\n  make notetaking not require effort\n- poor students don't have problems of trying hard to organize thoughts an\n  reading and rereading sources. ([[https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect#Further_reading][dunning-kruger effect]])\n- he references [[id:ee83656e-7b72-4a3f-8759-629630d8437d][getting-things-done-allen]] oddly enough since I got that before this.\n  (was introduced by [[https://www.youtube.com/watch?v=SzA2YODtgK4&t=2226s&ab_channel=thoughtbot][this video]] which is the vid that got me into org-mode)\n- work becomes effortless when done in the right framework\n- notes are meant to make up for shortcomings of the human brain\n- Luhmann, who created this whole thing and was a big sociology researcher\n  - he had a bibliography box where we would just take a few small notes after\n    reading something. Then he would reference that in his main box\n  - he'd keep his notes very small (what I'm doing now is probably way too big)\n  - apparently references /arent/ exactly like hyperlinks, though similar, but the\n    difference is important\n" 536870913] [72 :nodes/id "bdd841b3-53b0-4b0c-a81a-4b247435b4be" 536870913] [72 :nodes/properties {"CATEGORY" "20210323192043-how_to_take_smart_notes", "ID" "bdd841b3-53b0-4b0c-a81a-4b247435b4be", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210323192043-how_to_take_smart_notes.org", "PRIORITY" "B"} 536870913] [72 :nodes/title "how-to-take-smart-notes" 536870913] [72 :nodes/value 2.873333364725113 536870913] [73 :nodes/content ":PROPERTIES:\n:ID:       f4b7f22c-ab54-4398-8618-2c5a8894a30b\n:END:\n#+title: clojureD conf 2021\n\n** girl about stuff\n- about clojurescript: don't pass functions into components\n- she works for onmyway (or something) and read susmans book on good\n  programming that came out recently\n- book is Software design for flexibility\n- \"generic procedures\" with multimethods. Can define a method and just\n  use other\n\n** cider guy talk\n- out of the tar pit -- paper, seminal in comparison to simple made easy\n" 536870913] [73 :nodes/id "f4b7f22c-ab54-4398-8618-2c5a8894a30b" 536870913] [73 :nodes/properties {"CATEGORY" "20210605080845-clojured_conf_2021", "ID" "f4b7f22c-ab54-4398-8618-2c5a8894a30b", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210605080845-clojured_conf_2021.org", "PRIORITY" "B"} 536870913] [73 :nodes/title "clojureD conf 2021" 536870913] [73 :nodes/value 2.0 536870913] [74 :nodes/content ":PROPERTIES:\n:ID:       5651b4fb-d108-4406-80e1-eaba03f72bcb\n:END:\n#+title: evil mode\n" 536870913] [74 :nodes/id "5651b4fb-d108-4406-80e1-eaba03f72bcb" 536870913] [74 :nodes/properties {"CATEGORY" "20210327090316-evil_mode", "ID" "5651b4fb-d108-4406-80e1-eaba03f72bcb", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210327090316-evil_mode.org", "PRIORITY" "B"} 536870913] [74 :nodes/title "evil mode" 536870913] [74 :nodes/value 2.0 536870913] [75 :nodes/content ":PROPERTIES:\n:ID:       e42315f6-b35e-428a-86ad-d71970ed1825\n:END:\n#+title: fenugreek\n\n[[id:f08e30aa-e83b-451f-88b7-fe954bab2f6e][supplements]]\n\n\nidea from https://twitter.com/Chloe_mrng/status/1579916857930559489?s=20&t=ZOVwoM5oelVZ3oW5FhjK0Q\n\n** The effects of a commercially available botanical supplement on strength, body composition, power output, and hormonal profiles in resistance-trained males\n  https://jissn.biomedcentral.com/articles/10.1186/1550-2783-7-34\n\n- 8 weeks of supervised 4 day/week workouts, p=0.001 for body fat lowering, and\n  increased leg press! Bench press was 0.01\n\n** Effect of fenugreek extract supplement on testosterone levels in male: A meta-analysis of clinical trials\nhttps://pubmed.ncbi.nlm.nih.gov/32048383/\n" 536870913] [75 :nodes/id "e42315f6-b35e-428a-86ad-d71970ed1825" 536870913] [75 :nodes/properties {"CATEGORY" "20221017163253-fenugreek", "ID" "e42315f6-b35e-428a-86ad-d71970ed1825", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221017163253-fenugreek.org", "PRIORITY" "B"} 536870913] [75 :nodes/title "fenugreek" 536870913] [75 :nodes/value 2.095238097012043 536870913] [76 :nodes/content ":PROPERTIES:\n:ID:       3987f278-e0de-4c04-a710-76e1688bb910\n:END:\n#+title: advanced glycation end products (AGEs)\n\n[[id:b77d4578-bc50-42a8-94c4-b11d27f78837][food]]\n\n** Advanced Glycation End Products in Foods and a Practical Guide to Their Reduction in the Diet\nhttps://www.ncbi.nlm.nih.gov/pmc/articles/PMC3704564/\n\n- claims that /dietary/ AGEs cause issues, not just the ones in your blood stream.\n\n#+begin_quote\nBecause it had previously been assumed that dietary AGEs (dAGEs) are poorly absorbed, their potential role in human health and disease was largely ignored. However, recent studies with the oral administration of a single AGE-rich meal to human beings as well as labeled single protein-AGEs or diets enriched with specific AGEs such as MG to mice clearly show that dAGEs are absorbed and contribute significantly to the body’s AGE pool (14–16).\n#+end_quote\n\nIf you look at 14-16,\n- 14, https://www.ncbi.nlm.nih.gov/pmc/articles/PMC21074/, they feed humans eggs\n  cooked with or without fructose and observe various things. It's likely\n  irrelevant since I don't cook my steak in fructose. So there's probably a\n  difference in the specific types of AGEs present.\n- 15 and 16 add specific AGEs, which are probably not the same specific AGEs\n  in the same quantities that are in my sugar-free steak.\n\nThe implicit claim is that these AGEs are the same AGEs in a sugar-free steak.\nThe different AGEs are likely broken down differently and have different\nclearance rates and potential for harm.\n" 536870913] [76 :nodes/id "3987f278-e0de-4c04-a710-76e1688bb910" 536870913] [76 :nodes/properties {"CATEGORY" "20221117095851-advanced_glycation_end_products_ages", "ID" "3987f278-e0de-4c04-a710-76e1688bb910", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221117095851-advanced_glycation_end_products_ages.org", "PRIORITY" "B"} 536870913] [76 :nodes/title "advanced glycation end products (AGEs)" 536870913] [76 :nodes/value 2.0 536870913] [77 :nodes/content ":PROPERTIES:\n:ID:       84442082-22d3-487a-8666-980b528fa603\n:ROAM_ALIASES: alcohol\n:END:\n#+title: drinking\n\n" 536870913] [77 :nodes/id "84442082-22d3-487a-8666-980b528fa603" 536870913] [77 :nodes/properties {"CATEGORY" "20210710112410-drinking", "ROAM_ALIASES" "alcohol", "ID" "84442082-22d3-487a-8666-980b528fa603", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210710112410-drinking.org", "PRIORITY" "B"} 536870913] [77 :nodes/title "drinking" 536870913] [77 :nodes/value 2.527777850627899 536870913] [78 :nodes/content ":PROPERTIES:\n:ID:       28f08ff2-eba5-4267-b8a7-005bb4c9cf46\n:END:\n#+title: colin fleming\n" 536870913] [78 :nodes/id "28f08ff2-eba5-4267-b8a7-005bb4c9cf46" 536870913] [78 :nodes/properties {"CATEGORY" "20210409192114-colin_fleming", "ID" "28f08ff2-eba5-4267-b8a7-005bb4c9cf46", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210409192114-colin_fleming.org", "PRIORITY" "B"} 536870913] [78 :nodes/title "colin fleming" 536870913] [78 :nodes/value 2.75 536870913] [79 :nodes/content ":PROPERTIES:\n:ID:       61c265aa-07e7-438b-a511-68c9747381dc\n:END:\n#+title: river town by peter hessler\n\n[[id:876a8e7d-8daf-4e9a-9f05-30eb0ea81061][books]]\n\nBased off two years from 1996 to 1998\n\nI liked the introspective memoir feel. I compared his description of travel to\nmy own experiences in Asia and China. It made me want to be more observant and\ntake notes. There's value in taking notes and/or reflecting on the most mundane\nof things.\n\nHis close observation of many things made me want to meditate too. I thought\nmaybe it'd be useful to keep my own travel memoir / notes when I do travel. At\nleast makes me wonder if there'd be any value to it. Even having one of just\neveryday life could potentially give much more self awareness.\n\nChina was a brutal place in the 1970's Cultural Revolution times. They seem like they\nhave a very tight control on their history and free speech. VAST majority of people\ndon't care and actively participate / buy into the CCP rallies. He does not see\nany potential opening or pressure by the people for the CCP to be less\nauthoritarian. There is no criticism allowed whatsoever. And the kids realize when\nPeter inadvertantly insults china (e.g. mentions that people in the west thought\nchina was weak bc their armies were easily defeated), and the kids put their heads\ndown and don't say a word out of embarassment and fear.\n\nThe kids are very used to rote memorization and always seek to immitate rather\nthan to learn and be actually creative. They work extremely hard. Most are from\npeasant families in the countryside and are extremely poor. They don't have ANY\nmechanized agriculture!! They use plows and oxen/horses still!\n\nChina in 1996 reminds me of America in 1920. Their level of industrialization is\nextremely low.\n\nOverall, I liked the book and feel like I learned a lot about Chinese culture.\n" 536870913] [79 :nodes/id "61c265aa-07e7-438b-a511-68c9747381dc" 536870913] [79 :nodes/properties {"CATEGORY" "20221117122504-river_town_by_peter_hessler", "ID" "61c265aa-07e7-438b-a511-68c9747381dc", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221117122504-river_town_by_peter_hessler.org", "PRIORITY" "B"} 536870913] [79 :nodes/title "river town by peter hessler" 536870913] [79 :nodes/value 2.7479166984558105 536870913] [80 :nodes/content ":PROPERTIES:\n:ID:       add2a593-5edf-477a-aa2a-30fef8a4ad26\n:END:\n#+title: tim ferriss\n" 536870913] [80 :nodes/id "add2a593-5edf-477a-aa2a-30fef8a4ad26" 536870913] [80 :nodes/properties {"CATEGORY" "20221004131213-tim_ferriss", "ID" "add2a593-5edf-477a-aa2a-30fef8a4ad26", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221004131213-tim_ferriss.org", "PRIORITY" "B"} 536870913] [80 :nodes/title "tim ferriss" 536870913] [80 :nodes/value 3.391666740179062 536870913] [81 :nodes/content ":PROPERTIES:\n:ID:       3b50af04-4a65-4c25-93a0-d51b93444317\n:END:\n#+title: git-commands\n\n[[id:81a17d27-594a-4f01-9ec9-7686271bcf24][coding]]\n\nI made a really useful one a while back\n\nfile://Users/kevinkrausse/Documents/worknotes/me/git.md\nfile://Users/kevinkrausse/Documents/repos/worknotes/me/git.md\n\nI like this workflow:\n\nmove working dir to new branch:\n\ngit checkout --detach\ngit reset --soft <new-branch>\ngit checkout <new-branch>\n\n* Antal's presentation\n** changing history\n*** git commit --amend\nsimplest case. just chaing the most recent commit\n*** rebase -i (for interactive)\ndoes way more than I thought\n- can do git reset while there and split commits and fully fine-grained edit the\n  history\n" 536870913] [81 :nodes/id "3b50af04-4a65-4c25-93a0-d51b93444317" 536870913] [81 :nodes/properties {"CATEGORY" "20210322090452-git_commands", "ID" "3b50af04-4a65-4c25-93a0-d51b93444317", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210322090452-git_commands.org", "PRIORITY" "B"} 536870913] [81 :nodes/title "git-commands" 536870913] [81 :nodes/value 2.0 536870913] [82 :nodes/content ":PROPERTIES:\n:ID:       aa276919-dce8-4427-b939-9dea096a12a2\n:END:\n#+title: ketotic blog\n\n[[id:82365fe3-8d59-4ae4-841e-2830f02d251a][amber o'hearn]] [[id:014d95aa-bba2-4a62-9d92-182d0aac0a62][keto]]\n\nhttp://www.ketotic.org/\n\n** Does a ketogenic diet confer the benefits of butyrate without the fibre?\n\nhttp://www.ketotic.org/2017/11/does-ketogenic-diet-confer-benefits-of.html#pen2007\n\n- ppl say enterocytes would die without butyrate, but clearly this is not true.\n  germ-free mice are healthier.\n- [[id:2428de28-f973-4e35-a8ff-d361dbd7c501][butyrate]] in the digestive system doesn't even seem good!\n  - Butyrate inserted elsewhere in the body besides the colon often has a better\n    outcome for enterocytes.\n  - This links a study in pigs where butyrate leads to microbiome disbiosis & disease.\n  - butyrate make colitis worse.\n- mechanism of butyrate's beneficial action may even be with ketone,\n  beta-hydroxybutyrate, a direct metabolite of butyrate\n- IBD diet recomments low \"residue\".\n  - \"That includes fibre , but also microorganisms, and secretions and cells shed from the alimentary tract.\"\n  - maybe the cells are coming from kefir/yoghurt?\n- low fat vs high fat in diet has mixed results.\n" 536870913] [82 :nodes/id "aa276919-dce8-4427-b939-9dea096a12a2" 536870913] [82 :nodes/properties {"CATEGORY" "20220328220606-ketotic_blog", "ID" "aa276919-dce8-4427-b939-9dea096a12a2", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220328220606-ketotic_blog.org", "PRIORITY" "B"} 536870913] [82 :nodes/title "ketotic blog" 536870913] [82 :nodes/value 3.1424603536725044 536870913] [83 :nodes/content ":PROPERTIES:\n:ID:       ea23ff75-2ef5-4333-9fc8-2432a196891c\n:ROAM_ALIASES: ai \"artificial intelligence\"\n:END:\n#+title: machine learning\n\npromising blog: https://www.lesswrong.com/\n\nI like http://bactra.org/notebooks/ai.html, but he's too theoretical and nerdy.\nI only care about real world applications.\n\nminecraft learning:\n- https://openai.com/blog/vpt/\n- competition for minecraft shite [[https://www.aicrowd.com/challenges/neurips-2022-minerl-basalt-competition][link]]\n\n*** how chat works?\nhttps://openai.com/blog/webgpt/\nhttps://arxiv.org/pdf/2212.03551.pdf\n\n*** Attention is all you need\nhttps://arxiv.org/pdf/1706.03762.pdf\n\n*** Atlas: Few-shot Learning with Retrieval Augmented Language Models\nhttps://arxiv.org/pdf/2208.03299.pdf\n\nfile:resources/2208.03299.pdf\n\nOur code, pretrained Atlas checkpoints, and various supporting data!!!\nhttps://github.com/facebookresearch/atlas\n\n*** GENERALIZATION THROUGH MEMORIZATION: NEAREST NEIGHBOR LANGUAGE MODELS\nhttps://openreview.net/pdf?id=HklBjCEKvH\n\nUrvashi Khandelwal, Omer Levy, Dan Jurafsky, Luke Zettlemoyer & Mike Lewis\n\nThey trained a pretty standard transformer, has a few self-attention layers,\nand then feeds into a feed forward neural network to go to the output.\nSo lets call everything up to before the feed forward neural net function f.\nSO! We make a k nearest neighbors database with datapoints f(x) where x is a\nsequence of text.\n\nThen to evaluate x, they do f(x), run kNN on the database, then interpolate\nthat result with the normal output, then feed that through the feed forward\nnetwork.\n\nthis memory problem must also be a problem with images. There's like layers in\nneural networks that have like pictures of dogs or wales. This needs to map to\nsome more abstract representation that can be in a simple database. We won't get\nanywhere with where it is now.\n** projects?\n- fluid simulation: https://sites.google.com/view/learning-to-simulate#h.p_hjnaJ6k8y0wo\n" 536870913] [83 :nodes/id "ea23ff75-2ef5-4333-9fc8-2432a196891c" 536870913] [83 :nodes/properties {"CATEGORY" "20220717093934-machine_learning", "ROAM_ALIASES" "ai \"artificial intelligence\"", "ID" "ea23ff75-2ef5-4333-9fc8-2432a196891c", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220717093934-machine_learning.org", "PRIORITY" "B"} 536870913] [83 :nodes/title "machine learning" 536870913] [83 :nodes/value 12.930555403232574 536870913] [84 :nodes/content ":PROPERTIES:\n:ID:       a5f917c9-a984-4386-9ae6-d040b48abcaa\n:END:\n#+title: europe summer 2022\n\nJune 3 - SEA->BUD 5pm\nJune 7 - BUD->FCO (Rome) 7:55pm-9:45pm $24\nJune 10\n\n| date    | flight           | time          | price |\n|---------+------------------+---------------+-------|\n| June 3  | SEA->BUD         | 5pm           | $700  |\n| June 7  | BUD->FCO (Rome)  | 7:55pm-9:45pm | $24   |\n| June 11 | TRAIN -> Milan   | ? afternoon   | $11   |\n| June 15 | TRAIN -> Zermatt | 1:25pm-2:55pm | $25   |\n|         |                  |               |       |\n" 536870913] [84 :nodes/id "a5f917c9-a984-4386-9ae6-d040b48abcaa" 536870913] [84 :nodes/properties {"CATEGORY" "20220524200204-europe_summer_2022", "ID" "a5f917c9-a984-4386-9ae6-d040b48abcaa", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220524200204-europe_summer_2022.org", "PRIORITY" "B"} 536870913] [84 :nodes/title "europe summer 2022" 536870913] [84 :nodes/value 2.0 536870913] [85 :nodes/content ":PROPERTIES:\n:ID:       94c04f66-82d8-4abe-b517-c718bb994cc5\n:END:\n#+title: my radio project\n\n[[id:c7f85840-11a5-4b2c-b574-0c8a028f6a7e][clojure]]\n[[id:2bb8fe67-0197-422e-a4a9-f392764bbceb][startup ideas]]\n\nAnyone can have an internet radio station. You can search from tops and listen live to anything.\nBased on the premise that something happening live has a different vibe.\n\n* development\n** first steps\n- Audio streaming proof of concept.\n  solid [[https://medium.com/@bryanjenningz/how-to-record-and-play-audio-in-javascript-faa1b2b3e49b][blog post]]\n  - stream through server? or stream p2p?\n    - p2p seems too hard, so for now we should just do server only.\n      - how will this work though?\n- leaderboard home page.\n  - database! w/ all the shit\n- content provider home page.\n  - also database updates.\n" 536870913] [85 :nodes/id "94c04f66-82d8-4abe-b517-c718bb994cc5" 536870913] [85 :nodes/properties {"CATEGORY" "20211016221956-my_radio_project", "ID" "94c04f66-82d8-4abe-b517-c718bb994cc5", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20211016221956-my_radio_project.org", "PRIORITY" "B"} 536870913] [85 :nodes/title "my radio project" 536870913] [85 :nodes/value 2.0 536870913] [86 :nodes/content ":PROPERTIES:\n:ID:       72de4103-c922-49a9-a112-a76eaa85f58c\n:END:\n#+title: etherium whitepaper\n\n[[id:420a9a6e-217b-4dfc-b285-e869ff3d94ce][etherium]]\n" 536870913] [86 :nodes/id "72de4103-c922-49a9-a112-a76eaa85f58c" 536870913] [86 :nodes/properties {"CATEGORY" "20211222225437-etherium_whitepaper", "ID" "72de4103-c922-49a9-a112-a76eaa85f58c", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20211222225437-etherium_whitepaper.org", "PRIORITY" "B"} 536870913] [86 :nodes/title "etherium whitepaper" 536870913] [86 :nodes/value 2.0 536870913] [87 :nodes/content ":PROPERTIES:\n:ID:       0ed2fd64-dcf3-49ef-a42d-a2f893f2eeca\n:END:\n#+title: a brief history of neoliberalism\n\n[[id:903253ec-c378-4afd-881c-195447e4e4cb][liberalism]]\n\n[[id:876a8e7d-8daf-4e9a-9f05-30eb0ea81061][book]] by [[id:464850d2-9540-4b92-bc92-5751a4f064e4][david harvey]].\n\nmade after reading, so they may not be great\n\n- neoliberalism \"the temporary contract\" supplants \"permanent institutions in the\n  professional, emotional, sexual, cultural, family and international domains\"\n- neoliberalism is tool for restoration of class power and expropriation of foreign assets\n- hedge fund/IMF conspiracy to open developing countries to foreign capital, let\n  it flow in, pull out, raise interest, asset prices drop, tell countries to sell\n  assets, and the hedge funds go in and buy / make commissions.\n- in general, neoliberalism causes poor countries to in effect subsidize the richest\n- this is in addition to increasing inequality within the richest countries,\n  which ppl are well aware of\n- this is marketed as \"freedom\" of the individual\n  - in late 70's was the first time elites created the modern \"right\" and teamed\n    up with the evangelical christians / the \"moral majority\"\n  - this \"freedom\" is based on a single conception of rights. Rights inheritly\n    conflict. \"unalienable rights\" are really just those rights a country with a\n    monopoly on violence chooses to enforce\n  - rights to private property and profit trump all other conceptions of inalienable rights\n    - \"necessitous men are not free men\" and \"an empty stomach was not conductive to freedom\"\n      - i.e. if you have to work just to survive, you aren't free.\n  - \"the assumption that individual freedoms are guaranteed by freedom of the market and\n    of trade is a cardinal feature of neoliberalism\"\n- china's growth is really the result of the largest pool of slave labor ever accumulated\n  - they stopped giving poor country workers benefits, retirement, health care, etc.\n  - sometimes they don't even pay them\n  - them *move backwards* in technology to take advantage of such cheap labor\n\n** boom\n- british would always put a minority in power so they would rely on the british\n** bretton woods\n- created the imf and world bank\n- new currency regime around the world\n- created fixed era\n- we decide every country's currency is pinned to the us doller, that's pegged to Gold\n  - if anyone wan't to convert pounds to dollars, they have to go to central bank\n  - then if there's bunch of ppl wanting to convert, then they have to devalue the foreign\n    currency\n- there werent banking chrisisies, but there were currency crisises\n  - bc there wasn't currency movement\n- then we go to a new\n\n\n- central banking\n- his guy was #2 during 2008 crash\n\n- when return on capital is higher than growth rate of GDP, inequality must necessarily be increasing\n  - there was a point in the late 50s when they got close, but theyve been diverging since. the divergence is\n    even accelerating\n  - starts at year zero. return of capital is fixed basically. gdp fluctuates.\n" 536870913] [87 :nodes/id "0ed2fd64-dcf3-49ef-a42d-a2f893f2eeca" 536870913] [87 :nodes/properties {"CATEGORY" "20210922085839-a_brief_history_of_neoliberalism", "ID" "0ed2fd64-dcf3-49ef-a42d-a2f893f2eeca", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210922085839-a_brief_history_of_neoliberalism.org", "PRIORITY" "B"} 536870913] [87 :nodes/title "a brief history of neoliberalism" 536870913] [87 :nodes/value 2.7479166984558105 536870913] [88 :nodes/content ":PROPERTIES:\n:ID:       a262f204-b467-4012-beeb-fca8a629d0aa\n:END:\n#+title: datomic\n\n" 536870913] [88 :nodes/id "a262f204-b467-4012-beeb-fca8a629d0aa" 536870913] [88 :nodes/properties {"CATEGORY" "20210413170502-datomic", "ID" "a262f204-b467-4012-beeb-fca8a629d0aa", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210413170502-datomic.org", "PRIORITY" "B"} 536870913] [88 :nodes/title "datomic" 536870913] [88 :nodes/value 3.861111044883728 536870913] [89 :nodes/content ":PROPERTIES:\n:ID:       85720036-dfb5-41e3-8981-8a1b308753a5\n:END:\n#+title: The therapeutic properties of ketogenic diets, slow-wave sleep, and circadian synchrony\n\n[[id:82365fe3-8d59-4ae4-841e-2830f02d251a][amber o'hearn]] [[id:014d95aa-bba2-4a62-9d92-182d0aac0a62][keto]]\n\nhttps://pubmed.ncbi.nlm.nih.gov/34269711/\n\nKD = ketogenic diet\n\n\n\n** why are ketones good?\n- highly unsaturated fatty acid (HUFA) availability\n- KDs increase NAD+, increasing sirtuins / longevity\n- bioenergetics\n  - Ketones use less NAD+ per unit ATP (ref. 17)\n  - increase brain ATP?!\n  - theres more Adenosine\n** slow wave sleep sws\n- clears away ROS\n- reduces amyloid plaque accumulation in Alzheimer’s disease\n" 536870913] [89 :nodes/id "85720036-dfb5-41e3-8981-8a1b308753a5" 536870913] [89 :nodes/properties {"CATEGORY" "20221007222720-the_therapeutic_properties_of_ketogenic_diets_slow_wave_sleep_and_circadian_synchrony", "ID" "85720036-dfb5-41e3-8981-8a1b308753a5", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221007222720-the_therapeutic_properties_of_ketogenic_diets_slow_wave_sleep_and_circadian_synchrony.org", "PRIORITY" "B"} 536870913] [89 :nodes/title "The therapeutic properties of ketogenic diets, slow-wave sleep, and circadian synchrony" 536870913] [89 :nodes/value 2.0 536870913] [90 :nodes/content ":PROPERTIES:\n:ID:       cbc60d55-4187-4233-8bee-44d37e345392\n:END:\n#+title: music\n" 536870913] [90 :nodes/id "cbc60d55-4187-4233-8bee-44d37e345392" 536870913] [90 :nodes/properties {"CATEGORY" "20210327091535-music", "ID" "cbc60d55-4187-4233-8bee-44d37e345392", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210327091535-music.org", "PRIORITY" "B"} 536870913] [90 :nodes/title "music" 536870913] [90 :nodes/value 2.9999999403953552 536870913] [91 :nodes/content ":PROPERTIES:\n:ID:       f4a59434-6192-418c-bb7d-fb1b8412f45a\n:END:\n#+title: raw meat\n\n[[id:334ffe1d-43dd-4f13-99a0-67cf89b73328][carnivore]]\n\nwhy raw:\n    interesting youtube channel:\n    https://www.youtube.com/watch?v=UJOS9xg4PJ0\n    - denatured proteins fold differently and are harder to break down\n      - reminds me of [[id:406a4a8d-4aa4-4538-9294-0a6097df0cc5][hyperlipid]] said about casein & pasteurization\n    - could it really denature differently in stomach acid? probably.\n" 536870913] [91 :nodes/id "f4a59434-6192-418c-bb7d-fb1b8412f45a" 536870913] [91 :nodes/properties {"CATEGORY" "20220422093057-raw_meat", "ID" "f4a59434-6192-418c-bb7d-fb1b8412f45a", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220422093057-raw_meat.org", "PRIORITY" "B"} 536870913] [91 :nodes/title "raw meat" 536870913] [91 :nodes/value 2.6666666865348816 536870913] [92 :nodes/content ":PROPERTIES:\n:ID:       464850d2-9540-4b92-bc92-5751a4f064e4\n:END:\n#+title: david harvey\n" 536870913] [92 :nodes/id "464850d2-9540-4b92-bc92-5751a4f064e4" 536870913] [92 :nodes/properties {"CATEGORY" "20210922085951-david_harvey", "ID" "464850d2-9540-4b92-bc92-5751a4f064e4", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210922085951-david_harvey.org", "PRIORITY" "B"} 536870913] [92 :nodes/title "david harvey" 536870913] [92 :nodes/value 2.78125 536870913] [93 :nodes/content ":PROPERTIES:\n:ID:       a49bfbb3-9c08-42cf-909d-4a9f789aeb61\n:END:\n#+title: berberine\n\n[[id:f08e30aa-e83b-451f-88b7-fe954bab2f6e][supplements]] [[id:9dba0048-02d0-4bde-9866-50ca4a6bf2ff][metformin]] [[id:19378c31-8c63-4f00-b18e-fb15f8ff07f5][drugs]]\n\n\n- current story\n  - berberine -> kills BSH bacteria that bread down bile acid -> more bile acid ->\n    FXR signaling -> expression of anti-microbial genes -> clearning of bacteria\n    and better health\n  - could this be why I usually diarrhea post-fast? during the fast, lots of\n    BSH bacteria die, then when I eat, lots more bile acid, then subsequent FXR\n    activiation and anti-microbe activity?\n\n** Activation of IGF-1/IGFBP-3 signaling by berberine improves intestinal mucosal barrier of rats with acute endotoxemia\n\nhttps://doi.org/10.1016/j.fitote.2017.11.012\n\n\"LPS has been reported to inhibit IGF-I and IGFBP-3 expression\"\n- why?\n  - Activity of GH/IGF-I axis in trauma and septic patients during artificial\n    nutrition (https://link.springer.com/article/10.1007/BF03343993)\n    Says there's less growth hormone (GH) response to growth hormone stimulating\n    hormode (GHSH) in sepsis patients. This feeds into IGF-1 not being\n    stimulated, which causes lack of expression and tight junction failing\n  - THEORY: immune system demand becomes so high that the body develops \"growth\n    resistance\" (e.g. to GH) in order to spare building capacity for the immune\n    system / acute trauma.\n    - related: https://doi.org/10.1093/advances/nmaa139\n\n** Brands to buy!\nhttps://www.ncbi.nlm.nih.gov/pmc/articles/PMC5807210/\n\nbasically, Thorne, Integrative Therapeutics, or Vital Nutrients (most expensive)\n\nBUT Dr. Whitaker Berberine Supplement is the best!\n** Efficacy of Berberine in Patients with Type 2 Diabetes\n\nhttps://doi.org/10.1016%2Fj.metabol.2008.01.013\n\nused to treat sibo. related to metformin (like same family of molecules). But\nmight be better for sibo? [[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2410097/#:~:text=Compared%20with%20metformin%2C%20berberine%20exhibited,activity%20is%20better%20than%20metformin][better than metform]].\n** potential post?\n- amber (and I) had fat intolerance?\n  - link this with less bile production\n- we had sibo\n** Regulation of antibacterial defense in the small intestine by the nuclear bile acid receptor\n:PROPERTIES:\n:ID:       e22d1b38-9b0c-46df-ac70-f9fe028527e7\n:END:\nfound via [[id:919e9425-207e-45b9-9ab8-891fd455f7f4][Berberine Directly Affects the Gut Microbiota to Promote Intestinal Farnesoid X Receptor Activation]]\n\nhttps://pubmed.ncbi.nlm.nih.gov/16473946/\nhttps://sci-hub.se/10.1073/pnas.0509592103\n#+begin_quote\nObstruction of bile flow in humans or rodents causes proliferation of intestinal\nbacteria and mucosal injury, which can lead to bacterial translocation across\nthe mucosal barrier and systemic infection (2).  Oral administration of bile\nacids inhibits the bacterial overgrowth and translocation caused by biliary\nobstruction in rodents (3, 4).\n#+end_quote\n\nreminds me of https://fireinabottle.net/campari-is-a-dual-bile-acid-receptor-agonist-that-activates-ampk/\n\nFXR activation causes\n- aniboitic effect\n- less bacteria\n\n- _ileum_ = last section of small intestine\n\nYou can stop FXR activation by performing bile duct ligation (BDL). This causes\nbacterial overgrowth in ileum, /especially aerobes/. This is completely blocked\nby giving an FXR agonist.\n\"FXR-KO mice had 10-fold higher levels of aerobic bacteria in mesenteric lymph nodes as compared with WT animals\"\n\"transmission electron microscopy revealed large ruptures in the mucosal surface of BDL WT\nmice, with bacteria penetrating deep into the epithelium\"\n\"Virtually no mucosal damage was detected in electron microscopy studies done by using tissue from GW4064-treated mice\"\nFXR-KO mice had higher bacterial translocation\n** microbiota section\n*** Effects of Berberine on the Gastrointestinal Microbiota\nhttps://www.ncbi.nlm.nih.gov/pmc/articles/PMC7933196/\n\n  #+begin_quote\nBerberine is also known to reduce the diversity of the GM and interfere with the relative abundance of Desulfovibrio, Eubacterium, and Bacteroides\n  #+end_quote\n\nHEALS SIBO\n\n  #+begin_quote\n  Short-term exposure to berberine alters the populations of intestinal bacteria by reducing the activity of Clostridium cluster XIVa and IV, and their bile salt hydrolase (BSH), thus leading to the accumulation of taurocholic acid (TCA). TCA can activate intestinal farnesoid X receptor (FXR) which can then mediate the metabolism of bile acids, lipids, and glucose (Tian et al., 2019).\n  #+end_quote\n\n*** Berberine Directly Affects the Gut Microbiota to Promote Intestinal Farnesoid X Receptor Activation\n:PROPERTIES:\n:ID:       919e9425-207e-45b9-9ab8-891fd455f7f4\n:END:\nwhich links to FXR receptor link:\nThis a good overview\nhttps://www.ncbi.nlm.nih.gov/pmc/articles/PMC6323626/\n\n- \"A recent study indicated a novel mechanism for the intestine-restricted FXR\n  agonist fexaramine that can activate intestinal FXR and TGR5/GLP-1 signaling\n  through intestinal microbiota activity to protect against obesity and related\n  metabolic disease\"\n- \"Recent evidence suggested the lipid-lowering effect of BBR involves\n  modulating bile acid composition and activating intestinal FXR signaling (Guo\n  et al., 2016; Sun et al., 2017).\"\n- \"We demonstrated that BBR directly altered the gut microbiota by\nreducing Clostridium spp. and subsequently altered intestinal FXR signaling\"\n- Berberine in a dish of bacteria changes the composition, \"especially\nreducing BSH-expressing bacteria like Clostridium spp.\".\n- so reduces Clostridium and its bile salt hydrolase (bsh) activity.\n- need to look more into BSH bacteria\n- how to bile acids work? conjugation / deconjugation\n    - see http://www.vivo.colostate.edu/hbooks/pathphys/digestion/liver/bile.html\n*** The complex structure of bile salt hydrolase from Lactobacillus salivarius reveals the structural basis of substrate specificity\n- https://www.nature.com/articles/s41598-019-48850-6 seems very interesting\n    #+begin_quote\n    The bile salt hydrolase (BSH) produced by intestinal bacteria catalyzes deconjugation of glyco-conjugated and tauro-conjugated bile acids through the hydrolysis of the amide bond and the release of free bile acids (e.g. cholic acid and chenodeoxycholic acid) and amino acids (glycine and taurine)1. Deconjugation is a gateway reaction in the metabolism of bile acids in the small intestine2,3. Therefore, BSH participates in a range of metabolic processes in mammalians including the regulation of dietary lipid absorption, cholesterol metabolism, energy and inflammation homeostasis4,5,6.\n    #+end_quote\n- other shite\n- which caused buildup of taurocholic acid (tca) \"TCA was associated with\nactivation of intestinal FXR, which can mediate bile acid, lipid, and\nglucose metabolism\".\n*** Intestinal Farnesoid X Receptor Signaling Modulates Metabolic Disease\n\n- fxr also affects ceramide synthesis in the small intestine according\n    to https://pubmed.ncbi.nlm.nih.gov/28249275/\n    which might be a mechanism for better sugar absoarbtion\n- but why would you produce ceramides in this case?\n\n*** Regulation of antibacterial defense in the small intestine by the nuclear bile acid receptor\nhttps://www.ncbi.nlm.nih.gov/pmc/articles/PMC1450165/\n\n- FXR activiation leads to many anti microbial gene expression\n\n** Berberine Ameliorates Periodontal Bone Loss by Regulating Gut Microbiota\nhttps://pubmed.ncbi.nlm.nih.gov/30199654/\n\nbasically just that it improves intestinal barrier, which could be why it\nimproves post-menopausal bone loss.\n\n** questions\n- why would this bile salt in latter intestine cause expression of anti-microbial genes?\n  How does the regulation get out of wack in the first place? Like shouldn't\n  these just be signaled all the time?\n  - Well maybe initial disbiosis causes bacterial BSH to interfere with normal\n    signalling and this breaks the whole system. Maybe these bacteria in a\n    sense evolved to do that\n" 536870913] [93 :nodes/id "a49bfbb3-9c08-42cf-909d-4a9f789aeb61" 536870913] [93 :nodes/properties {"CATEGORY" "20220330224805-berberine", "ID" "a49bfbb3-9c08-42cf-909d-4a9f789aeb61", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220330224805-berberine.org", "PRIORITY" "B"} 536870913] [93 :nodes/title "berberine" 536870913] [93 :nodes/value 3.7547619119286537 536870913] [94 :nodes/content ":PROPERTIES:\n:ID:       eb039932-abd7-4a9b-89c9-d4f6e9d4adb1\n:END:\n#+title: budhism\n" 536870913] [94 :nodes/id "eb039932-abd7-4a9b-89c9-d4f6e9d4adb1" 536870913] [94 :nodes/properties {"CATEGORY" "20211016004012-budhism", "ID" "eb039932-abd7-4a9b-89c9-d4f6e9d4adb1", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20211016004012-budhism.org", "PRIORITY" "B"} 536870913] [94 :nodes/title "budhism" 536870913] [94 :nodes/value 5.249999940395355 536870913] [95 :nodes/content ":PROPERTIES:\n:ID:       4383801b-9fb7-4bc0-bb2b-2498da519d88\n:END:\n#+title: org roam\n\n- these are taken from the org-roam [[https://www.orgroam.com/manual.html][manual]]\n- =#+roam_tags= to add tags to notes for categorization.\n  This could help with my idea of adding things to generic lists.\n  - space delimited =#+roam_tags this_is_a_tag \"and is this\"=\n- =#+roam_alias= aliases are also useful for giving things multiple names to find them\n  easier. do this with\n- templating\n  - would be useful for my idea. Want timestamps on everything. Will proably\n    modify the default template to be timestamped also\n\n- to set up my templates\n    https://orgmode.org/manual/Template-expansion.html#Template-expansion\n    https://www.gnu.org/software/emacs/manual/html_mono/org.html#Setting-up-capture\n" 536870913] [95 :nodes/id "4383801b-9fb7-4bc0-bb2b-2498da519d88" 536870913] [95 :nodes/properties {"CATEGORY" "20210327182525-org_roam", "ID" "4383801b-9fb7-4bc0-bb2b-2498da519d88", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210327182525-org_roam.org", "PRIORITY" "B"} 536870913] [95 :nodes/title "org roam" 536870913] [95 :nodes/value 4.240000069141388 536870913] [96 :nodes/content ":PROPERTIES:\n:ID:       ba5e9b97-1bbc-45dc-85f4-d9f3e6cf1b20\n:END:\n#+title: clojurescript\n\n[[id:c7f85840-11a5-4b2c-b574-0c8a028f6a7e][clojure]]\n" 536870913] [96 :nodes/id "ba5e9b97-1bbc-45dc-85f4-d9f3e6cf1b20" 536870913] [96 :nodes/properties {"CATEGORY" "20211229173853-clojurescript", "ID" "ba5e9b97-1bbc-45dc-85f4-d9f3e6cf1b20", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20211229173853-clojurescript.org", "PRIORITY" "B"} 536870913] [96 :nodes/title "clojurescript" 536870913] [96 :nodes/value 4.166666626930237 536870913] [97 :nodes/content ":PROPERTIES:\n:ID:       3cf39f46-34a0-40e3-9d50-5047307ac0a5\n:END:\n#+title: gaps diet\n\n[[id:b77d4578-bc50-42a8-94c4-b11d27f78837][food]]\n\ngaps intro info\nhttps://www.gapsdiet.com/wp-content/uploads/2018/07/IntroductionDietInformation.pdf\n\nsummary\nhttps://www.gapsdiet.com/wp-content/uploads/2018/07/Introduction-Diet.pdf\n" 536870913] [97 :nodes/id "3cf39f46-34a0-40e3-9d50-5047307ac0a5" 536870913] [97 :nodes/properties {"CATEGORY" "20220917191536-gaps_diet", "ID" "3cf39f46-34a0-40e3-9d50-5047307ac0a5", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220917191536-gaps_diet.org", "PRIORITY" "B"} 536870913] [97 :nodes/title "gaps diet" 536870913] [97 :nodes/value 2.0 536870913] [98 :nodes/content ":PROPERTIES:\n:ID:       79498e11-73a8-4608-a5a9-73a40cba9c3b\n:END:\n#+title: rants\n\n** 2023-01-18\nIf I truly am the best on the team, how can I make this shine through?\n\nWhen the people above me mostly don't want me to be promoted\n" 536870913] [98 :nodes/id "79498e11-73a8-4608-a5a9-73a40cba9c3b" 536870913] [98 :nodes/properties {"CATEGORY" "20230118215540-rants", "ID" "79498e11-73a8-4608-a5a9-73a40cba9c3b", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20230118215540-rants.org", "PRIORITY" "B"} 536870913] [98 :nodes/title "rants" 536870913] [98 :nodes/value 2.0 536870913] [99 :nodes/content ":PROPERTIES:\n:ID:       793f1b7c-84c5-44c0-b818-80bdeb5df1cd\n:END:\n#+title: nicotine\n\nseems like an interesting drug from a metabolic standpoint. Seems similar to [[id:9dba0048-02d0-4bde-9866-50ca4a6bf2ff][metformin]] .\n\n\n\n\n** gastric emptying and nicotine\n-  https://pubmed.ncbi.nlm.nih.gov/2979243/\n    smokers using higher nicotine cigarettes have much slower gastric emptying!\n    There are definitly other effects on digestion!!\n\n** Genistein improve nicotine toxicity on male mice pancreas\nhttps://synapse.koreamed.org/articles/1128962\n\ninjected mice w/ 2.5mg/kg nicotine (eqiv to 15mg for me) for 4 weeks and then dissected.\n\nThe pancreas of nicotine group seems actually fucked up!\n\nnic pancreas has way less insulin, its significantly smaller, way less\n\"antioxidant capacity\" and much more nitrite oxide\n\n** Habenular TCF7L2 links nicotine addiction to diabetes\n\nhttps://www.nature.com/articles/s41586-019-1653-x\n\nThis tcfl2 is a pathway promoting insulin release.\n\nThere are neurons in brain connected to pancreas.\n\nNicotine stimulates this part of brain, causes tcfl2-dependent blood sugar\nincrease.\n\nWild-type rats with a history of nicotine consumption show increased circulating levels of glucagon and insulin.\n\n** [[https://link.springer.com/article/10.1007/s10863-019-09800-z][cool review on how they affect mitochondria]]\n- Nicotine can easily enter cells.\n- May increase nAChR channels on mitochondrial membrane.\n  also may make these nAChR channels more permiable to Ca^{+2}\n  Allowing more Ca^{+2} ions to pass out of the mitochondria. This may decrease\n  the effectiveness of the mitochondria since the intermembrane space is highly\n  acidic, and the mitochondria's whole gig is dependent on that.\n- it causes uncoupling in fat cells. converts white adipose tissue (WAT) into\n  brown adipose tissue.\n- helps with oxidative stress by slowing down the mitochondria. in this way it\n  helps with Parkinsons disease\n- increases ROS in the cell, but also natural ROS compensation, which is either\n  good overall or kills the cell\n" 536870913] [99 :nodes/id "793f1b7c-84c5-44c0-b818-80bdeb5df1cd" 536870913] [99 :nodes/properties {"CATEGORY" "20211002004519-nicotine", "ID" "793f1b7c-84c5-44c0-b818-80bdeb5df1cd", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20211002004519-nicotine.org", "PRIORITY" "B"} 536870913] [99 :nodes/title "nicotine" 536870913] [99 :nodes/value 2.888888902962208 536870913] [100 :nodes/content ":PROPERTIES:\n:ID:       bf693fa1-eeb9-4c5c-a659-f400149e18fa\n:END:\n#+title: roam-motivation\n\n* reasons\n- well before getting into it I read this, [[id:49a71561-f98b-42a5-812a-031f2a88c7ee][quattype-smart-notes]],\nand I think that subconsiously put it in my mind\n\n- been having some anxiety about wanting to remember / integrate things\n  better and I'm hoping a good notes system will help\n  - i.e. don't feel anxious closing tabs anymore bc important stuff is linked\n\n- this guy seems dope: https://www.jethro.dev/\n  and his [[https://blog.jethro.dev/posts/how_to_take_smart_notes_org/][post]] about smart notes\n  - this guy also has an example roam repo that he shares on that.\n    would be worth looking into creating one\n    his is here: https://github.com/jethrokuan/braindump\n\n- this guys zettlekasten is really cool too\n  - https://braindump.rasen.dev/index\n    ^ he read [[https://www.amazon.com/How-Take-Smart-Notes-Nonfiction-ebook/dp/B06WVYW33Y][how to take smart notes]]\n    [[id:bdd841b3-53b0-4b0c-a81a-4b247435b4be][how-to-take-smart-notes]]according to his reading notes in the\n    brain dump! Same one recommended in workflow\n    ^ also taken from his reading notes, [[id:684beca0-7f73-4988-8a13-2e72198247f2][burnout-prevention-and-recovery]]\n\n- my [[id:e6862ed2-ffc0-4d4f-bf94-d10c1c45e71b][notes-workflow]]\n\n* things to skill up on\n- look at these workflows: https://www.orgroam.com/manual.html#Note_002dtaking-Workflows\n  note ^ this also has the book that quanttype listed (link under 'reasons')\n- the daily notes feature. see if there's a workflow related to this\n" 536870913] [100 :nodes/id "bf693fa1-eeb9-4c5c-a659-f400149e18fa" 536870913] [100 :nodes/properties {"CATEGORY" "20210318214814-roam_motivation", "ID" "bf693fa1-eeb9-4c5c-a659-f400149e18fa", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210318214814-roam_motivation.org", "PRIORITY" "B"} 536870913] [100 :nodes/title "roam-motivation" 536870913] [100 :nodes/value 3.5233333706855774 536870913] [101 :nodes/content ":PROPERTIES:\n:ID:       a49db2ff-0264-4192-a734-0ee6402102df\n:END:\n#+title: researcher\n" 536870913] [101 :nodes/id "a49db2ff-0264-4192-a734-0ee6402102df" 536870913] [101 :nodes/properties {"CATEGORY" "20221119132403-researcher", "ID" "a49db2ff-0264-4192-a734-0ee6402102df", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221119132403-researcher.org", "PRIORITY" "B"} 536870913] [101 :nodes/title "researcher" 536870913] [101 :nodes/value 2.800000011920929 536870913] [102 :nodes/content ":PROPERTIES:\n:ID:       cf166372-ec8e-4fac-8387-a203a0111dc5\n:END:\n#+title: prisma data modeling\n\n[[id:81a17d27-594a-4f01-9ec9-7686271bcf24][coding]] [[id:a5b210c1-8236-4e1f-8a96-f10047885e5f][databases]]\n\n** tables, tuples, types\n- rows are stored as tuples\n- db's access disk at the level of _pages_. 1kb-16kb\n- tuples are stored in pages. accessing tuples that are just over half a page is\n  a big waste. And queries will be expensive since more page accesses\n- large values are not stored inline.\n  - but don't use an RDBMS to store documents. use a doc store\n** correctness and constraints\n- you can use a CHECK command to do an arbitrary data check\n- postgres & db2 can do EXCLUDE to make sure no \"conflicts\" exist\n- primary key is kind of an excludes constraint since it must be unique\n  - can make a \"natural\" primary key possibly multi column, or a surrogate\n    (number or uuid)\n- foreign keys\n  - a copy of another primary key (dont use big natural keys)\n    - can actually refer to any non-null unique column\n  - values link records to \"parents\" in that table\n  - so a \"foreign key\" is just a constraint that the record exists\n** Making Connections\n- entity-relationship diagrams = ERD - diagram showing 1-to-1, 1-to-many, etc.\n  relationships for all tables.\n- if you have a foreign key in `books` to `authors`, deleting an author that\n  is referenced would violate the constraint and cause an error.\n- ON DELETE CASCADE will ensure deletes to authors will delete those books\n- ON DELETE SET NULL will set null the foreign keys that reference the author\n- ON UPDATE CASCADE updates foreign keys if the natural primary key changes\n\n- A \"many-to-many\" relationship has to be represented in a dedicated table\n  - A primary key across each foreign key prevents duplicates of the same\n    relationship.\n  - BUT sometimes a junction fufills other purposes. e.g. checkouts in the\n    many-many relation between books and patrons. There can be multiple\n    checkouts by same person of same book.\n** Functional Units\nEven a single-statement function has a crucial advantage over external code:\nexecution never leaves the safety of the database's ACID guarantees.\n** Relational vs Document databases\n- relational are very structured\n  - a change requires an update to all records in table\n  - BUT provides guarentees\n- joins are easy in relational.\n  - Not as easy in structured. though, the structure makes it less of a problem\n- rdb uses SQL, document db's need something else\n  - the query language can tell a lot about the particular document db bc\n    they're all so different\n- scaling\n  - rdb constraints and consistency requirements require much coordination among\n    hosts. => limited horizontal scaling\n  - document: By collocating related data together in a single document, the\n    coordination between different hosts can be minimized.\n  - the links themselves ARE the coordination\n- consistency\n  - doc db: is self-managed\n  - rdb: automatic\n\n\nfrom Cassandra:\n#+begin_quote\njoins are not supported in Cassandra so all required fields (columns) must be\ngrouped together in a single table. Since each query is backed by a table, data\nis duplicated across multiple tables in a process known as denormalization. Data\nduplication and a high write throughput are used to achieve a high read\nperformance.\n#+end_quote\n\n[[https://cassandra.apache.org/doc/latest/cassandra/data_modeling/data_modeling_rdbms.html][cassandra docs]]\n\nPerforming joins on the client should be a very rare case; you really want to\nduplicate (denormalize) the data instead.\nIt is still a common design requirement to store IDs related to other entities\nin your tables, but operations such as cascading deletes are not available\n- youre taught to normalize, but that's not good in cassandra\n  - often rdb's will end up de-normalizing for performance anyway!\n- create materialized views in cassandra & server will maintain downstream updates!\n- relationally, you just model the conceptual domain as tables. you don't think about queries.\n  you assume you can always get the data out\n- in cassandra, model the query & organize data around them\n  - detractors may say its constraining for application to have pre-defined\n    queries, but you still need to think hard about the queries\n    and you mess up in RDBs and have to restructure them too, so its not\n    horrible\n- cassandra, try to minimize partitions accessed for perf\n  - in rdb, you don't think about this at all\n- cassandra, sort order for queries is fixed on table creation\n  - rdb, you can ORDER BY whatever\n\n*** questions\n- how does cassandra handle the non-normalization\n  - client-side joins in application code may be used.\n\n- one->many relations seem awkward\n  and many->many!\n" 536870913] [102 :nodes/id "cf166372-ec8e-4fac-8387-a203a0111dc5" 536870913] [102 :nodes/properties {"CATEGORY" "20220921103933-prisma_data_modeling", "ID" "cf166372-ec8e-4fac-8387-a203a0111dc5", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220921103933-prisma_data_modeling.org", "PRIORITY" "B"} 536870913] [102 :nodes/title "prisma data modeling" 536870913] [102 :nodes/value 2.0 536870913] [103 :nodes/content ":PROPERTIES:\n:ID:       684beca0-7f73-4988-8a13-2e72198247f2\n:END:\n#+title: burnout-prevention-and-recovery\n\nyear: 2019\nyear read: 2021\nurl: https://www.helpguide.org/articles/stress/burnout-prevention-and-recovery.htm\n\n* 2021-03-21 thoughts\nI'm definitely on the road to burnout some days at Ekata. Not because of the\norganization or the job, but because of me. Mostly getting:\n- feeling of failure\n- procrastination\n- feeling overwhelmed\n- less motivation\nat least on the list of symptoms. Lack of motivation has already started in the\nsense of wanting to work on the weekends and stuff. And not wanting to code\nclojure on the weekends as much.\n\nIf I keep up the stressful patters, this thing is gonna break down and I'm\ngoing to lose motivation completely. That's what happened at Walmart.\n\nCauses:\n- Having rough days because of bad digestion has been hard. I think that's been a\n  huge factor actually.\n- My expectations are a little high. So it's hard to meet them.\n- I over-promise.\n\nAt the same time it says working too much is a cause of burnout. So maybe it's\ngood that I've slowed down on the hours.\nQuitting coffee changed this a lot. Was working like 14 hour days before quitting\nand now not at all. Could barely do 8 last week.\n\nBut idk maybe it's just a physical battle and this reflection only serves to\nincrease how seriously I take my physical health bc it shows how bad it can ruin\nmy whole life if not dealt with properly.\n" 536870913] [103 :nodes/id "684beca0-7f73-4988-8a13-2e72198247f2" 536870913] [103 :nodes/properties {"CATEGORY" "20210321084713-burnout_prevention_and_recovery", "ID" "684beca0-7f73-4988-8a13-2e72198247f2", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210321084713-burnout_prevention_and_recovery.org", "PRIORITY" "B"} 536870913] [103 :nodes/title "burnout-prevention-and-recovery" 536870913] [103 :nodes/value 3.240000158548355 536870913] [104 :nodes/content ":PROPERTIES:\n:ID:       f31487c6-759e-48cb-bd1b-48871eb35503\n:END:\n#+title: neoliberalism\n\n[[id:903253ec-c378-4afd-881c-195447e4e4cb][liberalism]]\n" 536870913] [104 :nodes/id "f31487c6-759e-48cb-bd1b-48871eb35503" 536870913] [104 :nodes/properties {"CATEGORY" "20220412133023-neoliberalism", "ID" "f31487c6-759e-48cb-bd1b-48871eb35503", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220412133023-neoliberalism.org", "PRIORITY" "B"} 536870913] [104 :nodes/title "neoliberalism" 536870913] [104 :nodes/value 2.0 536870913] [105 :nodes/content ":PROPERTIES:\n:ID:       99e82a29-42ac-47fb-9396-e738b314707a\n:END:\n#+title: opening awareness\n\n[[id:69b9e520-60df-42d5-b193-0bbc7a2521ef][meditation]]\n\nA meditation practice book. Made by [[id:1eca4241-9815-471f-900c-d8864678ba9f][david chapman]]'s spouse\n\n- origninally saw on the \"do explain\" podcast\n  - ultraspeaking seems dope https://ultraspeaking.com/blog/how-to-speak-without-notes/\n- see https://www.evolvingground.org/opening-awareness/3\n  - Remaining uninvolved is “maintaining awareness while…” rather than\n    “detaching from…” or “observing.”\n  - makes you more self-aware. And aware of what's happening in general\n\n\nI like the scaffoldings [[https://www.evolvingground.org/opening-awareness/10][post]].\n\nCan you include breathing, all sensations, light, and sound in awareness without preferential focus?\n\nWhen you notice the pull from your thought stories to become involved, see if\nyou can find the “space” around them: the space that they arise into.\n- under https://www.evolvingground.org/opening-awareness/11\n- Many people spend most of their time immersed in thought stories and\n  activities, vaguely and occasionally aware of the present moment.\n\n\"The way out of depression is /relaxation/.\"\n- interesting how she thinks it's purely a mental choice. maybe it is?\n- for some reason we actively block out sensation and this requires energy and\n  tention. You're supposed to feel this and relax.\n" 536870913] [105 :nodes/id "99e82a29-42ac-47fb-9396-e738b314707a" 536870913] [105 :nodes/properties {"CATEGORY" "20221031135851-opening_awareness", "ID" "99e82a29-42ac-47fb-9396-e738b314707a", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221031135851-opening_awareness.org", "PRIORITY" "B"} 536870913] [105 :nodes/title "opening awareness" 536870913] [105 :nodes/value 3.0 536870913] [106 :nodes/content ":PROPERTIES:\n:ID:       82365fe3-8d59-4ae4-841e-2830f02d251a\n:END:\n#+title: amber o'hearn\n\n[[id:b77d4578-bc50-42a8-94c4-b11d27f78837][food]] [[id:334ffe1d-43dd-4f13-99a0-67cf89b73328][carnivore]]\n\n- [[https://twitter.com/KetoCarnivore][twitter]]\n- https://www.mostly-fat.com/\n- ofc, the [[https://facultativecarnivore.com/][book]] currently on chapter 5, but we'll see\n- her \"where can I learn more?\" section [[https://www.mostly-fat.com/eat-meat-not-too-little-mostly-fat/#1][here]] is nice--\n  brought me to think about [[id:81e8e5c1-5904-4783-a9af-f129d14da743][histamine intolerance]]\n- [[id:aa276919-dce8-4427-b939-9dea096a12a2][ketotic blog]]\n- she has another \"blog\" space https://zecpages.com/ambimorph\n\n- [[id:5cd35f00-71bc-47f2-b256-8830189ba73e][fat and protein]]\n\n- podcast with meat mafia\n  - \"food logs are underrated\"\n  - visceral fat (and cholesterol) have immune functions. So this is a marker\n    for future disease not bc it's bad in and of itself, but because it\n    indicates something else is going wrong.\n  - rendered fat is harder to digest than fat that's still within the collagen\n    matrix\n\n** questions\n\nAnnMarie said amber had considered doing consulting. I would definitely be\ninterested in a session so I want to add some questions now.\n\n- Will a bad meal affect subsequent meals? to what extent?\n  I feel like pain continues when I try to get better. It takes time?\n- Why do I feel I ferment so much? Is there any sure-fire thing\n- Qualify the potential use cases of fasting.\n- Status of your book? What do you spend most of your time on?\n- What is the role of stomach acidity?\n- Most of your analysis on twitter is in terms of insulin response/signalling.\n  But to what extent do other things matter. ie microbiome type stuff..\n  I ferment a lot. What can help this.\n  My GOALS\n  - to have food be a solved problem and not to have to think about it.\n    I still think about it a lot :(. I often get immune flaire ups.\n- why is my blood glucose never below 87? I'd think it'd get lower with my\n  super high levels of ketosis sometimes.\n- why am I losing my hair?\n- why does the first meal after a fast fuck me up _always_?\n  Read rat studies that mucosal barrier weakens?\n- why can't I eat with caffiene?\n- Have you experimented with herbal anti microbials?\n  I read berberine acts on microbes directly and it seemed to actually\n  increase my fat tolerance a lot. What else could I do here?\n\n- patreon message!\n\n  #+begin_quote\nHi Amber,\n\nI'm Kevin. I've been 99% carnivore since June 2019 mainly because of you. I\nfound ketotic blog (which is awesome), followed that to empiri.ca, and that\neventually inspired me to try carnivore. Your work provides great value to me,\nso thank you!\n\nI have a few questions regarding your recent video with Kelly Hogan because I've\nbeen having some gut issues and sporatic fat intolerance. Why do you think you\nhad fat intolerance, and how did you overcome it? And why do you think that\nworked?\n\n\n\ndidnt send this:\n\n\nYou mention that keeping insulin low w/ lower protein & higher fat could help,\nbut this can be hard given the fat intolerance. Also, I'm curious how you think\nthis might affect microbiome.\n\nI've had sporatic fat intolerance. It magically went away, but I'm noticing it\ncome back to a certain extent.\n\nMy theory is that some microbiome issue causes the fat intolerance, which causes\nless bile acid to activate FXR (https://pubmed.ncbi.nlm.nih.gov/16473946/), which\ncauses SIBO, which causes inflammation, higher insulin, and more fat intolerance.\n\n\n\nIs this the best way to improve microbiome?\n  #+end_quote\n" 536870913] [106 :nodes/id "82365fe3-8d59-4ae4-841e-2830f02d251a" 536870913] [106 :nodes/properties {"CATEGORY" "20210710111744-amber_o_hearn", "ID" "82365fe3-8d59-4ae4-841e-2830f02d251a", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210710111744-amber_o_hearn.org", "PRIORITY" "B"} 536870913] [106 :nodes/title "amber o'hearn" 536870913] [106 :nodes/value 4.976388871669769 536870913] [107 :nodes/content ":PROPERTIES:\n:ID:       3f2f352f-af50-4b01-ae2c-791bbb145ee1\n:ROAM_ALIASES: lipopolysaccharide\n:END:\n#+title: lps\n\n[[id:b77d4578-bc50-42a8-94c4-b11d27f78837][food]]\n\n\n** Protective effects of glycine against lipopolysaccharide-induced intestinal apoptosis and inflammation\n:PROPERTIES:\n:ID:       f48d481f-7d28-4b1a-bec3-e236f600fb9f\n:END:\nhttps://link.springer.com/article/10.1007/s00726-021-03011-w\n\ncrazy! so maybe meat stock is actually super good!\n\n5 mg/kg for rats. equivalent to humans, divide by 7.4 according to\nhttps://www.ncbi.nlm.nih.gov/pmc/articles/PMC4804402/\n\nso for me, 30g of glycine!\n\nit probably needs fat to be absoarbed correctly\n\naccording to this, https://academic.oup.com/jas/article/94/6/2603/4702294\nmuscle meat is only like 4% glycine!\nSo I'm getting like none!\n\n** Interaction between Lipopolysaccharide and Gut Microbiota in Inflammatory Bowel Diseases\nCandelli, M.; Franza, L.; Pignataro, G.; Ojetti, V.; Covino, M.; Piccioni, A.; Gasbarrini, A.; Franceschi, F. Interaction between Lipopolysaccharide and Gut Microbiota in Inflammatory Bowel Diseases. Int. J. Mol. Sci. 2021, 22, 6242. https://doi.org/10.3390/ijms22126242\nhttps://sci-hub.se/10.3390/ijms22126242\n\nsummary:\n- lps can by systemic and cause systemic inflammation leading to immune pathology\n  and gut inflammation which causes microbiome dysbiosis, which causes disease.\n\n- on sci hub\n- GALT = gut-associated lymphoid tissue\n  GM = gut microbiota\n    #+begin_quote\n    The first site in which LPS can exert its inflammatory action is the gut:\n    both GM and gut-associated lymphoid tissue (GALT) are influenced by LPS and\n    shift towards an inflammatory pattern.\n    #+end_quote\n- _metabolic endotoxemia_ - condition that modifies gut epithelial barrier to\n  allow lps into bloodstream\n\n#+begin_quote\nB-lymphocytes also drive gut inflammation in patients suffering from IBD,\nproducing a wide array of antibodies such as anti-pancreatic antibodies,...\nthese antibodies seem capable of cross-reacting with commonly present bacteria\nin the intestinal lumen [20].\n#+end_quote\n\nI should check my C-reactive protein (CRP)\n\n#+begin_quote\nWhile local changes are the drivers of IBD, systemic inflammation is what allows it to\nprogress. Indeed, it has been observed that in patients with IBD, inflammatory markers\nsuch as C-reactive protein (CRP) are increased used to monitor the progression of the\ndisease [23].\n#+end_quote\n\n- inflammation progresses the disease and causes growth of aero tolerant bacteria.\n  So the inflammation gives more oxigen\n\n#+begin_quote\nin inflamed conditions, bacteria that determine inflammation also tend to\nincrease. These changes are likely a consequence of the increased oxidative\nstatus, which is favorable for aero tolerant taxa such as Proteobacteria and\nActinobacteria [35].\n#+end_quote\n\n#+begin_quote\na fecal transplant in patients with both ulcerative colitis and Crohn’s disease:\nnot only did the disease go into remission, but also the whole immune system\nradically changed, demonstrating that, while the GM is not causative in the\ndevelopment of IBD, it is a key promoter [46].\n#+end_quote\n" 536870913] [107 :nodes/id "3f2f352f-af50-4b01-ae2c-791bbb145ee1" 536870913] [107 :nodes/properties {"CATEGORY" "20220917232614-lps", "ROAM_ALIASES" "lipopolysaccharide", "ID" "3f2f352f-af50-4b01-ae2c-791bbb145ee1", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220917232614-lps.org", "PRIORITY" "B"} 536870913] [107 :nodes/title "lps" 536870913] [107 :nodes/value 2.5833333134651184 536870913] [108 :nodes/content ":PROPERTIES:\n:ID:       81e8e5c1-5904-4783-a9af-f129d14da743\n:END:\n#+title: histamine intolerance\n\n[[id:b77d4578-bc50-42a8-94c4-b11d27f78837][food]] [[id:334ffe1d-43dd-4f13-99a0-67cf89b73328][carnivore]] [[id:84442082-22d3-487a-8666-980b528fa603][drinking]]\n\ntheory: I have alcohol-induced histamine intolerance and it makes my lifee suck\n  the week after drinking\n\nfirst found indirectly through [[id:82365fe3-8d59-4ae4-841e-2830f02d251a][amber o'hearn]] taking me to [[id:065f0e41-b3e1-4d07-9da4-78be89e37aff][zero carb zen]] 's page on [[https://zerocarbzen.com/histamines/][histamine intolerace]]\nwhich links to [[https://selfhack.com/blog/deal-histamine/][this great post]] on the subject\n\npapers\n- alcohol can cause histamine intolerance https://academic.oup.com/alcalc/article/34/2/141/192121\n" 536870913] [108 :nodes/id "81e8e5c1-5904-4783-a9af-f129d14da743" 536870913] [108 :nodes/properties {"CATEGORY" "20210710112344-histamine_intolerance", "ID" "81e8e5c1-5904-4783-a9af-f129d14da743", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210710112344-histamine_intolerance.org", "PRIORITY" "B"} 536870913] [108 :nodes/title "histamine intolerance" 536870913] [108 :nodes/value 2.5472222566604614 536870913] [109 :nodes/content ":PROPERTIES:\n:ID:       48673a7d-7117-45ed-94da-12cc65aea6eb\n:END:\n#+title: meta rationality david chapman\n\n\n[[id:1eca4241-9815-471f-900c-d8864678ba9f][david chapman]]\n" 536870913] [109 :nodes/id "48673a7d-7117-45ed-94da-12cc65aea6eb" 536870913] [109 :nodes/properties {"CATEGORY" "20221118104244-meta_rationality_david_chapman", "ID" "48673a7d-7117-45ed-94da-12cc65aea6eb", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221118104244-meta_rationality_david_chapman.org", "PRIORITY" "B"} 536870913] [109 :nodes/title "meta rationality david chapman" 536870913] [109 :nodes/value 2.7479166984558105 536870913] [110 :nodes/content ":PROPERTIES:\n:ID:       ef0a7129-b276-48a3-8907-81dbf1596eea\n:END:\n#+title: microbiome\n" 536870913] [110 :nodes/id "ef0a7129-b276-48a3-8907-81dbf1596eea" 536870913] [110 :nodes/properties {"CATEGORY" "20220329213241-microbiome", "ID" "ef0a7129-b276-48a3-8907-81dbf1596eea", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220329213241-microbiome.org", "PRIORITY" "B"} 536870913] [110 :nodes/title "microbiome" 536870913] [110 :nodes/value 4.8595238626003265 536870913] [111 :nodes/content ":PROPERTIES:\n:ID:       a2636b35-542d-45ba-aa89-15cc269fc074\n:END:\n#+title: ruby language\n\n[[id:81a17d27-594a-4f01-9ec9-7686271bcf24][coding]]\n\nfile:///Users/kevinkrausse/Documents/projects/sendowl/coding-challenge\n\n** core documentation\nhttps://docs.ruby-lang.org/en/3.0/index.html\n\n*** modules and classes\n*self* refers to the object that defines the current scope.\n\n- classes are like modules, but can't be mixed-in to another module or class\n- The singleton class (also known as the metaclass or eigenclass)\n** ruby essentials\nhttps://www.techotopia.com/index.php/Ruby_Essentials\n\n\"Ruby is an object-oriented interpreted scripting language.\"\n\nclass variable\n- is a variable that is shared amongst all instances of a class\n- starts with @@\n\ninstance variable\n- starts with @\n** ruby wikibook\nhttps://en.wikibooks.org/wiki/Ruby_Programming\n\n*** Overview\nEvery value in Ruby is an object. Every object has a class and exactly one\nsuprclass besides BasicObject.\n\nEvery class has\n  - a set of methods which MUST BE called on an object. No statics.\n  - instance variables which are COMPLETELY PRIVATE\n\nModules\n  - has methods, just like a class, but it has no instances.\n    Instead, a module can be included, or “mixed in,” to a class, which adds the\n    methods of that module to the class.\n    - very much like inheritance but far more flexible because a class can\n      include many different modules\n    - these are great. maybe like traits. put individual features in separate\n      modules and they can be combined to make a mess like Ekata's scala Client\n      library.\n\nDynamic\n- can add methods to any class at runtime\n- dynamically typed\n- When you call a method on an object, Ruby looks up the method by name alone —\n  it doesn't care about the type of the object. This is called duck typing and\n  it lets you make classes that can pretend to be other classes, just by\n  implementing the same methods.\n- everything can be changed at runtime.\n  - classes, methods, behavior of standard library\n\nSingleton Classes\n- every object has two classes: a “regular” class and a singleton class.\n- is created per-object and is initially empty, but you can add methods, which\n  can be called on the object\n\nMetaprogramming\n- Every class is an instance of the class Class and every module is an instance\n  of the class Module.\n\nVariables and Scope\n- The name of the variable automatically determines its scope.\n- `x` is a local variable\n- `$x` is a global variable.\n- `@x` is an instance variable.\n- `@@x` is a class variable.\n\nBlocks\n- are closures\n*** Running\n`irb` - interactive ruby, repl\n`ruby script_name.rb` - run the script\n\n`puts` prints and adds a newline\n\n`print` does no newline\n\ndouble quotes you can escape stuff, single quotes you can't really escape\nanything\n\nstring interp: =\"taco #{my_variable}\"=\n\ncan also quote in other ways:\n    %q(abc) is the same as 'abc'\n    %Q(abc's) is the same as \"abc's\"\n\ncan choose your own delimiter? use %Q if you want to interpolate and not escape\n    %q!taco racko saco!\n*** objects\nin Ruby EVERYTHING is an object. No primitives like Java or C++\n\n- an object can do exactly 3 things\n  - hold state, i.e. references to other objects\n  - receive a message from itself or others\n  - in course of processing, send message to itself or others.\n\n#+begin_src ruby :results output\na = \"taco\"\nb = a\nputs b\n# add or remove the exclaimation point!\nputs a.upcase!\nputs a, b\n#+end_src\n\n#+RESULTS:\n: taco\n: TACO\n: taco\n: taco\n\nMethods that end w/ exclaimation mark modify the object\n\nMethods that do not end in an exclamation point return data, but do not modify\nthe object.\n\nObjects have\n\n*** variables\nbasic local vars start with either a lower case letter or an underscore, and\nshould contain upper or lower case letters, numbers, and underscore characters.\n\nglobals start with $\n\nAs with variables, local and class methods should start with a lower case letter.\n\nNow THIS is stupid:\n  Functions interact with blocks through `yield`.\n\n#+begin_src ruby :results output\ndef my_func\n  yield \"bongo\", 'cock'\n  yield\nend\n\nmy_func { |x, y| puts \"beust #{x}#{y}.\" }\n#+end_src\n\n#+RESULTS:\n: beust bongocock.\n: beust .\n\nconstants start w/ capital letters\n*** symbols / data types\nsee https://en.wikibooks.org/wiki/Ruby_Programming/Data_types\n\nlightweight objects that have identity\n\n#+begin_src ruby :results output\nputs \"taco\".object_id, \"taco\".object_id\nputs :taco.object_id, :taco.object_id\n#+end_src\n\n#+RESULTS:\n: 60\n: 80\n: 1045148\n: 1045148\n" 536870913] [111 :nodes/id "a2636b35-542d-45ba-aa89-15cc269fc074" 536870913] [111 :nodes/properties {"CATEGORY" "20221006154330-ruby_language", "ID" "a2636b35-542d-45ba-aa89-15cc269fc074", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221006154330-ruby_language.org", "PRIORITY" "B"} 536870913] [111 :nodes/title "ruby language" 536870913] [111 :nodes/value 2.0 536870913] [112 :nodes/content ":PROPERTIES:\n:ID:       6c6d9151-eff9-46ea-9d8b-a613f3341911\n:END:\n#+title: rapamycin\n\n[[id:f08e30aa-e83b-451f-88b7-fe954bab2f6e][supplements]]\n\ngot the idea from [[id:cd2c0a01-c5ce-4474-831f-041edee42bb3][peter attia]]\n" 536870913] [112 :nodes/id "6c6d9151-eff9-46ea-9d8b-a613f3341911" 536870913] [112 :nodes/properties {"CATEGORY" "20221211122251-rapamycin", "ID" "6c6d9151-eff9-46ea-9d8b-a613f3341911", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221211122251-rapamycin.org", "PRIORITY" "B"} 536870913] [112 :nodes/title "rapamycin" 536870913] [112 :nodes/value 2.0 536870913] [113 :nodes/content ":PROPERTIES:\n:ID:       34cf2840-1d8d-4283-b6ff-58287196b719\n:END:\n#+title: nutrient malabsorbtion\n\n[[id:4e007f1e-3e2b-4c96-98f0-58260d6ed0e2][sibo]]\n\n** basic physiology summary\nhttps://sci-hub.se/http://doi.org/10.1152/advan.00094.2009\n\n\"Since digestive lipases have adapted to being more efficient at oil-water\ninterfaces, turning dietary fat into an emulsion of fine oil\ndroplets enhances the action of lipases (4). The smaller fat\nglobules have an increased surface area and are more easily\naccessible to active pancreatic enzymes for further breakdown.\"\n** small and large intestine malabsorbtion of nutrients\nhttps://doi.org/10.3390/nu13041254\n- says fats get /emulsified/ in stomach before going into intestine!\n  - important bc I always vomit un-emulsified fat hours later!\n\n#+begin_quote\nSome conditions required for the adequate digestion of fats include\n1. the adequate hydrolysis of the substrate, dependent on a sufficient\n   concentration and mixture of pancreatic enzymes;\n2. the correct solubilization of fats in water (emulsion), which depends, in\n   turn, on the adequate synthesis, transport, and concentration of bile salts\n   in the intestinal lumen;\n3. the adequate availability of specific nutrients, especially cobalamin\n   (vitamin B12), also dependent on a sufficient secretion of intrinsic factor\n   in the stomach.\n...\nprotein\n\n1. adequate intragastric conversion of dietary proteins into amino acids, which\n   play a role in releasing cholecystokinin (CCK) from duodenal and jejunal\n   endocrine epithelial cells and releasing pancreatic enzymes to the\n   duodenojejunal lumen;\n2. an adequate concentration and mixture of pancreatic ferments with the\n   ingested nutrients;\n3. an adequate concentration of bile salts in the intestinal lumen (responsible\n   for the release of enterokinase).\n#+end_quote\n\n- Alcohol and [[id:793f1b7c-84c5-44c0-b818-80bdeb5df1cd][nicotine]] are the most prevalent risk factors for pancreatitis!\n  - after reviewing, this could actually be fucking me up /maybe/ but not likely\n  - BUT I'm doing kind of a lot? I think I do better without nicotine.\n\n- _CCK_ is released by epithelial cells of duodenum, stimulating motility of\n  intestine and gall bladder and slows gastric emptying.\n  In celiacs, CCK is not released in sufficient amounts, so indigestion happens.\n- FAT\n  - needs CCK to stimulate bile secretion and digestion.\n" 536870913] [113 :nodes/id "34cf2840-1d8d-4283-b6ff-58287196b719" 536870913] [113 :nodes/properties {"CATEGORY" "20220919002244-nutrient_malabsoarbtion", "ID" "34cf2840-1d8d-4283-b6ff-58287196b719", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220919002244-nutrient_malabsoarbtion.org", "PRIORITY" "B"} 536870913] [113 :nodes/title "nutrient malabsorbtion" 536870913] [113 :nodes/value 2.777777798473835 536870913] [114 :nodes/content ":PROPERTIES:\n:ID:       aefbec29-99b8-459f-a729-41c3d4b7270c\n:END:\n#+title: lisp\n" 536870913] [114 :nodes/id "aefbec29-99b8-459f-a729-41c3d4b7270c" 536870913] [114 :nodes/properties {"CATEGORY" "20210508120450-lisp", "ID" "aefbec29-99b8-459f-a729-41c3d4b7270c", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210508120450-lisp.org", "PRIORITY" "B"} 536870913] [114 :nodes/title "lisp" 536870913] [114 :nodes/value 3.799999952316284 536870913] [115 :nodes/content ":PROPERTIES:\n:ID:       3253ff63-9a79-48d3-94fa-efa92a369a49\n:END:\n#+title: babashka tasks\n\n* setup\n** ekata\n- [ ] list all environment's node ip's & ports to ping services\n- [X] list all pod versions for all env's\n" 536870913] [115 :nodes/id "3253ff63-9a79-48d3-94fa-efa92a369a49" 536870913] [115 :nodes/properties {"CATEGORY" "20210903140845-babashka_tasks", "ID" "3253ff63-9a79-48d3-94fa-efa92a369a49", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210903140845-babashka_tasks.org", "PRIORITY" "B"} 536870913] [115 :nodes/title "babashka tasks" 536870913] [115 :nodes/value 2.0 536870913] [116 :nodes/content ":PROPERTIES:\n:ID:       efadd1da-f54a-4cbc-bcba-ed6c349c89a5\n:END:\n#+title: patrick collison\n\nhttps://patrickcollison.com/\n\nthis seems cool! https://patrickcollison.com/travel\n\nzuck talk of progress\nhttps://www.youtube.com/watch?v=OuvrZFJLXSk\n\n** books\n[[id:876a8e7d-8daf-4e9a-9f05-30eb0ea81061][books]]\nfrom: https://patrickcollison.com/bookshelf\n\n*** \"particularly great\"\nThe Rise and Fall of American Growth - http://amazon.com/dp/0691147728\nMind-Body Problem - http://amazon.com/dp/0233977279\nPoor Charlie's Almanack - http://amazon.com/dp/157864366X\nSomething Incredibly Wonderful Happens - http://amazon.com/dp/0151008221\nHard Landing - http://amazon.com/dp/0812928350\nNixon Agonistes - http://amazon.com/dp/0618134328\nThe Dream Machine - http://amazon.com/dp/0670899763\nAge of Ambition - http://amazon.com/dp/0374280746\nIf the Universe Is Teeming with Aliens ... WHERE IS EVERYBODY? - http://amazon.com/dp/0387955011\nThe Beginning of Infinity - http://amazon.com/dp/0670022756\nThe Paris Review Interviews, I - http://amazon.com/dp/0312361750\nMindstorms - http://amazon.com/dp/0465046274\nOut of Mao's Shadow - http://amazon.com/dp/B00HUC71A8\nDemocracy in America - http://www.abebooks.com/9780451628015/Democracy-America-Abridged-Edition-Mentor-0451628012/plp\nMetamagical Themas - http://amazon.com/dp/0465045669\nDancing in the Glory of Monsters - http://amazon.com/dp/B0076M4VDC\nThe Art of Doing Science and Engineering - http://amazon.com/dp/9056995014\nA Pattern Language - http://amazon.com/dp/0195019199\n[[id:e081a0db-45ce-482b-adf6-540cd7acfba5][paradigms of artificial intelligence programming (paip) by peter norvig]]\nAnthropic Bias - http://amazon.com/dp/B00FVTSFK2\n*** \"substantially above average\"\nPacific - http://amazon.com/dp/0062315412\nMen, Machines, and Modern Times - http://amazon.com/dp/0262630184\nOrality and Literacy: 30th Anniversary Edition (New Accents) - http://amazon.com/dp/0415538386\nNixonland - http://amazon.com/dp/0743243021\nThe Cowshed - http://amazon.com/dp/1590179269\nThe Journalist And The Murderer - http://amazon.com/dp/0394583124\nThe Hunters - http://amazon.com/dp/1619020548\nWhole Earth Discipline - http://amazon.com/dp/0670021210\nThe feminine mystique - http://amazon.com/dp/B0007EA5ZO\nSpacetime and Geometry - http://amazon.com/dp/0805387323\nThe Princeton Companion to Applied Mathematics - http://amazon.com/dp/0691150397\nA Decade of Research - http://amazon.com/dp/0835213277\nThe Planet Remade - http://amazon.com/dp/0691148252\nThe Long Way - http://amazon.com/dp/0924486848\nGlobal Catastrophic Risks - http://amazon.com/dp/0199606501\nToward a Theory of Instruction - http://amazon.com/dp/0674897005\nMyth of the Machine  - http://amazon.com/dp/0156623412\nSeason of the Witch - http://amazon.com/dp/B00BR5KABQ\nStories of Your Life and Others - http://amazon.com/dp/B0048EKOP0\nFoucault's Pendulum By Umberto Eco - http://amazon.com/dp/B004S7XVKM\nThe Adventures of Hajji Baba of Ispahan - http://amazon.com/dp/1508844976\nOn the Shortness of Life - http://amazon.com/dp/0143036327\nPlato at the Googleplex - http://amazon.com/dp/0307378195\nA Vast Machine - http://amazon.com/dp/0262518635\nWeather of the San Francisco Bay Region - http://amazon.com/dp/0520229908\nScience - http://amazon.com/dp/0140297413\nOcean Flying - http://amazon.com/dp/0070544050\nMedieval Technology and Social Change - http://amazon.com/dp/B008XZXJYI\nChina Airborne - 12 edition - http://www.textbooks.com/China-Airborne-12-Edition/9780375422119/Fallows-james.php?CSID=A2DWJOZBBQUBAU2UCUMQQTSCB&CSID=A2DWJOJJTSJ3CAMCOAAUDQSDB\nThe Man Behind the Microchip - http://amazon.com/dp/019531199X\nThe Old Way - http://amazon.com/dp/0374225524\nIn the Footsteps of Mr. Kurtz - http://amazon.com/dp/0060188804\nPostcards from Tomorrow Square - http://amazon.com/dp/0307456242\nI Didn't Do It for You - http://amazon.com/dp/0060780924\nOn Lisp - http://amazon.com/dp/0130305529\nMatterhorn - http://amazon.com/dp/080211928X\nStuff Matters - http://amazon.com/dp/0544236041\nExpert Political Judgment - http://amazon.com/dp/0691123020\nA course in mathematical analysis - http://amazon.com/dp/1418181781\nJustice as Fairness - http://amazon.com/dp/0674005112\nThe City in History - http://amazon.com/dp/0156180359\nPopper Selections - http://amazon.com/dp/0691020310\nAmusing Ourselves to Death - http://amazon.com/dp/014303653X\nThe Nature of Mathematical Modeling - http://amazon.com/dp/0521570956\nStructure and Interpretation of Computer Programs - http://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Dstripbooks&field-keywords=ISBN-13%3A+978-0262510875\nDealers of Lightning - http://amazon.com/dp/0887308910\nFeynman Lectures on Computation - http://amazon.com/dp/0201489910\nStructure and Interpretation of Classical Mechanics - http://amazon.com/dp/0262194554\nTechnics and Civilization - http://amazon.com/dp/0710018703\nThe Chip - http://amazon.com/dp/0671453939\nLongitude - http://amazon.com/dp/0802713122\nPlagues and Peoples - http://amazon.com/dp/0385121229\nThe Scramble for Africa - http://amazon.com/dp/0394515765\nThe Arabs - http://amazon.com/dp/B007TV0PJE\nMoral Mazes - http://amazon.com/dp/0199729883\nThe Ocean of Life - http://amazon.com/dp/067002354X\nThe Educated Mind - http://amazon.com/dp/0226190390\nIncompleteness - http://amazon.com/dp/0393051692\nDracula - http://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Dstripbooks&field-keywords=ISBN-13%3A+978-0140433814\nMidnight's Children - http://amazon.com/dp/0812976533\nOn Intelligence - http://amazon.com/dp/0805074562\nQuantum Computing since Democritus - http://amazon.com/dp/0521199565\nWind, Sand and Stars - http://amazon.com/dp/0156027496\nThe Big Score - http://amazon.com/dp/0385183518\nRiver Town - http://amazon.com/dp/0060855029\nA Great Leap Forward - http://amazon.com/dp/0300188161\nBusiness Adventures - http://amazon.com/dp/1497644895\nComputer Lib/Dream Machines - http://amazon.com/dp/0914845497\nSum - http://amazon.com/dp/0307389936\nThe Count of Monte Cristo - http://amazon.com/dp/0307271129\nAsimov's New Guide to Science - http://amazon.com/dp/0140172130\n** podcast w/ tim ferris\n[[id:add2a593-5edf-477a-aa2a-30fef8a4ad26][tim ferriss]]\n\n[[id:876a8e7d-8daf-4e9a-9f05-30eb0ea81061][books]] recs:\n  the inner game of tennis\n  - about decision making\n  Science & engineering -- richard hamming\n  - on there is also [[id:a98f2385-5e5e-40fd-b70e-828f71d2af8d][Changing World Order Ray Dalio]]\n\n- cool lists on twitter\n\n- increase GDP of internet\n\n- do more strange things / different from ppl around you\n\n- hamilton morris should make a podcast!\n\nhow his parents raised him!\n\n** questions\nhttps://patrickcollison.com/questions\nThis is really good and I want to replicate on my blog.\n- AI suggestions for next things you are going to do seems really interesting.\n  Would be so cool if you could have a local ML thing that starts predicting\n  what key codes you're gonna do.\n  But how do you integrate that to actually improve your experience?\n  It's not like it can just automatically start doing stuff for you. That would\n  be annoying.\n  Maybe a popup suggestion thing?\n" 536870913] [116 :nodes/id "efadd1da-f54a-4cbc-bcba-ed6c349c89a5" 536870913] [116 :nodes/properties {"CATEGORY" "20220822193419-patrick_collison", "ID" "efadd1da-f54a-4cbc-bcba-ed6c349c89a5", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220822193419-patrick_collison.org", "PRIORITY" "B"} 536870913] [116 :nodes/title "patrick collison" 536870913] [116 :nodes/value 3.7479166984558105 536870913] [117 :nodes/content ":PROPERTIES:\n:ID:       3be9fb0e-7384-4d63-a57a-eb62fd89ccc8\n:END:\n#+title: folate\n\n[[id:b77d4578-bc50-42a8-94c4-b11d27f78837][food]]\n[[id:34cf2840-1d8d-4283-b6ff-58287196b719][nutrient malabsorbtion]]\n\n** Folate Status Response to Controlled Folate Intake Is Affected by the Methylenetetrahydrofolate Reductase 677C3T Polymorphism in Young Women\nhttps://sci-hub.se/http://dx.doi.org/10.1093/jn/133.12.4107\n\n- folate depletion was at 115 micrograms! I'm not getting close to that even!\n  - likely my microbiome is fucked so I'm not producing it either\n- higher homocystine. I had this on my bloodwork!\n  - I also had low b12 which is very strange considering amound of meat I ate\n" 536870913] [117 :nodes/id "3be9fb0e-7384-4d63-a57a-eb62fd89ccc8" 536870913] [117 :nodes/properties {"CATEGORY" "20220924095847-folate", "ID" "3be9fb0e-7384-4d63-a57a-eb62fd89ccc8", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220924095847-folate.org", "PRIORITY" "B"} 536870913] [117 :nodes/title "folate" 536870913] [117 :nodes/value 2.095238097012043 536870913] [118 :nodes/content ":PROPERTIES:\n:ID:       f7dfa9ae-e487-4390-b9d1-2f0db4ea7c11\n:END:\n#+title: using docker desktop\n\nto kill everything\n#+begin_src bash\n# Stop all containers\ndocker stop $(docker ps -a -q)\n# Remove all the containers\ndocker rm $(docker ps -a -q)\n#+end_src\n" 536870913] [118 :nodes/id "f7dfa9ae-e487-4390-b9d1-2f0db4ea7c11" 536870913] [118 :nodes/properties {"CATEGORY" "20220204100056-using_docker_desktop", "ID" "f7dfa9ae-e487-4390-b9d1-2f0db4ea7c11", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220204100056-using_docker_desktop.org", "PRIORITY" "B"} 536870913] [118 :nodes/title "using docker desktop" 536870913] [118 :nodes/value 2.0 536870913] [119 :nodes/content ":PROPERTIES:\n:ID:       d295f68e-a5d2-4081-90c5-e6aa1eb47b11\n:END:\n#+title: blogs\n\nindex for all literature I wanna look into.\n\nStill idk how to make literature pages. if I should just put the links directly,\nor should do something else\n\n[[id:c7f85840-11a5-4b2c-b574-0c8a028f6a7e][clojure]]\n[[id:b77d4578-bc50-42a8-94c4-b11d27f78837][food]]\n[[id:3b618cff-e581-4cf0-b16b-91e563e72436][econ-geopolitics]]\n\nhttp://www.aaronsw.com/weblog/rawnerve\n[[id:c8f29f62-436a-43e8-a4ef-b0eee15ab5b3][sam altman]]\n\ncool old-school programmer guy. made emacsql. https://nullprogram.com/blog/2014/02/06/\n" 536870913] [119 :nodes/id "d295f68e-a5d2-4081-90c5-e6aa1eb47b11" 536870913] [119 :nodes/properties {"CATEGORY" "20210318210901-blogs", "ID" "d295f68e-a5d2-4081-90c5-e6aa1eb47b11", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210318210901-blogs.org", "PRIORITY" "B"} 536870913] [119 :nodes/title "blogs" 536870913] [119 :nodes/value 2.783333331346512 536870913] [120 :nodes/content ":PROPERTIES:\n:ID:       af90c362-ba7e-42d8-8a62-017d2749d784\n:END:\n#+title: A Review of Issues of Dietary Protein Intake in Humans by Shane Bilsborough and Neil Mann\n\n[[id:5cd35f00-71bc-47f2-b256-8830189ba73e][fat and protein]]\n\nhttps://doi.org/10.1123/IJSNEM.16.2.129\n\n\nfrom 2006 so idk\n\nRDA is 0.63 g/kg for median estimated average requirement (EAR), but 0.8 for\n97.5% so I might need even less!!\n\nshame:\n\n#+begin_quote\nthe minimum daily carbohydrate requirement for tissues, which are obligate users\nof glucose for energy, can be determined at approximately 100 to 200 g glucose/d (4)\n#+end_quote\n\nI actually wanted to trash this article after reading that, but I want to hear\nwhat they have to say about max protein absoarbtion. I think this could have\nsomething to do with why I seem to get massive headaches whenever I have too\nmuch protein. Especially well-cooked protein.\n\nEstimated requirement for strength atheletes 1.4 to 1.8 g. Subtract 0.2 for\nendurance.\n\nThere's not actually a lot of good data about max protein absoarbtion in grams\nper hour.\n\nConversion from ammonia (from amino acids) to urea is limited in the liver.\n\nA 80kg person could deaminate 221-301g protein per day. However, safe intake\nlevel could be slightly higher as not all protein is deaminated (and converted\nto urea). They consider the RDA to account for purely structural needs. So\ntheoretically, you could add the US RDA to this (which is 64g for 80kg person).\nBut this is still dangerous.\n\n#+begin_quote\nHence, for an 80 kg individual, 285 g protein per day should be viewed as an\nabsolute maximum. Even this amount would be equivalent to the consumption of\napproxi- mately 1 kg of lean meat per day.\n#+end_quote\n\nThis is crazy! I was eating like way more than this sometimes! Stefansson\n(72.5kg) actually got sick during the first three days of his hospital\nexperiment bc he had 264 g/d of protein.\n\nThey go on to say you could have half that and get some benefits from using\nprotein as energy:\n\n#+begin_quote\nThe advantage being that this protein could displace fat or carbohydrate from\nthe diet, increase satiety (plus yield less energy due to its higher rate of\nthermogenesis) thus helping in weight control, a controversial but promising\narea of research and will be discussed later.\n#+end_quote\n\nBut I personally think using protein as energy makes me feel like shit.\n\nOther animal carnivores upregulate protein-breakdown pathway enzymes, but...\n\n#+begin_quote\nOther studies, however, show that when animals are faced with large protein\nloads, the rate of gastric emptying is reduced as the catabolic and anabolic\nsystems of the body become saturated, unable to deal with an excess of dietary\nnitrogen under acute conditions (32)... To what degree do these processes\ntranspire in humans, and at what threshold intake of protein is currently\nunknown as very little data have been collected on humans consuming high protein\ndiets for prolonged periods of time.\n#+end_quote\n\nSo maybe this is why I do better with rendered fat if it's alongside some meat!\n\n\n\nprotein absoarbtion\n\nThere aren't very good studies on this. They kind of have to go about it in a\nroundabout way and guess.\n\nFor tenderloin pork, they gave them some pork and then looked at the\npostprandial blood amino acid profile. Then they injected that mixed amino acid\nprofile into subjects at various rates (6, 10, and 14 g/h). The subsequent blood\nprofile matching the one of the ingested steak was 10 g/h. So maybe we assume a\nmeal of 36 g of protein and 20 g fat would be absoarbed at 10 g/h, i.e. it'd be\nfully absoarbed after 3.6 hours.\n\nWhey is 8-10g/h, casein is ~6.1.\n\nHe has a table!!\n\nRaw egg protein is extremely slow! Cooked is over 2x better. He doesn't have\nmeat to compare to this stuff tho :/.\n\nThis is quite slow compared to fat ~0.175g ∙ kg^-1 ∙h^-1 (~14g/h) and glucose\n0.8-1.2g carb ∙ kg-1 ∙ h-1 (60-100g/h) for an 80 kg individual\n" 536870913] [120 :nodes/id "af90c362-ba7e-42d8-8a62-017d2749d784" 536870913] [120 :nodes/properties {"CATEGORY" "20221119141013-a_review_of_issues_of_dietary_protein_intake_in_humans_by_shane_bilsborough_and_neil_mann", "ID" "af90c362-ba7e-42d8-8a62-017d2749d784", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221119141013-a_review_of_issues_of_dietary_protein_intake_in_humans_by_shane_bilsborough_and_neil_mann.org", "PRIORITY" "B"} 536870913] [120 :nodes/title "A Review of Issues of Dietary Protein Intake in Humans by Shane Bilsborough and Neil Mann" 536870913] [120 :nodes/value 2.745238073170185 536870913] [121 :nodes/content ":PROPERTIES:\n:ID:       41037687-6d0b-466d-8ca7-1528b74c9eff\n:END:\n#+title: paredit mode\n\n[[id:e5e65dfc-85e0-4c9a-986c-14db1deaf453][evil keybindings]]\n\nTODO:\n- review [[https://github.com/Fuco1/smartparens/wiki/Quick-tour][smartparens quick tour]]\n- and [[https://github.com/expez/evil-smartparens][this]] for lang-specific configs\nseems like there's not a widespread keybinding default, most ppl just make their own mappings\nthis [[https://www.reddit.com/r/emacs/comments/b9ubvn/evil_smartparens_what_keybindings_do_you_use/][redit thread]] is useful\n\n=set-transient-keymap= might be the move\n- this would be in a minor mode\n\nfinished! was actually super easy using minor mode plus =evil-define-minor-mode-key=\n\nalso used [[https://github.com/noctuid/general.el#override-keymaps-and-buffer-local-keybindings][general.el]] for keymaps\n" 536870913] [121 :nodes/id "41037687-6d0b-466d-8ca7-1528b74c9eff" 536870913] [121 :nodes/properties {"CATEGORY" "20210327091753-paredit_mode", "ID" "41037687-6d0b-466d-8ca7-1528b74c9eff", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210327091753-paredit_mode.org", "PRIORITY" "B"} 536870913] [121 :nodes/title "paredit mode" 536870913] [121 :nodes/value 2.0 536870913] [122 :nodes/content ":PROPERTIES:\n:ID:       9d53a16a-8849-42fc-a9cb-a0fdee24a61e\n:END:\n#+title: seed oils\n\n[[id:406a4a8d-4aa4-4538-9294-0a6097df0cc5][Peter Dobromylskyj]]\n[[id:d479f2d2-0cbb-4c91-a263-2ab6f504ca78][tucker goodrich]]\n[[id:31fde7cb-45ac-4656-8eb5-67b0406794e0][fire in a bottle]]\n\nAre all talkers of this. But I want to have a unified theory.\n\nSo Peter basically says that linoleic acids don't produce as much ROS, and\ntherefore cause the fat cells to absoarb more fat than they would otherwise\n(that is, stay insulin sensitive). Basically, seed oils are no big deal, they\njust make you fat and tired.\n\nTucker thinks they get in your shit and fuck you up and cause all sorts of\noxidative damage bc these polyunsaturated fats will get incorperated into your\nmembraines and then explode at the first hint of oxidation and bring the whole\nstructure down with it.\n\nThis has a good overview of the two broad seed oil theories and has some\ninteresting stuff about fat and protein\nhttps://free2z.com/ambimorph/zpage/carbosis-and-the-seed-oil-theory-part-i\nSame author as ketotic, but this is much more recent. Fun fact, the founder\nof zcash, zooko, is her spouse and co-authored the ketotic blog.\n\nAfaik, Peter  Dobromylskyj, Tucker Goodrich, and Brad Marshall seem to be pretty\ngood resources on the seed oil theories and are most of who I've read on the\nsubject. All are pretty active on twitter too.\n\nFor Peter (my favorite), she just links to Peter's first Proton's post, but that\nblog series is 70 posts long and spans over 10 years, so maybe not best to\nstart. I think miracle of Safflower oil\nhttps://high-fat-nutrition.blogspot.com/2020/04/the-miracle-of-safflower-oil.html\ngets to his ideas the fastest, but I'm not sure if they're necessarily the best\nat confincing you of the ideas. I guess the Peter theory is tough because I\ndon't know of a distilled version of it.\n(Also, if you liked the other germ-free rat post,\nhttps://high-fat-nutrition.blogspot.com/2007/12/fiaf-whos-fat-is-it-anyway.html).\n\nFor Tucker I think the post she links is pretty good. He's kinda all over the place\nand difficult to follow. Posts way too much on twitter, but some content is cool\nlike https://twitter.com/TuckerGoodrich/status/1658944353887457280.\n" 536870913] [122 :nodes/id "9d53a16a-8849-42fc-a9cb-a0fdee24a61e" 536870913] [122 :nodes/properties {"CATEGORY" "20230522204427-seed_oils", "ID" "9d53a16a-8849-42fc-a9cb-a0fdee24a61e", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20230522204427-seed_oils.org", "PRIORITY" "B"} 536870913] [122 :nodes/title "seed oils" 536870913] [122 :nodes/value 2.0 536870913] [123 :nodes/content ":PROPERTIES:\n:ID:       75767c4c-6d11-4e9f-b3c5-ebdc81fce3ce\n:END:\n#+title: collagen\n\nmainly interested in the hydrolysed form.\n\n** Functional and bioactive properties of collagen and gelatin from alternative sources: A review\nhttps://doi.org/10.1016/j.foodhyd.2011.02.007\n\nreferring (i think) specifically to hydrolysed versions:\n\n\"These peptides have repeated unique Gly-Pro-Hyp sequences in their structure,\nand the observed antioxidative and antihypertensive properties have presumably\nbeen associated with this unique amino acid composition\"\n\nand\n\n\"antimicrobial activity, mineral binding capacity, the lipid-lowering effect,\nimmunomodulatory activity and beneficial effects on skin, bone or joint health\"\n\nApparently anti-microbial peptides (AMPs) are produced in a lot of fish!\n" 536870913] [123 :nodes/id "75767c4c-6d11-4e9f-b3c5-ebdc81fce3ce" 536870913] [123 :nodes/properties {"CATEGORY" "20221016194727-collagen", "ID" "75767c4c-6d11-4e9f-b3c5-ebdc81fce3ce", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221016194727-collagen.org", "PRIORITY" "B"} 536870913] [123 :nodes/title "collagen" 536870913] [123 :nodes/value 2.142857201397419 536870913] [124 :nodes/content ":PROPERTIES:\n:ID:       56b4adf3-311c-47ad-ac9a-63e256d00d9a\n:END:\n#+title: brian armstrong\n\n- Ray Dalio's new book!\n\nfounder of coinbase\n\n** lex freidman interview oct 2022\n- on hiring\n- think about job. what do they need to accomplish\n  - tell me a time you did x\n- tell me about the hardest problem you had to solve and why and what you had to\n  do and get it done\n\n- looking for concise communicators. some people ramble on\n  5-10 minutes. Wants a clear straight answer.\n  - humility - tell me a time something went wrong.\n\n- lots of ppl wanna have impact on the world\n  - people have more power than they realize\n" 536870913] [124 :nodes/id "56b4adf3-311c-47ad-ac9a-63e256d00d9a" 536870913] [124 :nodes/properties {"CATEGORY" "20221014021927-brian_armstrong", "ID" "56b4adf3-311c-47ad-ac9a-63e256d00d9a", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221014021927-brian_armstrong.org", "PRIORITY" "B"} 536870913] [124 :nodes/title "brian armstrong" 536870913] [124 :nodes/value 2.8729166984558105 536870913] [125 :nodes/content ":PROPERTIES:\n:ID:       2845a5da-3aca-4b88-85cb-f8382c6fa7bd\n:END:\n#+title: my take on crypto\n\n[[id:4c761d6c-e68a-45a2-90d6-62b47c45e0aa][crypto]]\n\nFor blockchain tech, decentralized apps, etc.\n\nis it worth it?\nis it something that's actually valueable?\nwill it someday be a big part of people's lives?\n\n- big companies controlling million's of people's attention and knowledge is a\n  problem.\n  - dapps could help with that\n  - imagine a world where no one has control.\n    - But will people actually forsake conventional platforms for this?\n    - do they care enough?\n\n- identity problem\n  - many apps need to be able to have trusted identity of people. That's what\n    credit cards solve. They are attached to an identity.\n\n- the zcash approach could be huge if crypto is actually adopted.\n" 536870913] [125 :nodes/id "2845a5da-3aca-4b88-85cb-f8382c6fa7bd" 536870913] [125 :nodes/properties {"CATEGORY" "20220302013135-my_take_on_crypto", "ID" "2845a5da-3aca-4b88-85cb-f8382c6fa7bd", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220302013135-my_take_on_crypto.org", "PRIORITY" "B"} 536870913] [125 :nodes/title "my take on crypto" 536870913] [125 :nodes/value 2.0 536870913] [126 :nodes/content ":PROPERTIES:\n:ID:       13b73a91-e91e-47e8-a06c-76bced4bc9cc\n:END:\n#+title: designing data intensive applications kleppmann\n\n[[id:81a17d27-594a-4f01-9ec9-7686271bcf24][coding]]\n" 536870913] [126 :nodes/id "13b73a91-e91e-47e8-a06c-76bced4bc9cc" 536870913] [126 :nodes/properties {"CATEGORY" "20220819214606-designing_data_intensive_applications_kleppmann", "ID" "13b73a91-e91e-47e8-a06c-76bced4bc9cc", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220819214606-designing_data_intensive_applications_kleppmann.org", "PRIORITY" "B"} 536870913] [126 :nodes/title "designing data intensive applications kleppmann" 536870913] [126 :nodes/value 2.0 536870913] [127 :nodes/content ":PROPERTIES:\n:ID:       81a17d27-594a-4f01-9ec9-7686271bcf24\n:END:\n#+title: coding\n" 536870913] [127 :nodes/id "81a17d27-594a-4f01-9ec9-7686271bcf24" 536870913] [127 :nodes/properties {"CATEGORY" "20220819214618-coding", "ID" "81a17d27-594a-4f01-9ec9-7686271bcf24", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220819214618-coding.org", "PRIORITY" "B"} 536870913] [127 :nodes/title "coding" 536870913] [127 :nodes/value 14.755555421113968 536870913] [128 :nodes/content ":PROPERTIES:\n:ID:       c48f4cd0-e81e-4577-8376-9cff30d43ff7\n:END:\n#+title: pattern recognition and machine learning bishop\n\n[[id:876a8e7d-8daf-4e9a-9f05-30eb0ea81061][books]] [[id:82ed419e-60ed-4740-b670-87b433aa49c8][sabbatical 2022]] [[id:ea23ff75-2ef5-4333-9fc8-2432a196891c][machine learning]]\n\n- ways of doing latex:\n  - If $a^2=b$ and \\( b=2 \\), then the solution must be\n     either $$ a=+\\sqrt{2} $$ or \\[ a=-\\sqrt{2} \\].\n  - inline result with =org-latex-preview=\n\n* chapter 1\nprior probability\n\n$$\np(\\textbf{w}|\\mathcal{D}) = \\frac{p(\\mathcal{D}|\\textbf{w})p(\\textbf{w})}{p(\\mathcal{D})}\n$$\n\n#+begin_src python\nreturn (28.0 * 2 / 16.0)\n#+end_src\n\n#+RESULTS:\n: 3.5\n" 536870913] [128 :nodes/id "c48f4cd0-e81e-4577-8376-9cff30d43ff7" 536870913] [128 :nodes/properties {"CATEGORY" "20220717093128-pattern_recognition_and_machine_learning_bishop", "ID" "c48f4cd0-e81e-4577-8376-9cff30d43ff7", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220717093128-pattern_recognition_and_machine_learning_bishop.org", "PRIORITY" "B"} 536870913] [128 :nodes/title "pattern recognition and machine learning bishop" 536870913] [128 :nodes/value 2.375 536870913] [129 :nodes/content ":PROPERTIES:\n:ID:       a5b210c1-8236-4e1f-8a96-f10047885e5f\n:END:\n#+title: databases\n" 536870913] [129 :nodes/id "a5b210c1-8236-4e1f-8a96-f10047885e5f" 536870913] [129 :nodes/properties {"CATEGORY" "20210413170525-databases", "ID" "a5b210c1-8236-4e1f-8a96-f10047885e5f", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210413170525-databases.org", "PRIORITY" "B"} 536870913] [129 :nodes/title "databases" 536870913] [129 :nodes/value 5.249999940395355 536870913] [130 :nodes/content ":PROPERTIES:\n:ID:       86759b32-8df1-43b4-8b37-3b9b6a2dfb95\n:END:\n#+title: argo api\n\nRun\n\n#+begin_src bash\nSECRET=$(kubectl get sa default -o=jsonpath='{.secrets[0].name}')\nARGO_TOKEN=\"Bearer $(kubectl get secret $SECRET -o=jsonpath='{.data.token}' | base64 --decode)\"\necho $ARGO_TOKEN\n#+end_src\n\nto get the argo token.\nThen try\n\n#+begin_src bash\ncurl https://argocd.us-west-2.utility.pages/api/v1/settings -H \"Authorization: $ARGO_TOKEN\"\n#+end_src\n\nto see if it works!\n" 536870913] [130 :nodes/id "86759b32-8df1-43b4-8b37-3b9b6a2dfb95" 536870913] [130 :nodes/properties {"CATEGORY" "20220209135731-argo_api", "ID" "86759b32-8df1-43b4-8b37-3b9b6a2dfb95", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220209135731-argo_api.org", "PRIORITY" "B"} 536870913] [130 :nodes/title "argo api" 536870913] [130 :nodes/value 2.0 536870913] [131 :nodes/content ":PROPERTIES:\n:ID:       7b2d57bc-1f3c-4ab6-a4d6-b557cc1a7259\n:ROAM_ALIASES: bel\n:END:\n#+title: bel lang\n\n[[id:269bc84d-7abe-4059-a90a-f35c254bddfb][paul graham]]\n\nhttp://www.paulgraham.com/bel.html\n\n[[https://sep.yimg.com/ty/cdn/paulgraham/bellanguage.txt?t=1595850613&][guide]] [[https://sep.yimg.com/ty/cdn/paulgraham/bel.bel?t=1595850613&][source]]\n\n\nsource file [[id:53e3138a-6619-4fd5-82ee-1c6c95aaf864][bel lang source]]\n\n#+begin_src bash :results output\n curl \"https://sep.yimg.com/ty/cdn/paulgraham/bellanguage.txt?t=1595850613&\"\n#+end_src\n\n\n﻿The Bel Language   12 Oct 2019\n\n\nIn 1960 John McCarthy described a new type of programming language\ncalled Lisp. I say \"new type\" because Lisp represented not just a new\nlanguage but a new way of describing languages. He defined Lisp by\nstarting with a small set of operators, akin to axioms, and then\nusing them to write an interpreter for the language in itself.\n\nHis goal was not to define a programming language in our sense of\nthe word: a language used to tell computers what to do. The Lisp\nin his 1960 paper was meant to be a formal model of computation,\nlike a Turing Machine. McCarthy didn't realize it could be used on\ncomputers till his graduate student Steve Russell suggested it.\n\nThe Lisp in the 1960 paper was missing features you'd need in a\nprogramming language. There were no numbers, for example, or errors,\nor I/O. So when people used it as the basis for languages used to\nprogram computers, such things had to be added. And when they were,\nthe axiomatic approach was dropped.\n\nSo the development of Lisp happened in two parts (though they seem\nto have been interleaved somewhat): a formal phase, represented by\nthe 1960 paper, and an implementation phase, in which this language\nwas adapted and extended to run on computers. Most of the work, as\nmeasured by features, took place in the implementation phase. The\nLisp in the 1960 paper, translated into Common Lisp, is only 53 lines\nof code. It does only as much as it has to in order to interpret\nexpressions. Everything else got added in the implementation phase.\n\nMy hypothesis is that, though an accident of history, it was a good\nthing for Lisp that its development happened in two phases-- that\nthe initial exercise of defining the language by writing an\ninterpreter for it in itself is responsible for a lot of Lisp's best\nqualities. And if so, why not do more of it?\n\nBel is an attempt to answer the question: what happens if, instead of\nswitching from the formal to the implementation phase as soon as\npossible, you try to delay that switch for as long as possible? If\nyou keep using the axiomatic approach till you have something close\nto a complete programming language, what axioms do you need, and what\ndoes the resulting language look like?\n\nI want to be clear about what Bel is and isn't. Although it has a lot\nmore features than McCarthy's 1960 Lisp, it's still only the product\nof the formal phase. This is not a language you can use to program\ncomputers, just as the Lisp in the 1960 paper wasn't. Mainly because,\nlike McCarthy's Lisp, it is not at all concerned with efficiency.\nWhen I define append in Bel, I'm saying what append means, not trying\nto provide an efficient implementation of it.\n\nWhy do this? Why prolong the formal phase? One answer is that it's\nan interesting exercise in itself to see where the axiomatic approach\nleads. If computers were as powerful as we wanted, what would\nlanguages look like?\n\nBut I also believe that it will be possible to write efficient\nimplementations based on Bel, by adding restrictions. If you want a\nlanguage with expressive power, clarity, and efficiency, it may work\nbetter to start with expressive power and clarity, and then add\nrestrictions, than to approach from another direction.\n\nSo if you'd like to try writing an implementation based on Bel,\nplease do. I'll be one of your first users.\n\nI've ended up reproducing a number of things in previous dialects.\nEither their designers got it right, or I'm too influenced by\ndialects I've used to see the right answer; time will tell. I've also\ntried to avoid gratuitous departures from existing Lisp conventions.\nWhich means if you see a departure from existing conventions, there\nis probably a reason for it.\n\n\n\nData\n\nBel has four fundamental data types: symbols, pairs, characters, and\nstreams.\n\nSymbols are words:\n\nfoo\n\nThe names of symbols are case-sensitive, so foo and Foo are distinct\nsymbols.\n\nPairs are pairs of any two things, and are represented thus:\n\n(foo . bar)\n\nThat's a pair of two symbols, foo and bar, but the two halves of a\npair can be anything, including pairs:\n\n(foo . (bar . baz))\n\nThat's a pair of the symbol foo, and the pair (bar . baz).\n\nA character is represented by prepending a backslash to its name. So\nthe letter a is represented as\n\n\\a\n\nCharacters that aren't letters may have longer names. For example the\nbell character, after which Bel is named, is\n\n\\bel\n\nThere is no way of representing a stream. If Bel has to display a\nstream, it prints something that will cause an error if it's read\nback in.\n\nAnything that's not a pair is called an atom. So symbols, characters,\nand streams are atoms.\n\nInstances of the four fundamental types are called objects.\n\n\nLists\n\nWe can use pairs to build lots of different data structures, but the\nmost fundamental way they're used is to make lists, as follows:\n\n1. The symbol nil represents the empty list.\n\n2. If y is a list, then the pair (x . y) is a list of x followed by\n   the elements of y.\n\nHere's a list made from a pair:\n\n(a . nil)\n\nAccording to rule 2, this is a list of the symbol a followed by the\nelements of nil, of which according to rule 1 there are none. So it\nis a list of one element, the symbol a.\n\nBy nesting such pairs we can create lists of any length. Here is a\nlist of two elements, the symbols a and b:\n\n(a . (b . nil))\n\nAnd here is a list of a, b, and c:\n\n(a . (b . (c . nil)))\n\nThis would be an awkward way to express lists, but there is an\nabbreviated notation that's more convenient:\n\n1. The symbol nil can also be represented as ().\n\n2. When the second half of a pair is a list, you can omit the dot\n   before it and the parentheses around it. So (a . (b ...)) can\n   be written as (a b ...).\n\nBy repeated application of these two rules we can transform\n\n(a . (b . (c . nil)))\n\ninto\n\n(a b c)\n\nIn other words, a list can be expressed as its elements within\nparentheses. You wouldn't use dot notation for a list like (a b c)\nunless there was some special reason to.\n\nBecause any object can be part of a pair, the elements of lists can\nthemselves be lists. All these are lists too:\n\n(a (b) c)\n\n((a b c))\n\n(nil)\n\nPairs like these, where if you keep looking at the second half you\neventually hit a nil, are called proper lists. This is a proper\nlist:\n\n(a b c)\n\nand this is not:\n\n(a b . c)\n\nThe empty list is also a proper list.\n\nA pair that's not a proper list is called a dotted list (because\nyou need to use dot notation to represent it).\n\nA proper list of characters is called a string, and can also be\nrepresented as those characters within double-quotes. So the list\n\n(\\h \\e \\l \\l \\o)\n\ncan also be represented as\n\n\"hello\"\n\nand will when possible be displayed that way.\n\n\nTruth\n\nThe symbol nil represents falsity as well as the empty list. The\nsymbol t is the default representation for truth, but any object\nother than nil also counts as true.\n\nIt may seem strange to use the same value to represent both falsity\nand the empty list, but in practice it works well. Lisp functions\noften return sets of answers, and the empty set of answers is\nfalsity.\n\n\nFunctions\n\nBel programs consist mostly of functions. Functions take zero or more\nobjects as arguments, perhaps do something (e.g. print a message),\nand return one object.\n\nFunctions are represented using lists. For example, here is a\nfunction that takes one argument, and returns that plus 1.\n\n(lit clo nil (x) (+ x 1))\n\nThe first element, lit, says that this is a literal object, not to be\nevaluated.\n\nThe second, clo, says what kind of literal it is: a closure.\n\nThe third is the local enviroment, a list of variables that already\nhave values from having been parameters of functions. This example\nhas an empty environment.\n\nThe fourth, (x), is the function's parameters. When the function is\ncalled, the value of x will be whatever it was called with.\n\nThe fifth and last element, (+ x 1), defines the value that the\nfunction returns.\n\nYou would not ordinarily express a function using its literal\nrepresentation. Usually you'd say\n\n(fn (x) (+ x 1))\n\nwhich yields the function above.\n\n\nEvaluation\n\nThe execution of a Bel program consists of the evaluation of\nexpressions. All Bel objects are expressions, so the word \"expression\"\nis merely a statement of intention: it means an object that you\nexpect to be evaluated.\n\nWhen an expression is evaluated, there are three possible outcomes:\n\n1. It can return a value: (+ 1 2) returns 3.\n\n2. It can cause an error: (/ 1 0) will.\n\n3. It can fail to terminate: (while t) will.\n\nSome expressions also do things in the process of being evaluated.\nFor example,\n\n(prn 1)\n\nwill return 1, but before doing so will print it.\n\nSome atoms evaluate to themselves. All characters and streams do,\nalong with the symbols nil, t, o, and apply. All other symbols\nare variable names, and either evaluate to some value, or cause an\nerror if they don't have a value.\n\nA proper list whose first element evaluates to a function is called\na function call. For example, the expression\n\n(+ x 1)\n\nis a function call, because the value of + is a function. The value\nof a function call is the object that the function returns.\n\nFunction calls are evaluated left to right. For example, when\n\n(+ 8 5)\n\nis evaluated,\n\n1. First + is evaluated, returning a function that returns the sum\n   of its arguments.\n\n2. Then 8 is evaluated, returning itself.\n\n3. Then 5 is evaluated, also returning itself.\n\n4. Finally, the two numbers are passed to the function, which returns\n   13.\n\nIf we want to show what expressions evaluate to, it's conventional to\nshow them being evaluated in a repl:\n\n> (+ 8 5)\n13\n\nExpressions can be nested. The rule of evaluating left to right means\nthat nested function calls are evaluated depth-first. For example,\nwhen\n\n(+ (- 5 2) 7)\n\nis evaluated, the subexpressions that get evaluated are, in order,\n+, (- 5 2), -, 5, 2, 7.\n\nNot all expressions are evaluated left to right, however. =There is a=\n=small set of symbols called special forms=, and an expression whose\nfirst element is a special form is evaluated according to rules\ndefined for that special form.\n\nFor example, if is a special form, and when an expression of the form\n\n(if test then else)\n\nis evaluated, only one of the last two elements will be evaluated,\ndepending on whether the second element, test, returns true or not.\n\nThings meant to be used as the first element of an expression are\ncalled operators. So =functions and special forms are operators=. But\nlike the term \"expression,\" this is just a statement of intention.\nYou can put anything first in an expression so long as you specify\nwhat happens when you do.\n\n\nBindings and Environments\n\n=There are three ways a variable can have a value.= It can have a value\nglobally, as for example + does, meaning that by default it has this\nvalue everywhere. Such a variable is said to be globally bound, and\nthe set of global bindings is called the global environment.\n\nAnother way a variable can have a value is by being a parameter in a\nfunction. When the function\n\n(fn (x) (+ x 1))\n\nis called, the variable x will, within it, have as its value whatever\nargument the function was called with. That's called a lexical\nbinding, and the current set of lexical bindings is the lexical\nenvironment.\n\nFinally, variables can have dynamic bindings, which are visible\neverywhere, like global bindings, but temporary: they persist only\nduring the evaluation of whatever expression created them.\n\n=Dynamic bindings take precendence over lexical bindings, which take=\n=precedence over global ones.=\n\nIf you do an assignment to a variable that has one of the three kinds\nof bindings, you'll modify whichever binding is currently visible. If\nyou do an assignment to a variable that's not bound, you'll create a\nglobal binding for it.\n\n\nErrors\n\nErrors are signalled by calling err with one argument describing the\nerror. Bel doesn't specify a global binding for err; this is\nsomething for a programming environment built on top of Bel to do.\nBut some error-catching code in the Bel source does dynamically bind\nerr.\n\n\nAxioms\n\nLike McCarthy's Lisp, Bel is defined starting with a set of operators\nthat we have to assume already exist. Then more are defined in terms\nof these, till finally we can define a function that is a Bel\ninterpreter, meaning a function that takes a Bel expression as an\nargument and evaluates it.\n\n=There are two main types of axioms: primitives and special forms.=\n- *special forms defined in bel source. primitives are axioms*\n=There are also a few variables that come predefined.=\n\nIn the following sections, the descriptions of primitives are their\ndefinitions. The descriptions of special forms, however, are merely\nsummaries of their behavior; special forms are defined by the code\nthat implements them in the Bel source.\n\n\nVariables and Constants\n\n1. t nil o apply\n\nEvaluate to themselves.\n\n2. chars\n\nA list of all characters. Its elements are of the form (c . b), where\nc is a character and b is its binary representation in the form of a\nstring of \\1 and \\0 characters. Bel doesn't specify which characters\nare in chars, but obviously they should include at least those in the\nBel source.\n\n3. globe scope\n\nThe current global and lexical environments, represented as lists of\n(var . val) pairs of variables and their values.\n\n4. ins outs\n\nThe default input and output streams. Initially nil, which represents\nthe initial input and output streams. Bel doesn't specify what those\nare, but if you started Bel at a prompt you'd expect them to be the\nterminal.\n\n\nQuote\n\nThe quote operator is a special form, but it has to be described\nfirst because so many code examples use it.\n\nIt returns its argument without evaluating it. Its purpose is to\nprevent evaluation.\n\n> (quote a)\na\n\nPrepending ' to an expression is equivalent to wrapping a quote\naround it.\n\n> 'a\na\n\nWhy do you need to prevent evaluation? To distinguish between code\nand data. If you want to talk about the symbol a, you have to quote\nit. Otherwise it will be treated as a variable, and you'll get its\nvalue. E.g. if a has been set to 10:\n\n> a\n10\n> 'a\na\n\nBecause the symbols nil, t, o, and apply evaluate to themselves, you\ndon't have to quote them. Ditto for strings.\n\n\nPrimitives\n\n=Primitives can be called like functions, but are assumed to exist=,\nrather than defined in the Bel source. As with function calls, the\narguments in calls to primitives are all evaluated, left to right.\nMissing arguments default to nil. Extra arguments cause an error to\nbe signalled.\n\n\n1.  (id x y)\n\nReturns true iff x and y are identical.\n\n> (id 'a 'a)\nt\n> (id 'a 'b)\nnil\n\n=Identity is stricter than equality.= While there is only one of each\nsymbol and character, there can be any number of different pairs with\nthe same elements. So two pairs can look the same without being\nidentical:\n\n> (id '(a b) '(a b))\nnil\n\nBecause id is so strict, it's not the function you'd usually use to\ntest for equality. Usually you'd use =.\n\n\n2.  (join x y)\n\nReturns a new pair whose first half is x and second half is y.\n\n> (join 'a 'b)\n(a . b)\n> (join 'a)\n(a)\n\nA pair returned by join will not be id to any existing pair.\n\n> (id (join 'a 'b) (join 'a 'b))\nnil\n\n\n3.  (car x)\n\nReturns the first half of a pair:\n\n> (car '(a . b))\na\n> (car '(a b))\na\n\nThe car of nil is nil,\n\n> (car nil)\nnil\n\nbut calling car on any atom other than nil will cause an error.\n\nThe name \"car\" is McCarthy's. It's a reference to the architecture of\nthe first computer Lisp ran on. But though the name is a historical\naccident, it works so well in practice that there's no reason to\nchange it.\n\n\n4.  (cdr x)\n\nReturns the second half of a pair:\n\n> (cdr '(a . b))\nb\n> (cdr '(a b))\n(b)\n\nAs with car, calling it on nil yields nil, calling it on any other\natom causes an error, and the name is McCarthy's.\n\nWhen operating on pairs used to represent lists, car and cdr get you\nthe first element and the rest of the list respectively.\n\n\n5.  (type x)\n\nReturns either symbol, pair, char, or stream depending on the type\nof x.\n\n> (type 'a)\nsymbol\n> (type '(a))\npair\n> (type \\a)\nchar\n\n\n6.  (xar x y)\n\nReplaces the car of x with y, returning y. Signals an error if x is\nnot a pair.\n\nIf we assume that the value of x is (a . b), then\n\n> x\n(a . b)\n> (xar x 'c)\nc\n> x\n(c . b)\n\n\n7.  (xdr x y)\n\nLike xar, except that it replaces the cdr of x.\n\n> x\n(c . b)\n> (xdr x 'd)\nd\n> x\n(c . d)\n\n\n8.  (sym x)\n\nReturns the symbol whose name is the elements of x. Signals an error\nif x is not a string.\n\n> (sym \"foo\")\nfoo\n\n\n9.  (nom x)\n\nReturns a fresh list of the characters in the name of x. Signals an\nerror if x is not a symbol.\n\n> (nom 'foo)\n\"foo\"\n\n\n10. (wrb x y)\n\nWrites the bit x (represented by either \\1 or \\0) to the stream y.\nReturns x. Signals an error if it can't or if x is not \\1 or \\0. If y\nis nil, writes to the initial output stream.\n\n\n11. (rdb x)\n\nTries to read a bit from the stream x. Returns \\1 or \\0 if it finds\none, nil if no bit is currently available, or eof if no more will be\navailable. Signals an error if it can't. If x is nil, reads from the\ninitial input stream.\n\n\n12. (ops x y)\n\n=Returns a stream that writes to or reads from the place whose name is=\n=the string x=, depending on whether y is out or in respectively.\nSignals an error if it can't, or if y is not out or in.\n\n\n13. (cls x)\n\nCloses the stream x. Signals an error if it can't.\n\n\n14. (stat x)\n\nReturns either closed, in, or out depending on whether the stream x\nis closed, or reading from or writing to something respectively.\nSignals an error if it can't.\n\n\n15. (coin)\n\nReturns either t or nil randomly.\n\n\n16. (sys x)\n\nSends x as a command to the operating system.\n\n\nSpecial Forms\n\nExpressions beginning with special forms are not always evaluated in\nthe usual left-to-right way.\n\n\n1.  (quote x)\n\nDescribed above.\n\n\n2.  (lit ...)\n\nReturns the whole lit expression without evaluating it. =A lit is like=\n=a persistent quote; evaluation strips the quote off a quote=\n=expression, but leaves a lit expression intact.=\n\n> (quote a)\na\n> (lit a)\n(lit a)\n\nThe name stands for literal, and it can take any number of arguments.\n=This is how you make things that evaluate to themselves, the way=\ncharacters or nil do. Functions are lits, for example, as are\nnumbers.\n\n=The value of a primitive p is (lit prim p).=\n\n> car\n(lit prim car)\n\n\n3.  (if ...)\n\nAn if expression with an odd number of arguments\n\n(if a1 a2 a3 a4 ... an)\n\nis equivalent to\n\nif a1 then a2 else if a3 then a4 ... else an\n\nI.e. the odd numbered arguments are evaluated in order till we either\nreach the last, or one returns true.  In the former case, its value\nis returned as the value of the if expression. In the latter, the\nsucceeding argument is evaluated and its value returned.\n\nAn if expression with an even number of arguments\n\n(if a1 a2 ... an)\n\nis equivalent to\n\n(if a1 a2 ... an nil)\n\nFalsity is represented by nil, and truth by any other value. Tests\ngenerally return the symbol t when they can't return anything more\nuseful.\n\nAs a rule I've tried to make axioms as weak as possible. But while\na 3-argument if would have sufficed, an n-argument version didn't\nrequire significantly more code, so it seemed gratuitously fussy to\ninsist on 3 arguments.\n\n\n4.  (apply f ...)\n\nAn expression of the form\n\n(apply f x y ... z)\n\nis equivalent to\n\n(f 'a 'b ... 'c1 ... 'cn)\n\nwhere a is the value of x, b the value of y, and the ci the elements\nof the value of z.\n\n> (join 'a 'b)\n(a . b)\n> (apply join '(a b))\n(a . b)\n> (apply join 'a '(b))\n(a . b)\n\nThe last argument to apply can be a dotted list if it matches the\nparameters of the first.\n\n\n5.  =(where x)= *this one is very strange to me*\n\nEvaluates x. If its value comes from a pair, returns a list of that\npair and either a or d depending on whether the value is stored in\nthe car or cdr. Signals an error if the value of x doesn't come from\na pair.\n\nFor example, if x is (a b c),\n\n> (where (cdr x))\n((a b c) d)\n\n\n6.  (dyn v x y)\n\nEvaluates x, then causes y to be evaluated with the variable v\ndynamically bound to the value of x.\n\nFor example, if x is a,\n\n> x\na\n> (dyn x 'z (join x 'b))\n(z . b)\n> x\na\n\n\n7.  (after x y)\n\nEvaluates both its arguments in order. The second will be evaluated\neven if the evaluation of the first is interrupted (e.g. by an\nerror).\n\n\n8.  (ccc f) *I have no idea what this does* =look into this=\n\nEvaluates f and calls its value on the current continuation. The\ncontinuation, if called with one argument, will return it as the\nvalue of the ccc expression (even if you are no longer in the ccc\nexpression or in code called by it).\n\n\n9.  (thread x)\n\nStarts a new thread in which x will be evaluated. Global bindings are\nshared between threads, but not dynamic ones.\n\n\nReading the Source\n\nStarting with the foregoing 25 operators, we're going to define more,\ntill we can define a Bel interpreter. Then we'll continue, defining\nnumbers, I/O, and several other things one needs in programs.\n\nThese definition are in the Bel source, which is meant to be read in\nparallel with this guide.\n\nIn the Bel source, when you see an expression of the form\n\n(set v1 e1 ... vn en)\n\nit means each vi is globally bound to the value of ei.\n\nIn the source I try not to use things before I've defined them, but\nI've made a handful of exceptions to make the code easier to read.\n\nWhen you see\n\n(def n p e)\n\ntreat it as an abbreviation for\n\n(set n (lit clo nil p e))\n\nand when you see\n\n(mac n p e)\n\ntreat it as an abbreviation for\n\n(set n (lit mac (lit clo nil p e)))\n\nThe actual def and mac operators are more powerful, but this is as\nmuch as we need to start with.\n\nTreat an expression in square brackets, e.g.\n\n[f _ x]\n\nas an abbreviation for\n\n(fn (_) (f _ x))\n\nIn Bel, underscore is an ordinary character and _ is thus an ordinary\nvariable.\n\nFinally, treat an expression with a prepended backquote (`) as a\nquoted list, but with \"holes,\" marked by commas, where evaluation\nis turned back on again.\n\n> (set x 'a)\na\n> `(x ,x y)\n(x a y)\n> `(x ,x y ,(+ 1 2))\n(x a y 3)\n\nYou can also use ,@ to get a value spliced into the surrounding\nlist:\n\n> (set y '(c d))\n(c d)\n> `(a b ,@y e f)\n(a b c d e f)\n\nNow let's look at the source. The first expression defines a function\nno that takes one argument, x, and returns the result of using id to\ncompare it to nil. So no returns t if its argument is nil, and nil\notherwise.\n\n> (no nil)\nt\n> (no 'a)\nnil\n\nSince nil represents both falsity and the empty list, no is both\nlogical negation and the test for the empty list.\n\nThe second function, atom, returns true iff its argument is not a\npair.\n\n> (atom \\a)\nt\n> (atom nil)\nt\n> (atom 'a)\nt\n> (atom '(a))\nnil\n\nNext come a pair of similar functions, all and some. The former\nreturns t iff its first argument returns true of all the elements of\nits second,\n\n> (all atom '(a b))\nt\n> (all atom nil)\nt\n> (all atom '(a (b c) d))\nnil\n\nand the latter returns true iff its first argument returns true of\nany element of its second. However, when some returns true, it\ndoesn't simply return t. It returns the remainder of the list\nstarting from the point where f was true of the first element.\n\n> (some atom '((a b) (c d)))\nnil\n> (some atom '((a b) c (d e)))\n(c (d e))\n\nLogically, any value except nil counts as truth, so why not return\nthe most informative result you can?\n\nIn all and some we see the first use of if. Translated into English,\nthe definition of all might be:\n\n  If xs is empty, then return t.\n\n  Otherwise if f returns true of the first element, return the result\n  of calling all on f and the remaining elements.\n\n  Otherwise (in which case xs has at least one element of which f\n  returns false), return nil.\n\nThis technique of doing something to the car of a list and then\nperhaps continuing down the cdr is very common.\n\nSomething else is new in all and some: these are the first functions\nin the Bel source that you could cause an error by calling.\n\n> (all atom 'a)\nError: can't call car on a non-nil atom.\n\nI made up that error message; Bel doesn't specify more about errors\nin primitives than when they occur, and doesn't specify anything\nabout repls. But some error will be signalled if you call all with a\nnon-nil atom as the second argument, because in the second test\nwithin the if\n\n(f (car xs))\n\ncar is called on it, and it's an error to call car on anything except\na pair or nil.\n\nOne other thing to note about these definitions, now that we're\ngetting to more complex ones: these functions are not defined the\nway they would be in idiomatic Bel. For example, if all didn't\nalready exist in Bel you could define it as simply\n\n(def all (f xs)\n  (~some ~f xs))\n\n=I don't like this. complement is used so infrequently in practice, you should just=\n=spell it rather than dediating a special character to it=\nBut since we haven't defined functional composition yet, I didn't use\nit.\n\nThe next function, reduce, is for combining the elements of its\nsecond argument using nested calls to its first. For example\n=omg he switched the argument order. I'm gonna freak out=\n=no initail value too. seems so impractical. what's his gripe on clojure?=\n\n(reduce f '(a b c d))\n\nis equivalent to\n\n(f 'a (f 'b (f 'c 'd)))\n\nIf xs has only one element, reduce returns it, and if it's empty,\nreduce returns nil; since (cdr nil) is nil, we can check both these\npossibilities with (no (cdr xs)). Otherwise it calls f on the first\nelement and reduce of f and the remaining elements.\n\n> (reduce join '(a b c))\n(a b . c)\n\nThis is not the only way to reduce a list. Later we'll define two\nmore, foldl and foldr.\n\nThe definition of reduce shows another way of indenting ifs.\nIndentation isn't significant in Bel and only matters insofar as\nit helps humans read your code, but I've found three ways of\nindenting ifs that work well. If an if has more than two tests and\nthe arguments are sufficiently short, it works well to say\n\n(if test1 then1\n    test2 then2\n          else)\n\nWe saw this in all and some. But if you only have one test, or some\narguments are too long to fit two on one line, then it works better\nto say\n\n(if test1\n    then1\n    test2\n    then2\n    else)\n\nor if an if is long,\n\n(if test1\n     then1\n    test2\n     then2\n    test3\n     then3\n     else)\n\nThe next function, cons, has the name that join had in McCarthy's\nLisp. It's the function you use to put things on the front of a list.\n\n> (cons 'a '(b c))\n(a b c)\n\nIf you only want to put one thing on the front of a list, you could\nuse join.\n\n> (join 'a '(b c))\n(a b c)\n\nWith cons, however, you can supply more than one thing to put on the\nfront:\n\n> (cons 'a 'b 'c '(d e f))\n(a b c d e f)\n\nSince cons is a generalization of join, it's rare to see join in\nprograms.\n\nWe see something new in the definition of cons: it has a single\nparameter, args, instead of a list of parameters. When a function has\na single parameter, its value will be a list of all the arguments\nsupplied when the function is called. So if we call cons thus\n\n(cons 'a 'b '(c d))\n\nthe value of args will be\n\n(a b (c d))\n\nThe parameter list of a Bel function can be a tree of any shape. If\nthe arguments in the call match its shape, the parameters will get\nthe corresponding values; otherwise an error is signalled.\n\nSo for example if a function f has the parameter list\n\n(x . y)\n\nand it's called\n\n(f 'a 'b 'c)\n\nthen x will be a, and y will be (b c).\n\nIf the same function is called\n\n(f 'a)\n\nthen x will be a, and y will be nil. And if it's called\n\n(f)\n\nyou'll get an error because there is no value for x.\n\nIf a function f has the parameter list\n\n((x y) z)\n\nand is called\n\n(f '(a (b c)) '(d))\n\nthen x will be a, y will be (b c), and z will be (d). Whereas if it's\ncalled\n\n(f '(a) '(d))\n\nyou'll get an error because there is no value for y, and if it's\ncalled\n\n(f '(a b c) '(d))\n\nyou'll get an error because there is no parameter for c.\n\nThe next function, append, joins lists together:\n\n> (append '(a b c) '(d e f))\n(a b c d e f)\n> (append '(a) nil '(b c) '(d e f))\n(a b c d e f)\n\nIts definition will be easier to understand if we look first at a\ntwo-argument version.\n\n(def append2 (xs ys)\n  (if (no xs)\n      ys\n      (cons (car xs) (append2 (cdr xs) ys))))\n\nIn English, if xs is empty, then just return ys. Otherwise return the\nresult of consing the first element of xs onto append of the rest of\nxs and ys. I.e.\n\n(append2 '(a b c) '(d e f))\n\nbecomes\n\n(cons 'a (append2 '(b c) '(d e f)))\n\nand so on. The definition of append in the Bel source is the same\nprinciple applied to any number of arguments.\n\nIn it we see the first use of apply. Like if, apply is a special\nform, meaning an operator whose behavior has to be defined as a\nspecial case in the interpreter. Unlike if, apply has a value; it\nevaluates to itself, like t and nil. This lets you use it as an\nargument like an ordinary function.\n\nIts purpose is in effect to spread out the elements of a list as if\nthey were the arguments in a function call. For example\n\n(apply f '(a b))\n\nis equivalent to\n\n(f 'a 'b)\n\nIn the general case apply can take one or more arguments, and is\nequivalent to calling apply on the first argument and all the\nintervening arguments consed onto the last. I.e.\n\n(apply f x y z)\n\nis equivalent to\n\n(apply f (cons x y z)) =isn't this (x . (y . z))?, so an error?=\n\nIt's common to use apply in functions like append that take any\nnumber of arguments. Using apply is in a sense the converse of using\na single parameter to collect multiple arguments.\n\nNow let's look at append. It takes any number of arguments.\nCollectively (i.e. as a list) they'll be the value of args. If args\nis empty or only has one element, then the result is (car args). We\nsaw the same sort of test in the first clause of reduce. That's two\nbase cases, and there is also a third: when args has more than one\nelement but the first element is nil. In that case we can ignore it,\nand apply append to the rest of args.\n\nFinally in the last clause we see the general case. It uses the\nsame strategy we saw in append2: cons the first element of the\nfirst argument onto a recursive call to append on the rest of the\nfirst argument and the remaining arguments. Unlike append2, append\nhas to make this call using apply, because it has a varying number of\narguments in a list, instead of exactly two.\n\nOnce we have append it's easy to define snoc, which as its name\nsuggests is like a reverse cons,\n\n> (snoc '(a b c) 'd 'e)\n(a b c d e)\n\nand list, which returns a list of its arguments.\n\n> (list)\nnil\n> (list 'a)\n(a)\n> (list 'a 'b)\n(a b)\n\nOr more precisely, returns a newly made list of its arguments. If\nyou're wondering why we bother appending args to nil rather than\nsimply returning it, the reason is that appending a list to nil will\nalso copy it.\n\nIf we defined list as\n\n(def list args args)\n\nand it was called thus\n\n(apply list x)\n\n=then the value that list returned would be the same list as x-- not=\n=merely a list with the same elements, but the same pair-- meaning if=\n*so we don't have immutable mechanics of clojure*\nwe modified the value we got from list, we'd also be modifying the\nobject up in the calling code.\n\nAfter list we see map, which in the simplest case returns a list of\ncalling its first argument on each element of its second.\n\n> (map car '((a b) (c d) (e f)))\n(a c e)\n\nHowever, map can take any number of lists, and calls its first\nargument on successive sets of elements from the others.\n\n> (map cons '(a b c) '(1 2 3))\n((a . 1) (b . 2) (c . 3))\n\nIt stops as soon as one list runs out\n\n> (map cons '(a b c) '(1 2))\n((a . 1) (b . 2))\n\nLike append, map is easier to understand if we start with a version\nthat takes exactly two arguments.\n\n(def map2 (f xs)\n  (if (no xs)\n      nil\n      (cons (f (car xs))\n            (map2 f (cdr xs)))))\n\nIf there are no xs left, then return nil, otherwise cons f of the\nfirst element onto map2 of f and the remaining elements. Pretty\nsimple.\n\nAll the additional complexity of map comes from the need to take\nmultiple lists. The parameter list becomes (f . ls) so that all the\nlists can be collected in ls. We need an additional base case in case\nthere are zero of them. Checking for the end of the list, which in\nmap2 was\n\n(no xs)\n\nnow becomes\n\n(some no ls)\n\nbecause we stop as soon as any list runs out.\n\nThen we have yet another base case, the one in which we have just one\nlist. That's what map2 does, and not surprisingly, the code is the\nsame as in map2 except that xs becomes (car ls).\n\nFinally in the general case we call f on all the first elements\n(which we collect using map) and cons that onto map of f on all the\nrests of the lists.\n\nNotice that map calls itself recursively in two ways: there is the\nusual \"do this to the rest of the list\" recursive call in the last\nline. But in the preceding line we also use (map car ls) to collect\nthe arguments for f. And that's why we need the single-list base\ncase. Without it, we'd get an infinite recursion.\n\nNext comes our first macro, fn. There are two concepts to explain\nfirst, though: macros and scope.\n\nA macro is essentially a function that generates code. I would have\nliked the first example of a macro to be something simpler, but fn\nis the one we need first. So I'll introduce macros using a simpler\nmacro that isn't part of Bel, then explain fn.\n\nHere is a very simple macro:\n\n(mac nilwith (x)\n  (list 'cons nil x))\n\nThis definition says that whenever you see an expression like\n\n(nilwith 'a)\n\ntransform it into\n\n(cons nil 'a)\n\nand then evaluate that and return its value as the value of the call\nto nilwith.\n\n> (nilwith 'a)\n(nil . a)\n\nSo unlike the evaluation of a function call, the evaluation of a\nmacro call has two steps:\n\n1. First use the definition of the macro to generate an expression,\n   called the macro's expansion. In the case above the expansion is\n   (cons nil 'a).\n\n2. Then evaluate the expansion and return the result. The expansion\n   above evaluates to (nil . a).\n\nBeneath the surface, what's going on is quite simple. A macro is in\neffect (or more precisely, contains) a function that generates\nexpressions. This function is called on the (unevaluated) arguments\nin the macro call, and whatever it returns is the macro expansion.\n\nFor example, the value of nilwith will be equivalent to\n\n(lit mac (lit clo nil (x) (list 'cons nil x))))\n\nIf we look at the third element, we see the function that generates\nexpansions\n\n(lit clo nil (x) (list 'cons nil x))\n\nwhich looks just like the definition of nilwith.\n\nMacros often use backquote to make the code that generates\nexpressions look as much as possible like the resulting expressions.\nSo if you defined nilwith you'd probably do it not as we did above\nbut as\n\n(mac nilwith (x)\n  `(cons nil ,x))\n\nNow let's work our way up to fn, starting with the following\nsimplified version:\n\n(mac fn- (parms expr)\n  `(lit clo nil ,parms ,expr))\n\nThis is less powerful than the actual fn macro in two ways.\n\n1. It doesn't capture the local lexical environment, but instead\n   simply inserts a nil environment.\n\n2. It can only take a single expression.\n\nBut if we don't need either of these things, the functions made by\nfn- work fine:\n\n> ((fn- (x y) (cons x y)) 'a 'b)\n(a . b)\n\nAll the extra complexity in the definition of fn is to get those two\nfeatures, the local environment and a body of more than one\nexpression.\n\nA function with a lexical environment stored within it is called a\nclosure. That's why literal Bel functions begin (lit clo ...); the\nclo is for \"closure.\" If a closure includes an environment with a\nvalue for x, then x will have a value within the closure even if it\nisn't a parameter.\n\nSo far the literal functions we've seen have had nil enviroments.\nLet's try making one by hand with some variable bindings in it. An\nenvironment is a list of (var . val) pairs, so to make a closure we\nput such a list in the third position of a clo, like this:\n\n(lit clo ((x . a)) (y) (cons x y))\n\nThis closure includes an environment in which x has the value a. It\nhas one parameter, y, and when called returns the value of x consed\nonto whatever we give as an argument.\n\n> ((lit clo ((x . a)) (y) (cons x y)) 'b)\n(a . b)\n\nNotice that the b was all we passed to the function. The a came from\nwithin it.\n\nIt turns out to be very useful if functions include the lexical\nenvironment where they're created. And that is what the fn macro\ndoes.\n\n=In Bel you can get hold of the global and lexical environments using=\n=the variables globe and scope respectively.= So for example if we\ndefine foo as\n\n(def foo (x)\n  scope)\n\nthen it will work something like this\n\n> (foo 'a)\n((x . a))\n> (foo 'b)\n((x . b))\n\nI say \"something like\" because a repl may have some variables of its\nown, but we know that scope will at least have a value for x.\n\nIf you compare the definitions of fn- and fn, you'll notice that\nwhile fn- expands into a lit expression, fn expands into a call to\nlist that yields a lit expression. It works fine to use a call to\nlist rather than an actual list in a function call; functions are\njust lists after all.\n\n> ((list 'lit 'clo nil '(x) '(+ x 1)) 2)\n3\n\nThe reason the definition of fn expands into a call to list is so\nthat we can incorporate the local environment, which we get by\nincluding scope in the arguments to list.\n\nHere's an example where we do this manually:\n\n(def bar (x)\n  ((list 'lit 'clo scope '(y) '(+ x y)) 2))\n\nWithin bar we call a hand-made closure that includes scope, which, as\nwe know from the example of foo above, will include a value for x.\n\n> (bar 3)\n5\n\nThe fn macro generates as its expansion exactly what we just made by\nhand. So this is equivalent to the definition above:\n\n(def bar (x)\n  ((fn (y) (+ x y)) 2))\n\nThe fn macro has two different expansions depending on how many\narguments we pass to it. That's so that functions can have bodies of\nmore than one expression.\n\nIf we call fn with two arguments, meaning a parameter list and an\nexpression, as in e.g.\n\n(fn (x) (cons 'a x))\n\nthen (cdr body) will be false, so the expansion will be\n\n(list 'lit 'clo scope '(x) '(cons 'a x))\n\nIf we call fn with three or more arguments, meaning a parameter list\nplus two or more expressions, e.g.\n\n(fn (x)\n  (prn 'hello)\n  (cons 'a x))\n\nThen the expansion wraps a do around the expressions.\n\n(list 'lit 'clo scope '(x) '(do (prn 'hello) (cons 'a x)))\n\nWe haven't seen do yet, but it's coming soon. It makes multiple\nexpressions into a block of code.\n\nNext comes something unusual: vmark is set to a newly created pair\nmade by join. Missing arguments to primitives default to nil, so\n=(join) is equivalent to (join nil nil), and when you see a call like=\n=this, it's usually for the purpose of creating a fresh pair to mark=\n=the identity of something.=\n\n=Any pair with vmark in its car is treated by Bel as a variable.= The\n=next function, uvar, thus returns a new, unique variable each time=\nit's called. The reason we need such a thing is so that when we're\nmanipulating user code, we can add variables without worrying they'll\naccidentally share the names of variables created by users.\n\nNow we see the definition of do, which we used in the expansion of\nfn. The do macro uses nested function calls to represent blocks of\ncode.\n\nSuppose you want to evaluate two expressions in order and then return\nthe value of the last.\n\ne1\ne2\n\nYou can make this happen by embodying e2 in a function that you then\ncall on e1.\n\n((fn x e2) e1)\n\nWhen this expression is evaluated, e1 will be evaluated first, and\nits value passed to the function in the car of the call:\n\n(fn x e2)\n\nThen e2 will be evaluated, ignoring the value of e1 passed in the\nparameter, and its value returned. Result: e1 and then e2 get\nevaluated, as if in a block. (You cannot of course safely use x as\nthe parameter in case it occurs within e2, but I'll explain how to\ndeal with that in a minute.)\n\nThis technique generalizes to blocks of any size. Here's one with 3\nexpressions:\n\n((fn x ((fn x e3) e2)) e1)\n\nYou can use reduce to generate this kind of expression as follows\n\n(def block args\n  (reduce (fn (x y)\n            (list (list 'fn 'x y) x))\n          args))\n\n> (block 'e1 'e2 'e3)\n((fn x ((fn x e3) e2)) e1)\n\nand this is almost exactly what the do macro does. If you look at\nits definition, it's almost identical to that of block.\n\nOne difference is that do is a macro rather than a function, which\nmeans that the nested call gets evaluated after it's generated.\n\nThe other difference is that we call uvar to make the parameter\ninstead of using x. We can't safely use any symbol as the parameter\nin case it occurs in one of the expressions in the do. Since we're\nnever going to look at the values passed in these function calls, we\ndon't care what parameter we use, so long as it's unique.\n\nIf you want to establish a lexical binding for some variable, you do\nit with let, which is a very simple macro upon fn.\n\n> (let x 'a\n    (cons x 'b))\n(a . b)\n\nSince let expands into a fn, you have the full power of Bel parameter\nlists in the first argument.\n\n> (let (x . y) '(a b c)\n    (list x y))\n(a (b c))\n\nThe macro macro is analogous to the fn macro in that it returns a\nliteral macro. You'll rarely use these directly, but you could if you\nwanted to.\n\n> ((macro (v) `(set ,v 'a)) x)\na\n> x\na\n\nNext we see the definition of def itself, which does nothing more\nthan set its first argument to a fn made using the rest of the\narguments, and also of mac, which does the same with macro.\n\n(I like it when I can define new operators as thin, almost trivial\nseeming layers on top of existing operators. It seems a sign of\northogonality.)\n\nIf you were wondering why fn needs two cases-- why we don't just\nalways wrap a do around the body-- the reason is that do calls\nreduce, which is defined using def, which expands into a fn. So to\navoid an infinite recursion we either have to define reduce as a\nliteral function, or make either fn or do consider the single\nexpression case, and making fn do it was the least ugly.\n\nNow that we have let, we can define or, which returns the first\nnon-nil value returned by one of its arguments. Like most ors in\nprogramming languages, it only evaluates as many arguments as it\nneeds to, which means you can use it for control flow as well as\nlogical disjunction.\n\n> (or 'a (prn 'hello))\na\n\nThe definition of or is the first recursive macro definition we've\nseen. Unless it has no arguments, an or will expand into another or.\nThis is fine so long as the recursion terminates, which this one\nwill because each time we look at the cdr of the list of arguments,\nwhich will eventually be nil. (Though you could spoof or by\nconstructing a circular list and applying or to it.)\n\nIn effect\n\n(or foo bar)\n\nexpands into\n\n(let x foo\n  (if x\n      x\n      (let y bar\n        (if y\n            y\n            nil))))\n\nexcept that we can't actually use variables like x and y to hold the\nvalues, and instead have to use uvars.\n\nNotice incidentally that the expression above could be optimized\n\n(let x foo\n  (if x\n      x\n      bar))\n\nbut the definition of or doesn't try to; like every definition in\nBel, its purpose is to define what or means, not to provide an\nefficient implementation of it.\n\n=In Bel, macros are applyable just like functions are, though if you=\n=do that you get only the logical aspect of or and not the control=\naspect, since in a call to apply the arguments have already all been\nevaluated.\n\n> (apply or '(nil nil))\nnil\n> (apply or '(nil a b))\na\n\nThe and macro is similar in spirit to or, but different in its\nimplementation. Whereas or uses recursion to generate its expansion,\nand uses reduce. Since\n\n(and w x y z)\n\nis equivalent to\n\n(if w (if x (if y z)))\n\nit's an obvious candidate for reduce.\n\nNotice the function given to reduce has a single parameter. A\nfunction given as the first argument to reduce will only ever be\ncalled with two arguments, so usually such a function will have a\nlist of two parameters, but in this case we just want to cons an if\nonto the front of the arguments each time.\n\nThe other interesting thing about and is what we do when it has no\narguments. While we want (or) to return nil, we want (and) to return\nt. So in the second argument to reduce, we replace an empty args with\n(t).\n\nThe next function, =, is the one that programs usually use to test\nfor equality. It returns true iff its arguments are trees of the same\nshape whose leaves are the same atoms.\n\n> (id '(a b) '(a b))\nnil\n> (= '(a b) '(a b))\nt\n\nIn Bel, everything that's not a symbol, character, or stream is a\npair. Numbers and strings are pairs, for example. So you'd never\nwant to use id for comparison unless you were specifically looking\nfor identical list structure.\n\nIn the definition of = we see the first instance of square bracket\nnotation.\n\n(all [id _ (car args)] (cdr args))\n\nThis is equivalent to\n\n(all (fn (x) (id x (car args)))\n     (cdr args))\n\nI.e., is everything in the cdr of args id to the car? You know you\ncan use id to test equality at this point, because if one of the args\nis an atom, they all have to be for them to be =, and you can use id\nto test equality of atoms.\n\nIf id took any number of arguments =(it doesn't, because I want axioms=\n=to be as weak as possible)=, the preceding all expression could have\nbeen simply\n\n(apply id args)\n\nThe next four functions are predicates for the four types. All use =\nfor this test even though all could use id. My rule is to use =\nunless I specifically need id. That way the appearance of id is a\nsignal that code is looking for identical structure.\n\nThen we see proper, which tells us whether something is a proper\nlist. Informally, a proper list is one that we don't need a dot to\ndisplay.\n\n> (proper nil)\nt\n> (proper '(a . b))\nnil\n> (proper '(a b))\nt\n\nFormally, something is a proper list if it's either nil or a pair\nwhose cdr is a proper list, which is exactly what the definition\nsays.\n\nIn Bel, a proper list of characters is called a string, and has a\nspecial notation: zero or more characters within double quotes.\n\n> (string \"foo\")\nt\n\nThe next function, mem, tests for list membership.\n\n> (mem 'b '(a b c))\n(b c)\n> (mem 'e '(a b c))\nnil\n> (mem \\a \"foobar\")\n\"ar\"\n\nSince it uses some, it returns the rest of the list starting with the\nthing we're looking for, rather than simply t.\n\nIn the definition of mem we see the first use of an optional\nparameter. If in a parameter list you see a list beginning with the\nsymbol o, then the parameter following the o is an optional one. It\ncan be followed by an expression, and if no value is supplied for the\nparameter in the call, it gets the value of that expression instead\n(or nil if there isn't one). So\n\n> ((fn (x (o y)) y) 'a)\nnil\n> ((fn (x (o y 'b)) y) 'a)\nb\n\nThe optional parameter doesn't have to be a single symbol; it can be\na full parameter list. An example will be easier to understand if we\nuse let:\n\n> (let (x (o (y . z) '(a . b))) '(f)\n    (list x y z))\n(f a b)\n\nIn the definition of mem, the optional parameter is a comparison\nfunction, which defaults, as such functions usually will, to =.\nBy supplying different comparison functions we can get different\nbehaviors out of mem.\n\n> (mem 3 '(2 4 6 8) >)\n(4 6 8)\n\nThe next function, in, is effectively a generalization of =. It\nreturns true iff its first argument is = to any of the rest.\n\nThen come three common combinations of car and cdr: cadr, which gets\nthe second element of a list, cddr, which takes two elements off the\nfront, and caddr, which gets the third element. We'll have other ways\nto do these things once we've defined numbers.\n\nThe case macro takes an initial expression e, followed by\nalternating keys (which are implicitly quoted) and expressions, and\nreturns the result of evaluating the expression following the key\nthat's = to the value of e.\n\nIf case is given an even number of arguments, the last one is the\ndefault. Otherwise the default is nil.\n\nE.g. this function\n\n(def sname (s)\n  (case s\n    + 'plus\n    - 'minus\n      'unknown))\n\nreturns the name of a sign represented by a symbol:\n\n> (sname '+)\nplus\n\nThe iflet macro lets you use the result of a test in an if. It works\nlike an ordinary if, except that it takes an initial variable, which\nin any then expression will be lexically bound to the value returned\nby the preceding test expression.\n\n> (iflet x nil      'foo\n           '(a b c) (car x)\n                    'bar)\na\n\nNotice how similar the definitions of case and iflet are, despite\ntheir different purposes. They're both recursive macros, like or,\nand both work through their arguments two at a time.\n\nWe use iflet to define aif, which implicitly binds the variable it\nto the value of the preceding test expression.\n\n> (map (fn (x)\n         (aif (cdr x) (car it)))\n       '((a) (b c) (d e f) (g)))\n(nil c e nil)\n\nThe function given to map here tests whether x has a non-nil cdr,\nand if so returns the car of it.\n\nWith aif and some, it's trivial to define find, which returns the\nfirst element of a list that matches some test.\n\n> (find [= (car _) \\a]\n        '(\"pear\" \"apple\" \"grape\"))\n\"apple\"\n\nThe begins function returns true iff its first argument is a list\nthat begins with its second argument:\n\n> (begins '(a b c d e) '(a b))\nt\n\nLike mem, it takes an optional comparison function that defaults\nto =.\n\nIt's used in caris, which returns true iff its first argument is a\npair whose car is its second.\n\n> (caris '(a b) 'a)\nt\n\nThis is one of those functions you end up using surprisingly often,\nbecause it's so common for the car of a list to have some special\nsignificance.\n\nOur next function, hug, applies a function to pairs of elements of a\nlist. Since the default function is list, by default it simply\nreturns pairs of elements.\n\n> (hug '(a b c d e))\n((a b) (c d) (e))\n> (hug '(1 2 3 4 5) +)\n(3 7 5)\n\nThis too is something you need surprisingly often, especially when\noperating on expressions, where it's common to have subexpressions\nthat form implicit pairs. We've seen this already in if, case, and\niflet, and we see it implemented with hug in the next macro, with,\nwhich is a multi-variable let.\n\n> (with (x 'a\n         y 'b)\n    (cons x y))\n(a . b)\n\nIt binds the variables in parallel in the sense that the bindings of\nprevious variables are not visible in the expressions defining the\nvalues of later ones.\n\n> (let x 'a\n    (with (x 'b\n           y x)\n      y))\na\n\nThe next function, keep, returns all the elements of a list that pass\nsome test\n\n> (keep odd '(1 2 3 4 5))\n(1 3 5)\n\nand rem removes its first argument from a list\n\n> (rem \\a \"abracadabra\")\n\"brcdbr\"\n\nor more precisely, since it takes an optional comparison function f,\nall the elements of the list that fail [f _ x], where x is the first\nargument.\n\n> (rem 4 '(5 3 1 2 4) >=)\n(3 1 2)\n\nThe next two functions, get and put, are for operating on key-value\nstores represented as lists of pairs like this one:\n\n> (set x '((a . 1) (b . 2) (c . 3)))\n((a . 1) (b . 2) (c . 3))\n\nThe first, get, retrieves entries,\n\n> (get 'a x)\n(a . 1)\n> (get 'z x)\nnil\n\nand the second, put, creates them.\n\n> (put 'z 26 x)\n((z . 26) (a . 1) (b . 2) (c . 3))\n> (put 'a 9 x)\n((a . 9) (b . 2) (c . 3))\n\nThe reason get returns the whole pair instead of just the associated\nvalue is so that we can distinguish between a key having a value of\nnil and having no value.\n\nNotice that put doesn't change the value of x, just as consing\nsomething onto x wouldn't change the value of it.\n\nThe function rev reverses a list,\n\n> (rev \"able\")\n\"elba\"\n\nand snap breaks off a piece of its second argument that's as long as\nits first, returning both parts:\n\n> (snap '(a b) '(1 2 3 4 5))\n((1 2) (3 4 5))\n\nIt's used in udrop (for \"unary drop\"), which returns just the\nremaining part:\n\n> (udrop '(a b) '(1 2 3 4 5))\n(3 4 5)\n\nThen we get the identity function, idfn:\n\n> (map idfn '(a b c))\n(a b c)\n\nYou wouldn't call this directly (why bother?) but you often end up\nusing it as a default or when operating on functions.\n\nThe function is is a little unusual in that it returns a function for\ncomparing its argument to something.\n\n> ((is 'a) 'a)\nt\n\nAn is is a partially applied =, so in principle we won't need it\nafter we define partial application later on. But this case is so\ncommon that it's convenient to have a separate operator for it.\n\nNow come several macros for dealing with errors. The first, eif,\nintroduces several new concepts, so I'll explain them first, then eif\nitself.\n\nOne thing we see being used for the first time here is dynamic\nbinding. To show how it works, we'll define a function that refers to\na variable with no global value:\n\n(def foo ()\n  snerg)\n\nIf we call foo normally, we'll get an error saying snerg has no\nvalue. But if we call foo within a dyn expression that creates a\ndynamic binding for snerg, it will work:\n\n> (dyn snerg 'a\n    (foo))\na\n\nWe couldn't get the same result by saying\n\n(let snerg 'a\n  (foo))\n\nbecause a lexical binding created by let (or more precisely by a\nfunction call) is only visible within its body. And whereas lexical\nbindings get saved in closures (as in e.g. is), dynamic bindings,\nlike global ones, don't.\n\nAnother concept we're seeing for the first time is that of a\ncontinuation. A continuation is basically a computation in the middle\nof happening. (Or more prosaically, it's a copy of the stack.) A\ncontinuation is callable, like a function, and if you call one, you\nrestart the computation where it was created.\n\nYou can get your hands on the current continuation by calling the ccc\nspecial form with a function of one argument. It will be the current\ncontinuation, which you can then save. Let's try making one.\n\nHere's some simple code that makes a list:\n\n> (list 'a 'b)\n(a b)\n\nNow let's try replacing the 'b with an expression that saves the\ncurrent continuation before returning b:\n\n> (list 'a (ccc (fn (c)\n                  (set cont c)\n                  'b)))\n(a b)\n\nIt returns the same value, but in the process we've set cont to the\ncontinuation at the point where the ccc occurred. If we call cont\nwith some value, our old computation will be restarted as if that\nvalue had been returned by the ccc expression:\n\n> (cont 'z)\n(a z)\n\nContinuations work any number of times:\n\n> (cont 'w)\n(a w)\n\nOne thing we can use continuations for is aborting computations. If\nwe save a continuation before starting something, then by calling the\ncontinuation we can escape from the middle of it.\n\n> (ccc (fn (c)\n         (dyn abort c\n           (do (abort 'a)\n               (car 'b)))))\na\n\nHere we bind abort to the continuation before we start evaluating the\ndo expression. The second expression within the do\n\n(car 'b)\n\nwould cause an error if it were evaluated. But we never get to it,\nbecause we call abort first.\n\nWhen an error occurs, err is called on a value representing the\nerror. So if the variable that we dynamically bind is err instead of\nabort, we can take over what happens when an error is signalled.\n\nHere we rebind err to return hello when an error occurs:\n\n> (ccc (fn (c)\n         (dyn err (fn (x) (c 'hello))\n           (car 'b))))\nhello\n\nThis time the car expression does get evaluated, which causes an\nerror to be signalled. But by establishing a dynamic binding for\nerr, we've ensured that it's our function that gets called when the\nerror is signalled. And our function simply returns hello from the\nccc expression.\n\nYou can probably imagine how you'd write a macro to evaluate an\nexpression in an error-proof way: just make the expansion put the\nexpression within something like\n\n(ccc (fn (c)\n       (dyn err (fn (x) (c nil))\n         expression)))\n\nexcept of course you'd want to use a uvar instead of c.\n\nNow let's look at eif. It's like if except that which of its\narguments get evaluated depends not on whether its test expression\nreturns true, but whether it causes an error.\n\n> (eif x (car 'a)\n         'oops\n         x)\noops\n> (eif x (car '(a b))\n         'oops\n         x)\na\n\nThe variable before the test expression (in this case x) will be\nlexically bound either to the value returned by the test expression,\nor to whatever err was called with if an error occurred.\n\nThe expansion of the first eif above looks like\n\n(let v (join)\n  (let w (ccc (fn (c)\n                (dyn err [c (cons v _)] (car 'a))))\n    (if (caris w v id)\n        (let x (cdr w) 'oops)\n        (let x w x))))\n\nexcept of course v, w, and c will be uvars. When we look at the code\nabove, we can see how eif tells whether the value it got back from\nthe test expression represents an error or not. The variable v is\nbound to a newly created pair. Within the continuation, err is bound\nto a function that returns v consed onto whatever err was called\nwith. So to decide which of the two succeeding expressions to\nevaluate, we just check whether the car of w is v. (And of course we\ncheck using id, not =.)\n\nThe eif macro is the most general error-catching macro, but there\nare two more, onerr and safe, that are more commonly used. The\nonerr macro takes two expressions and returns the value of the first\nif the second causes an error:\n\n> (onerr 'oops (car 'a))\noops\n\nand the safe macro simply returns nil if the expression within\nit causes an error:\n\n> (safe (car '(a b)))\na\n> (safe (car 'a))\nnil\n\nThe next function, literal, returns true iff its argument evaluates\nto itself,\n\n> (map literal (list nil \"foo\" car))\n(t t t)\n\nwhile variable returns true iff its argument is a variable, meaning\nan ordinary symbol or a uvar:\n\n> (map variable (list 'x (uvar) t))\n(t t nil)\n\nAnd isa is for checking whether something is a particular kind of\nlit. Like is, isa doesn't do the check, but returns a function that\ndoes\n\n> ((isa 'clo) map)\nt\n\nThe operators we've defined so far, together with the axioms, will\nnow enable us to define a function that acts as a Bel interpreter: a\nfunction that will take any Bel expression as an argument and\nevaluate it.\n\n(We don't need all the operators we've defined so far to define a Bel\ninterpreter. These are, rather, the minimum set we need to define an\ninterpreter in a way that's not too ugly.)\n\nMuch of the code in the interpreter operates on the same set of\nstructures, and these always have the same parameter names.\n\nEach thread is a list\n\n(s r)\n\nof two stacks: a stack s of expressions to be evaluated, and a stack\nr of return values.\n\nEach element of s is in turn a list\n\n(e a)\n\nwhere e is an expression to be evaluated, and a is a lexical\nenvironment consisting of a list of (var . val) pairs.\n\nThe variable p holds a list of all the threads (usually other than\nthe current one).\n\nThe other thing we need to pass around in the interpreter is the\nglobal bindings, which is another environment represented as a list\nof (var . val) pairs. I use the variable g for this.\n\nThe most common parameter list we'll see is\n\n(s r m)\n\nwhere s is the current expression stack, r is the current return\nvalue stack, and m is a list (p g) of the other threads and the\nglobal bindings.\n\nThe interpreter itself begins with the function bel, which takes an\nexpression e and starts the interpreter running with a single thread\nin which e is to be evaluated. The arguments it sends to ev represent\nthe usual (s r m) triple. So\n\n(list (list e nil))\n\nis an expression stack containing nothing except e, to be evaluated\nin a null environment. The second argument, nil, is the return value\nstack, which is empty because we're not returning from anything. And\nthe third argument is m, aka (p g), a list of the other threads\n(currently nil) and an environment to use as the global bindings.\n\nIf we jump ahead a few definitions to ev, we come to the core of the\ninterpreter. This function plays the role eval did in McCarthy's\nLisp. Its parameters implicitly pull an (e a) expression-environment\npair off the expression stack. There are only five things the\nexpression can be:\n\n1. A literal, in which case we return it.\n\n2. A variable, in which case we call vref to look up its value.\n\n3. An improper list, in which case we signal an error.\n\n4. A list beginning with a special form, in which case we call the\n   associated function stored in forms.\n\n5. An ordinary call, in which case we call evcall on it.\n\nI'm going to follow the trail of evaluating a literal to explain some\nthings about how evaluation works, then come back and examine the\nother cases.\n\nOne of the most important things to understand about the\ninterpreter is that it never returns a value till it terminates.\nThe way it implements returning a value in the program it's\nevaluating is not by returning a value itself, but by a recursive\ncall to the interpreter with a shorter expression stack and the\nreturn value consed onto the return stack. And that's what we see\nhappening in the code that runs when e is a literal:\n\n(mev s (cons e r) m)\n\nThat is what returning a value looks like.\n\nThe function mev (m = multi-threaded) is what the interpreter calls\nto continue evaluation after doing something. Its purpose is to check\nwhether interpretation should terminate, and if not, to allow another\nthread to run.\n\nThe first thing mev does is check if the current thread has run out\nof work to do. If so, if s is nil, it checks whether there are other\nthreads in p. If there are, it calls sched to run one. If not, if\nthis is the only thread and we've just finished it, then it returns\nwhatever's on top of the return value stack as the value of calling\nthe interpreter.\n\nIf we haven't finished the current expression stack, then we have to\ncheck whether we should stay in this thread or switch to another one.\nOrdinarily you want to give other threads a chance to run, but\nsometimes you can't, if you're doing something that requires multiple\nsteps to complete, and in the middle is in an inconsistent state.\n\nThe way a program signals that it doesn't want to be interrupted is\nby dynamically binding lock to a non-nil value. If lock is on, we put\nthe current thread on the front of the list of threads, and if not we\nput it on the end. Since sched always runs the first thread on the\nlist, if we keep the current thread on the front, it keeps running.\n\nNow that we've seen how mev and sched work, let's return to ev. If e\nis a variable, we call vref to evaluate it. And what vref ordinarily\ndoes is this:\n\n(aif (lookup v a s g)\n     (mev s (cons (cdr it) r) m)\n     (sigerr 'unbound s r m))\n\nYou may now recognize that kind of call to mev: that's returning a\nvalue. If the lookup succeeds, it returns the (var . val) pair it\nfound, so the value is the cdr of it. If lookup fails, it returns\nnil, in which case we've just encountered a reference to an unbound\nvariable, and we should signal an error.\n\nLet's skip down to lookup and see what it does. It checks, in order,\nwhether the variable has a dynamic binding, a lexical binding, or a\nglobal binding. At the end there are special cases for the two\nvariables globe and scope; for them the interpreter simply \"leaks\"\nthe corresponding parameter. Leak is an apt metaphor in this\nsituation because data is going from one layer of Bel to another:\nfrom the interpreter running in Bel to the Bel program it's\nevaluating.\n\nWe use binding to check whether a variable has a dynamic binding. It\nchecks by searching the expression stack looking for an entry binding\nthat variable. As we'll see when we get to its definition, dyn works\nby inserting a special entry on the expression stack listing the\nvariable it wants to bind and its value. There are other operators\nthat insert special entries on the expression stack too. These\nentries are distinguishable from ordinary expressions by beginning\nwith a pair called smark.\n\nWhile we're here, let's look at sigerr. This is how the interpreter\nsignals an error. As we saw earlier in the examples of continuations,\nit begins by looking for a dynamic binding for err, and if there is\none, it calls it using applyf, which we'll get to later. If there\nisn't a binding for err, then there's an error in the interpreter\nitself, and we call err about it.\n\nThis sort of code where things happen at two different levels--\nthe Bel instance running the interpreter, and the Bel program that\nthe interpreter is evaluating-- is inevitably a bit confusing, but\nthat comes with the territory when a language is written in itself.\nFor errors, at least, there is a simple rule of thumb: when there's\nan error in a program you're evaluating, you call sigerr, and when\nthere's an error in yourself, you call err.\n\nCalling sigerr is like a parent reporting that the baby is crying.\nCalling err is crying oneself.\n\nBut what about the first half of vref, the one in which (inwhere s)\nreturns true? This code is for handling assignments. In Bel, any\nvalue that lives in a pair can be assigned using set. For example,\n\n> (let x '(a b c)\n    (set (cadr x) 'z)\n    x)\n(a z c)\n\nThis code in vref is what makes it happen. It works as follows. When\nwe're in a set, another special entry (beginning as usual with smark)\nis put on the stack saying that we're not looking for the value of\nsomething, but its location. The function inwhere checks for one of\nthese, and if it finds one, we return not the value we're looking up,\nbut the pair it occurs in, plus either a or d to say whether it's in\nthe car or the cdr.\n\nNew global variables are created implicitly by assigning values to\nthem, and this is where that happens. The special stack entry found\nby inwhere says whether a new global binding should be created (it\nshould be for set, but not for push for example) and if it should, we\ncreate a new pair to hold its name and value, and splice it into the\nglobal variables.\n\nNotice that in this case the first argument to mev, at the end, is\n(cdr s) rather than s. We're discarding the special stack entry found\nby inwhere.\n\nIncidentally, this is a case where we need lock, because when this\nnew binding is created, the value is nil initially. So if code in\nanother thread looked up this variable, there would be a window\nduring which it seemed to have the value nil. The code that handles\nlocking is in the definition of set, which we'll see later.\n\nNow back up to ev. The next case is when e isn't a proper list. We\nknow by this point that e not an atom, because every atom is either a\nliteral or a variable. So e must be a list, but we have to make sure\nit's a proper one. If it isn't we call sigerr.\n\nBy the next line we know that e is a nonempty proper list. So the\nnext question is, is the first element a special form?  The variable\nforms is a list of (name . function) pairs telling the interpreter\nwhat to do when it encounters an expression beginning with name.\n\nThe first of these is smark, the pair we created for marking stack\nentries that are not just ordinary expressions. The initial value of\nforms\n\n(set forms (list (cons smark evmark)))\n\nmeans that when the expression we've just taken off the stack\nbegins with smark, we should call evmark. And in the definition of\nevmark we see the four types of stack entries we use smark for, each\nindicated by the symbol that comes after smark in the expression we\nput on the stack.\n\nOne of these, bind, we've already talked about. This is what dyn puts\non the stack to establish a dynamic binding. When we return back\nthrough one, all that should happen is that the dynamic binding\nceases to exist. The bind entry itself is a no-op; we just call\n(mev s r m) and get on with things.\n\nWe're also familiar with the idea of a loc entry; that's what we were\njust looking for in inwhere. We made a point of removing it from the\nstack once we'd found it. So if we return up through a loc entry,\nthat means we were unable to find a pair to modify, and we should\nsignal an error. E.g.\n\n> (set \\a 5)\nError: unfindable\n\nA fut (future) stack entry contains a closure to be called on\n(s r m). The interpreter inserts these when it needs to do\nsomething in several steps. This happens so often that there's a\nspecial fu macro (the resemblance to fn is intentional) for creating\nthese closures.\n\nThere's one of them in the prot clause of evcall. A prot (protect)\nstack entry means that an expression should be evaluated even when\ncalling a continuation throws control back over it. You'd use this\nfor example to make sure a file you opened eventually got closed.\nSince these protected expressions aren't supposed to return values,\nthe code for evaluating them includes a fu for throwing away the\nvalue that gets put onto the return value stack after the expression\nis evaluated: all this fu does it turn a call of the form (mev s r m)\ninto (mev s (cdr r) m). We'll learn more about protected expressions\nwhen we get to the code for creating them.\n\nThe rest of the special forms are defined using the form macro, which\nruns its arguments through formfn and then puts the result in an\nentry in forms. Let's start by looking at an example of a special\nform defined with it. The first is the definition of quote, which is\nabout as simple as a special form can get. The first parameter, (e),\nis the parameter list of the form as it will be called. So (e) means\nthat quote will take exactly one argument. We call it e, for\nexpression, because it won't have been evaluated. The remaining\narguments, a s r m, represent the lexical environment plus the usual\ns r m state of the world.\n\nThe body of the form is a familiar type of call to mev, representing\na return. So this definition says that quote takes one argument, e,\nand returns it unevaluated.\n\nThe definition of quote will be transformed by formfn into the\nequivalent of\n\n(fn v\n  (eif w (apply (fn (e) (list e))\n                (car v))\n         (apply sigerr 'bad-form (cddr v))\n         (let (e) w\n           (let (a s r m) (cdr v)\n             (mev s (cons e r) m)))))\n\nThe test expression in the eif accumulates all the form's parameters.\nIf an error occurs while doing that, we signal an error. (We know\n(cddr v) will be the familiar (s r m).) Otherwise we bind the\nparameters and evaluate the body of the form.\n\nThe reason we do this in two parts is in case someone calls the form\nwith the wrong arguments. If you're using form to define a form, you\ncan (and must) catch all other errors yourself, but you can't catch\nthat one. At least not short of using a single parameter to hold all\nthe arguments, and then teasing them out manually. Since that would\nmake form definitions ugly, the form macro does it for you.\n\n> (quote a b)\nError: bad-form\n\nNext comes the definition of if. Unlike quote, if does several\nthings, and when we do several things in a form, we don't just\nevaluate a block of code; we put the things we need to do on the\nstack and call mev.\n\nIn the base case, if the if has no arguments, we just return nil,\nusing the familiar formula. Otherwise we want to evaluate the first\nargument and then, if there are more arguments, evaluate the\nappropriate one depending on the value of the first. Which is\nbasically the code translated into English. Putting\n\n(list (car es) a)\n\non the stack is \"evaluate the first argument,\" and the conditional\nthat puts a closure that calls if2 on the stack, but only if (cdr es)\nis true, is \"if there are more arguments, evaluate the appropriate\none.\"\n\nNotice that if2 is just an ordinary function, not a form. It handles\nthe second part of evaluating an if, the choice of which subsequent\nexpression to evaluate depending on the value returned by the first.\n\nIf the value on top of the return stack is true, then the test\nexpression returned true, and the whole if returns the value of the\nsucceeding expression, so we just put (car es) onto the stack and go.\n\nBut if the first expression returned nil, we need to keep going.\nIf we're evaluating\n\n(if a b c d e)\n\nand a returns nil, then the value of the if expression is the value\nof\n\n(if c d e)\n\nand that is exactly what if2 is doing when it puts\n\n(cons 'if (cdr es))\n\non the stack. So the if form is recursive in the sense that it can\ncause another if expression to end up on the stack, where it will of\ncourse be handled by the if form.\n\nRegardless of what we put on the stack in if2, we need to discard\nthe value returned by the test expression, which is why the second\nargument to mev in if2 is (cdr r).\n\nThe if in if2 is where conditionalness (for lack of a better word)\ngets \"leaked\" from the Bel in which the interpreter is running to the\nBel program that the interpreter is evaluating.\n\nThe next form, where, is the one that creates the stack entries that\ninwhere looks for. It takes an expression e followed by an optional\nargument saying whether to create a new binding for a variable if\nthere isn't one already. It asks for e to be evaluated by putting\nthe conventional\n\n(list e a)\n\non the stack. But also, adjacent to this, it puts a special loc entry\non the stack saying that what we want when evaluating e is its\nlocation, not its value. This will be seen by inwhere in functions\nlike vref and handled accordingly.\n\n> (let x 'a\n    (where x))\n((x . a) d)\n\nThis return value is a list of the actual lexical binding created by\nthat let, plus a d indicating that the value in question is in the\ncdr of the pair. It's hard to imagine a reason to call where in\nordinary code; you use it in macros like set that modify things.\n\nNotice incidentally that the second, optional argument to where isn't\nevaluated. It's inserted directly into the loc entry built by where.\n\nAfter where, we see another form we're somewhat familiar with: dyn,\nwhich establishes dynamic bindings. This definition is like that of\nif in the sense that there's a function, dyn2, that does the second\nhalf of the work. The first half is to put the first expression, e1\non the stack to get it evaluated. Its value will be what we bind the\nvariable to.\n\nIn dyn2 we see this binding being created, in the form of a stack\nentry being put on the stack. We also ask for the evaluation of the\nsecond expression, and we put that request, (e2 a), in front of the\nbind entry. If we see a reference to v during the evaluation of e2,\nthe bind entry will be sitting on the stack to tell us it has a\ndynamic binding.\n\nNotice that the payload of the bind entry will be a (var . val)\npair of the familiar form, just like we find in lexical and global\nenvironments. This is not a coincidence. It means the code that sets\nglobal or lexical variables also sets dynamic bindings; in fact, the\ncode doesn't even know which type it's operating on; all it knows is\nthat it's doing something to the cdr of a pair.\n\n> (dyn x 'a\n    (do (set x 'b)\n        x))\nb\n\nThis wasn't a deliberate design choice. Like many other aspects of\nBel, it's just a consequence of making the interpreter as simple as\npossible. I tried to let simplicity make as many decisions for me as\nI could.\n\nLike where and dyn, after works by putting a special entry on the\nstack-- this time a prot entry. We saw what a prot entry means when\nexamining evmark. All the after form does is create the prot entry;\nthe real work happens elsewhere.\n\nThe ccc form creates a continuation, or more precisely generates\ncode that calls a function on a continuation. A continuation itself\nis a simple thing-- basically just s and r, which between them are a\ncomplete representation of the state of the current thread.\n\nFinally, the thread form takes an expression and starts evaluating it\nin a new thread. Unusually, nearly all the work is in the last\nargument to mev, where we build new expression and return value\nstacks much as we did up in bel. The second argument (cons nil r)\nmeans the thread expression itself returns nil in the thread in which\nit occurs.\n\nAlong with lit and apply, those seven operators-- quote, if, where,\ndyn, after, ccc, and thread-- are all the special forms. But if you\nneed more you can easily define them with form.\n\nNow we come to the code that handles the last case in ev, an ordinary\ncall. Its definition looks a lot like the code we saw in the forms.\nAll the code in the interpreter is either calls to mev or to things\nthat call mev. By now we're used to reading this sort of thing:\nevcall puts the car of the expression on the stack to be evaluated,\nplus a closure that calls evcall2 to do the rest of the work.\n\nThe rest of the work, as we see in evcall2, begins with checking\nwhether the value of the car of the expression is a macro. If it is,\nwe call applym. If it isn't, we know we can evaluate the arguments,\nso we put them all on the expression stack, along with a closure that\nwill snap the corresponding number of values off the top of the\nreturn stack, and then send them plus the operator to applyf.\n\nWhen we look at applym, we see that the evaluation of a macro call\nalso goes through applyf, but with different arguments. We apply the\nfunction within the macro, (caddr mac), to the unevaluated arguments,\nargs. This generates the macroexpansion. But the macroexpansion then\nhas to be evaluated, and that's the purpose of this closure we put on\nthe stack:\n\n(fu (s r m)\n  (mev (cons (list (car r) a) s)\n       (cdr r)\n       m)\n\nThe (car r) within it is a sign of something unusual happening: we're\nmoving something (the macroexpansion) from the return value stack to\nthe expression stack.\n\nThere's a slight surprise waiting in applyf: the apply special form\nis implemented as a clause here. What it does is pretty simple: apply\nis a recursive call to applyf with the arguments joined together. The\nnext case is the general one, when f is a lit, and in that case we\ncall applylit.\n\nFunctions aren't the only thing you can apply in Bel. You can apply\nanything if you define a way to do it. We haven't gotten to this yet,\nbut numbers for example return the corresponding element of a list:\n\n> (3 '(a b c d))\nc\n\nSuch expressions are also settable:\n\n> (let x '(a b c d)\n    (set (3 x) 'z)\n    x)\n(a b z d)\n\nSince the thing we're about to apply might be a settable reference,\nthe first thing we need to check in applyprim is whether we're in\na where, just as we do when looking up the value of a variable. If we\nare, then we look in a list called locfns to see if there's one that\nmatches, and if so we call the corresponding function on the function\nand its arguments.\n\nLet's skip down to the locs defined after applyprim to see some of\nthese. The loc operator defines new locfns, and after its definition\nwe see the loc for car. Or more precisely, a loc whose test will\nmatch the symbol car; the keys of locs are predicates, not symbols.\n\nWe don't need many locs; knowing how to set the car or cdr of a pair\nwill handle most cases. When we look at the loc for car, it's pretty\nsimple: it just \"returns\" (by consing onto the return stack) a list\nof the argument and an a, to indicate we're looking in the car.\n\n> (let x '(a b c)\n    (where (car x)))\n((a b c) a)\n\nThe loc for cdr is similarly simple.\n\nAfter the inwhere check, we see cases for the four predefined\napplyable things in Bel: primitives, closures, macros, and\ncontinuations.\n\nTo apply a primitive, we call applyprim. Let's skip down to it and\nsee what it does. The first thing applyprim does is look the prim up\nin a list of prims to see if it really is one. If you're wondering\nwhy prims is organized the way it is, the primitives are grouped by\nthe maximum number of arguments they take. This is frankly a trick to\nget around not having numbers yet; we can use udrop with the position\nof the prim in prims to detect calls with too many arguments.\n\nSince primitives can take at most two arguments, we pick out two,\nwhich we call a and b. Since car and cdr of nil both yield nil, this\nis how we make missing arguments to primitives default to nil.\n\n> (join)\n(nil)\n\nIf the call is a legal one, we call the primitive with the same name.\nThis is another place where behavior leaks from the instance of Bel\nin which the interpreter is running to the code it's evaluating: when\nthe interpreter sees a call to car in the code it's evaluating, the\ninterpreter calls car itself.\n\nThe primitive might signal an error, if for example we call car on an\natom. So the case expression containing the calls to the primitives\nis wrapped in an eif, and if there's an error, we leak the same\nerror object (whose nature is unspecified) up into the program we're\nevaluating. Otherwise we just \"return\" whatever the call returns, by\nconsing it onto the return stack.\n\nSince primitives are one of the cases where it's most confusing to\nhave things happening at two levels, I want to be as clear as\npossible about how they work. The interpreter can call car. That's\ntrue by assumption. Up in the program being evaluated, we want car to\nhave a value. So we give it a sort of placeholder value, the list\n(lit prim car), which means, in effect, \"please call car for me,\ninterpreter,\" which the interpreter does whenever it encounters one\nof these placeholders being called like a function.\n\nNow back up to applylit. The next clause handles all the functions\nthat aren't prims, and it's implemented by calling applyclo. But\nsince functions are just lists and there's nothing to stop someone\nfrom trying to call an ill-formed clo, we have to check the validity\nof every component of this supposed closure first.\n\nIf it checks out, we send it and the arguments to applyclo. This\nfunction does two things, in the sense of putting two things on the\nexpression stack. The first fu on the stack calls pass to get a\nlexical environment representing the parameter bindings onto the top\nof the return stack, and the second simply puts the body of the\nfunction (which is a single expression) on the stack, with those\nbindings as its environment.\n\nThe real work is done by pass and its subroutines typecheck and\ndestructure. Between them these take a parameter list and a list of\narguments, and turn them into an environment consisting of\n(var . val) pairs.\n\nBefore we look at them I should explain a feature of Bel parameter\nlists that we haven't encountered yet: type checking. A parameter of\nthe form\n\n(t v f)\n\nmeans that unless f is true of the value passed to v, an error will\nbe signalled. So if we define\n\n(def consa ((t xs pair))\n  (cons 'a xs))\n\nand we call it with an argument that's not a pair, we'll get an\nerror:\n\n> (consa 'z)\nError: mistype\n\nIf the variable and test in a t parameter are symbols, you can simply\nconjoin them with a vertical bar.\n\n(def consa (xs|pair)\n  (cons 'a xs))\n\nThe reader expands x|y into (t x y).\n\nYou can nest t parameters, o parameters, and parameters that are\npairs without restriction.\n\n(def foo ((o (t (x . y) [caris _ 'a]) '(a . b)))\n  x)\n\n> (foo '(b b))\nError: mistype\n> (foo)\na\n\nThough as you can see, programs get hard to read if you do too much\ncomputation in the parameter list.\n\nThe way pass works is by descending depth-first through the\nparameter list, trying to match it up with the arguments. It takes\nsix arguments. The last three are the familiar (s r m), and the\nfirst three represent a part of the parameter list, the\ncorresponding part of the argument list, and the environment we've\naccumulated so far.\n\nThe reason we have to give pass (s r m) as well is that the work it\ndoes can't be done as a simple subroutine. It's not simply matching\nparameters and arguments. The default expressions for optional\nparameters mean we're really running the interpreter when we call\npass. And pass doesn't return the result of matching parameters with\narguments, but rather ensures that one ends up on the top of the\nreturn value stack. (In other words, it causes a value to be returned\nin the Bel program that the interpreter is evaluating, rather than\nreturning a value within the Bel instance in which the interpreter is\nrunning.)\n\nIt starts by defining a local function, ret, that returns a value in\nthe sense of calling mev with the new value consed onto the return\nstack. Then we have a bunch of cases to consider. If there are no\nparameters left, then we check whether there are any arguments left.\nIf there are, the function has been called with too many arguments,\nand we should signal an error; if there aren't, then we've finished,\nand we can put the environment we've built onto the return stack.\n\nIf we get past that test, we know pat, the parameter or parameters,\nis non-nil. Is it a literal? If so that's an error, because you\ncan't use a literal (other than nil) as a parameter. Whereas if it's\na variable, we can just add a new (var . val) pair of it and whatever\nthe arguments are to the env we've built so far, and \"return\" it\nusing ret.\n\nSince literal and variable between them cover all atoms, if we get\npast these tests we know pat must be a pair, so there are three\npossibilities left: that's it's a t parameter, that it's an o\nparameter, or that it's an ordinary list.\n\nIf it's a t parameter, we call typecheck, and what that does is put a\ncall to the test function on the expression stack, followed by a\nclosure that checks whether that call returned true, and if so\nrecursively calls pass with the var stripped of the type check.\nOtherwise it signals an error.\n\nWhereas if pat is an optional parameter, since we know we have a\nvalue for it (whatever arg is), we can ignore the default expression\nand call pass recursively as if it were an ordinary parameter.\n\nHow do we know we have a value for pat? What if arg is nil? This\nis not the point where we check whether we've run out of arguments.\nIf arg is nil at this point, that means the value being passed as an\nargument is nil, not that there are no arguments.\n\nIn the final case in pass, the parameter is a list, and we need to\ncall destructure to go inside it and the arguments to see if they\nmatch. When you call a function with a parameter list (rather than a\nparameter like args that's a single variable), this is the case you\ngo through the first time through pass.\n\nThis is where you notice if you've run out of arguments, and that is\nthe first thing destructure checks. If the first parameter is an\noptional parameter, you're ok so far, because you can evaluate its\ndefault expression to get a value for it. In that case put the\ndefault expression on the stack, followed by a pair of closures that\nin effect do a depth-first traversal of the parameter list, one\ncalling pass on the first parameter (with the value returned by the\ndefault expression as the \"argument\"), and a second calling pass on\nthe remaining parameters, with nil as the argument, since we already\nknow it's empty.\n\nIf arg is nil and the first parameter in our list isn't an optional\none, then we know the function was called with too few arguments,\nand we signal an error.\n\n> ((fn (x y) x) 'a)\nError: underargs\n\nThe other error case is when arg is a non-nil atom. We can match such\nan argument with a single parameter, but not with a list of\nparameters. So if arg is an atom, we signal an error.\n\n> ((fn ((x y)) x) 'a)\nError: atom-arg\n\nThe default clause of destructure is the \"normal\" case where we have\na non-empty list of arguments. Here we also use mev to do a\ndepth-first traversal of the parameters, very much like the one we\nsaw in the first clause of destructure.\n\nThe fact that pass uses the environment it's in the process of\nbuilding as the environment when it puts expressions on the stack\nmeans the bindings of earlier parameters are visible to the code in\nlater ones:\n\n> ((fn (x (o y x)) y) 'a)\na\n> ((fn (f x|f) x) pair 'a)\nError: mistype\n\nNow to continue with our own depth-first traversal of the\ninterpreter, back up in applylit, which we're halfway through. The\nnext clause is for macros. The difference between applying a macro\nand an ordinary macro call is that when you apply an operator, the\narguments have already been evaluated. But you can generate a macro\ncall easily by consing the macro onto the front of a list of quoted\narguments. So you just call applym on that. (You could send it to\nmev, but you know it will end up in applym, so you might as well go\nstraight there.)\n\nThe next clause in applylit is for continuations. After checking the\nvalidity of a continuation, we call applycont to call it.\n\nIn the definition of ccc we saw that making a continuation is simple:\nit's just a list of s and r. The work is done when the continuation\nis called. But even then it's not that much work. If a continuation\nis\n\n(lit cont s2 r2)\n\nyou could call it on an argument a simply by saying\n\n(mev s2 (cons a r2) m)\n\nexcept for two things. One is that you have to check that the form of\nthe continuation is valid, just as you do with a closure. The other\nis that there may be prot entries in your current evaluation stack,\nand the whole point of prots is that those expressions get evaluated\neven if evaluation is interrupted before you reach them.\n\nSo you can't just use s2 as the first argument to mev. You have to\ncombine s2 with everything that you need to keep from your current\nexpression stack. That includes prots and also binds, since the code\nin a prot could refer to a dynamically bound variable.\n\nThose two possibilities account for all the complexity of calling\ncontinuations. Otherwise it would be one line in applylit.\n\nFinally, in the last clause of applylit, we see the code that makes\nit possible, for example, to use a number in functional position:\n\n> (2 '(a b c))\nb\n\nThe variable virfns (for virtual functions) is a list of (n . f)\npairs where n is a type of lit and f is a function that generates an\nexpression to be evaluated when such a lit is encountered in\nfunctional position. Since these functions generate expressions,\nthey're a lot like macros.\n\nAlthough we haven't introduced numbers yet, here's the virtual\nfunction for them, so you can see what one looks like:\n\n(vir num (f args)\n  `(nth ,f ,@args))\n\nIt looks like a macro definition, and does much the same thing.  It\nwill turn\n\n(2 '(a b c))\n\ninto\n\n(nth 2 '(a b c))\n\nThere's a good deal more of the language still to come, including\nnumbers and I/O, but we have now seen the entire Bel interpreter.\n\nNext come several functions for operating on functions. The first,\nfunction, tells whether something is a function and if so what kind.\n\n> (map function (list car append 'foo))\n(prim clo nil)\n\nThe next, con, returns a constant function:\n\n> (map (con 'yo) '(a b c))\n(yo yo yo)\n\nThen comes an important one, compose, which takes any number of\nfunctions and returns their composition. For example, cadr is\nequivalent to a composition of car and cdr:\n\n> ((compose car cdr) '(a b c))\nb\n\nWhen the names of what you're composing are symbols or numbers, Bel\nlets you abbreviate calls to compose with colons.\n\n> (car:cdr '(a b c))\nb\n\nFunctional composition lets you eliminate a lot of unnecessary\nvariables. I warned earlier that the definitions that occur early in\nthe Bel source are not in truly idiomatic Bel, because that would\nrequire things that hadn't been defined yet. Composition is one of\nthem. If you had to define cadr in idiomatic Bel you'd say\n\n(set cadr car:cdr)\n\nThere's a special abbreviation for composing no, which is to prepend\na tilde.\n\n> (map ~cdr '((a) (a b c) (a b)))\n(t nil nil)\n\nNow we can understand the idiomatic definition of all that I gave\nearly on:\n\n(def all (f xs)\n  (~some ~f xs))\n\nIt's actually inaccurate to say that compose operates on functions,\nbecause it can operate on anything that we can call like a function.\n\n> (2:or nil '(a b c))\nb\n\nI could solve this problem by inventing some new term for things\nthat can be called like functions, but that seems a bit bogus, so\ninstead I'm going to be irresponsible and just talk about functions\nwhen I mean things callable like functions. Because the fact is that\njust about anywhere you can use a function, you can use anything else\nthat's callable.\n\nThe next function, combine, produces something more general: it takes\none argument, f, and returns a function that combines functions using\nf. So this for example\n\n((combine and) car cdr)\n\nwill yield a function equivalent to\n\n(fn (x)\n  (and (car x) (cdr x)))\n\n> (map ((combine and) car cdr)\n       '((a . nil) (a . b) (nil . b)))\n(nil t nil)\n\nSince combine of and and or are so frequently needed, we predefine\ntwo functions, cand and cor, for those cases.\n\n> ((cand pair cdr) '(a b))\n(b)\n> ((cor char pair) 'a)\nnil\n\nNext come the two classic reduction functions, left and right fold.\nOnce again, their definitions are complicated by taking any number of\narguments, and they're easier to understand if we start with\nthree-argument versions:\n\n(def foldl3 (f base xs)\n  (if (no xs)\n      base\n      (foldl3 f (f (car xs) base) (cdr xs))))\n\n(def foldr3 (f base xs)\n  (if (no xs)\n      base\n      (f (car xs) (foldr3 f base (cdr xs)))))\n\nWhen we look at these versions it's clear that left fold works by\ngrowing the base case and then returning it when we get to the end of\nthe list, and right fold works by growing a recursive call tree that\nbuilds its value on the way back up.\n\nHere is a series of equivalent calls showing how a left fold plays\nout:\n\n(foldl3 cons nil '(a b))\n(foldl3 cons (cons 'a nil) '(b))\n(foldl3 cons (cons 'b (cons 'a nil)) nil)\n\nThis yields (b a). The corresponding right fold,\n\n(foldr3 cons nil '(a b))\n(cons 'a (foldr3 cons nil '(b)))\n(cons 'a (cons 'b (foldr3 cons nil nil)))\n\nyields (a b).\n\nFor comparison, the reduce function we already have is a right fold\nwhere the base case is the last element of the list.\n\nThe next function, of, is for situations like the following:\n\n(+ (car x) (car y) (car z))\n\nWith it you can write\n\n((of + car) x y z)\n\nAnd upon is a sort of reverse call, in the sense that it saves an\nargument, and then tells you what calling things on that argument\nwill return:\n\n> (map (upon '(a b c))\n       (list car cadr cdr))\n(a b (b c))\n\nThe next function, pairwise, returns true iff its first argument is\ntrue of every two-element window in the second. For example\n\n(pairwise f '(a b c d))\n\nis equivalent to\n\n(and (f 'a 'b) (f 'b 'c) (f 'c 'd))\n\nThat expression\n\n(all [id _ (car args)] (cdr args))\n\nin the definition of = would have been\n\n(pairwise id args)\n\nif we'd had pairwise then.\n\nThe next function, fuse, takes a function that's expected to return\na list, plus one or more lists, and returns the result of appending\ntogether the results of calling the function on successive elements\nof the lists. Which description incidentally demonstrates the\nadvantage of source code over natural language in a spec.\n\n> (fuse [list 'a _] '(1 2 3))\n(a 1 a 2 a 3)\n\nWe use it in letu, which is for creating uvars. In eif we had to say\n\n(with (v (uvar)\n       w (uvar)\n       c (uvar))\n  ...)\n\nWith letu that becomes\n\n(letu (v w c)\n  ...)\n\nYou can also make one uvar by using a single variable instead of a\nlist of variables.\n\nWe use letu in pcase, which is like a case statement but with\npredicates as the keys.\n\n> (map [pcase _\n         no   'empty\n         atom 'atom\n              'pair]\n       '(a nil '(b c)))\n(atom empty pair)\n\nThe next function, match, is like = except that functions occurring\nin the second argument are treated as predicates, and ts match\neverything.\n\n> (match '(a (b) c d) (list 'a pair 'c t))\nt\n\nThe split function breaks its second argument at the point where its\nfirst argument returns true.\n\n> (split (is \\a) \"frantic\")\n(\"fr\" \"antic\")\n\nThe next two macros are for conditionally evaluating blocks of code:\nwhen's body is evaluated when the test is true, and unless's when\nit's false.\n\nNow we come to the code that implements numbers. Before we continue\nI'd like to remind the reader of the principle that when something\nis defined in the Bel source, the goal is to specify what it means\nand not to provide an efficient implementation.\n\nNumbers in Bel take the form\n\n(lit num (sign n d) (sign n d))\n\nwhere the first (sign n d) is the real component and the second the\nimaginary component. A sign is either + or -, and n and d are unary\nintegers (i.e. lists of t) representing a numerator and denominator.\n\nSo 2/3 is\n\n(lit num (+ (t t) (t t t)) (+ () (t)))\n\nand 4-1/2i is\n\n(lit num (+ (t t t t) (t)) (- (t) (t t)))\n\nYou'll never see this representation unless you go looking for it,\nbecause Bel reads and writes numbers in the conventional way.\n\n> (lit num (+ (t t) (t t t)) (+ () (t)))\n2/3\n\nWe're going to build numbers up from the bottom, starting with\noperators for unary integers and finally defining the operators one\nactually uses in programs.\n\nWe start with a selection of constant unsigned integers. Then come a\nset of operators for them. Operators for unsigned integers have names\nbeginning with i. Notice how with unary numbers, arithmetic\noperations turn out to be familiar list operations. E.g. + is append,\nand * is a fold of a fuse. One quirk: since these numbers are\nunsigned, i- has to return two values: the result and an indication\nof whether it's positive or negative.\n\nThe next level of numbers is unsigned rationals, which are (n d)\npairs of unsigned integers. Functions for operating on them begin\nwith r.\n\nThe next level up from that is signed rationals, which are (s n d),\ntriples where s is + or - and (n d) is an unsigned rational.\nOperators on signed rationals begin with s.\n\nThe top level, the numbers that programs actually use, are complex\nnumbers. These have the form shown above. Operators for complex\nnumbers have names beginning with c.\n\nNow that we've defined numbers, we get a series of functions for\nmaking them, recognizing them, and taking them apart.\n\nThe one nontrivial one is simplify, which simplifies a rational by\ndividing both components by their greatest common factor. This is\ncalled by buildnum after reading numbers and after every arithmetic\noperation.\n\nAfter buildnum and recip we see the definitions of the +, -, *, and /\nfunctions that are actually used in programs.\n\n> (+ .05 (/ 19 20))\n1\n\nNow that we have numbers we can define some common functions that use\nthem, like len for finding the length of a list\n\n> (len \"foo\")\n3\n\nand pos for finding the position of something in one\n\n> (pos \\a \"ask\")\n1\n\n(In Bel, lists are one-indexed.)\n\nWe use pos in charn, which returns a unique integer for each\ncharacter based on its position in chars, a list of all the\ncharacters.\n\n> (map charn \"abc\")\n(97 98 99)\n\nWe can also define functions for comparing numbers, and more\ngenerally for comparing things that can be transformed into numbers\nor lists of them.\n\nThe comparison operators used in programs are the familiar < and >.\nThese are defined in terms of bin<, which compares two objects by\nlooking up a comparison function for them.\n\nThe comparison functions for different kinds of objects are kept in\ncomfns, which is a list of pairs of functions (f . g) where f is a\npredicate (e.g. real) and g is a function of two arguments that\nreturns true iff the first is less than the second.\n\nComparison functions are defined using com, and following its\ndefinition we see the four predefined comparison functions, for\nreals, chars, strings, and symbols. So < and > work for arguments of\nthose types,\n\n> (> 3/4 2/3)\nt\n> (< 'apple 'apply)\nt\n\nand if you use com to define a comparison function for other kinds of\nobjects, < and > will work for them too.\n\nNotice that bin< has an explicit test for nil arguments. That's\nbecause nil is both a symbol and a string (the empty string).\n\nThen come a few more predicates on numbers which are mostly used in\ntype checking-- int, whole, and pint (positive integer).\n\nNext comes a familiar name, yc. This is the Y combinator, which is\nused to generate recursive functions. It's used in rfn to make a\nrecursive function with a name,\n\n> ((rfn foo (x) (if (no x) 0 (inc:foo:cdr x))) '(a b c))\n3\n\nand rfn in turn is used to define afn, which lets you refer to a\nfunction within itself as self.\n\n> ((afn (x) (if (no x) 0 (inc:self:cdr x))) '(a b c))\n3\n\nWe use afn in wait, which takes a function and calls it till it\nreturns a non-nil value.\n\n> (set x '(nil nil a b c))\n(nil nil a b c)\n> (wait (fn () (pop x)))\na\n> x\n(b c)\n\n(We haven't defined pop yet but it's the usual pop.)\n\nThe function runs takes a function and a list and breaks up the list\ninto stretches for which the function returns true or false.\n\n> (runs pint '(1 1 0 0 0 1 1 1 0))\n((1 1) (0 0 0) (1 1 1) (0))\n\nUsing whitec, which returns true of whitespace characters, we can use\nruns to pick the words out of a string:\n\n> (tokens \"the age of the essay\")\n(\"the\" \"age\" \"of\" \"the\" \"essay\")\n\nBut since tokens can take any function or object to treat as a break,\nyou can use it for more than picking out words.\n\nThe function dups returns all the elements of a list that occur more\nthan once in it.\n\n> (dups \"abracadabra\")\n\"abr\"\n\nThe next function, simple, is a predicate true of atoms and numbers.\nYou need this for e.g. the base case of tree traversals.\n\nThe do1 macro is like do except that it returns the value of the\nfirst expression in its body rather than the last. We'll see an\nexample soon when we get to the queue functions.\n\nThe consif function conses something onto the front of a list only if\nit's non-nil.\n\n> (consif (cadr '(a)) '(x y))\n(x y)\n\nThe check macro evaluates an expression and returns its value only if\nits second argument returns true of it.\n\n> (check (car '(1 2 3)) odd)\n1\n> (check (car '(1 2 3)) even)\nnil\n\nThe optional third argument is an expression to evaluate to get an\nalternate value in case the function returns false.\n\n> (check (car '(1 2 3)) even 2)\n2\n\nThe withs macro is like with except that the bindings of the\npreceding variables are visible in the expressions defining the\nvalues of later ones.\n\n> (let x 'a\n    (withs (x 'b\n            y x)\n      y))\nb\n\nThe bind macro is like a call to dyn with a body. Since bind is a\ngeneralization of dyn, you would not ordinarily use dyn in programs.\n\nThe atomic macro uses bind to bind lock during the evaluation of its\nbody. As we saw earlier in mev, the current thread won't be\ninterrupted so long as lock is dynamically bound in it to a non-nil\nvalue. So if you have a series of expressions that you don't want\ninterrupted because they'd leave something in an inconsistent state,\nyou can protect them by wrapping an atomic around them.\n\nThe tail function returns the rest of its second argument from the\npoint where its first argument returns true of it, if any.\n\n> (tail [caris _ \\-] \"non-nil\")\n\"-nil\"\n\nThe function dock takes the last element off a list\n\n> (dock '(a b c))\n(a b)\n\nwhile lastcdr returns the last non-nil cdr of a list\n\n> (lastcdr '(a b c))\n(c)\n\nand last uses it to get the last element.\n\n> (last '(a b c))\nc\n\nNow come three functions for manipulating queues. A queue is\nrepresented as a list within a list. That way several variables can\nbe set to the same queue.\n\nIf you modify the middle of a list that is the value of several\nvariables, the modification is shared:\n\n> (set x '(a b c) y x)\n(a b c)\n> (set (cadr x) 'z)\nz\n> y\n(a z c)\n\nBut there is no way to put something on the front of a list in a way\nthat will be shared by multiple variables that were set to it. We\nhaven't gotten to push yet, but I'll use it anyway to make this\nclear. When you push something on the front of a list, you're\nmodifying the value of a variable, not the list structure itself.\n\n> (push 'hello x)\n(hello a z c)\n> x\n(hello a z c)\n> y\n(a z c)\n\nTo modify a value that several variables share, you have to be able to\ntranslate it into changing the car or cdr of some existing pair. And\nif the shared value is a list within a list, you can.\n\n> (set x '((a)) y x)\n((a))\n> y\n((a))\n> (push 'hello (car x))\n(hello a)\n> y\n((hello a))\n\nThat's why queues are represented as lists within lists.\n\nYou make a new queue with newq, put something in a queue with enq,\nand take something off with deq.\n\n> (set x (newq))\n(nil)\n> (enq 'a x)\n((a))\n> (enq 'b x)\n((a b))\n> (deq x)\na\n> x\n((b))\n\nNotice enq and deq use atomic. Otherwise you could get errors if code\nin another thread did something to a queue while you were in the\nmiddle of doing something to it.\n\nNext we see the set macro itself. This calls hug to assemble the\nimplicit pairs of arguments, and then for each pair (p e) generates\nan expression in which a where is wrapped around p, and then the\nappropriate half of the resulting pair is set to the value of e.\nSo e.g.\n\n(set (car x) 'a)\n\nis expanded into the equivalent of\n\n(atomic (let v 'a\n          (let (cell loc) (where (car x) t)\n            ((case loc a xar d xdr) cell v))))\n\nWe also have a more general macro, zap, that modifies the value of\nsomething by applying a function to it.\n\n> (let x '(a b c)\n    (zap cdr x)\n    x)\n(b c)\n\nIt's instructive to compare the definitions of set and zap. They're\nmuch the same, except that zap has to wrap a call to apply around the\ncurrent value of the appropriate half of the pair returned by where.\n\nOne subtle difference: the second argument to where in set is t,\nwhereas in zap it's omitted (and thus defaults to nil). That's\nbecause setting an unbound variable should create a binding for it,\nbut zapping one shouldn't.\n\nWith zap it becomes easy to write a whole class of other macros we\nneed, like ++ and --, which increase and decrease the value of\nsomething\n\n> (let x '(1 2 3)\n    (++ (car x) 10)\n    (-- (cadr x))\n    x)\n(11 1 3)\n\nand push and pull, which put something onto the front of a list and\nremove something from one\n\n> (let x '(a b c)\n    (push 'z x)\n    (pull 'c x)\n    x)\n(z a b)\n\nSince pull passes the optional comparison function to rem, we can say\n\n> (let x '(7 3 0 9 2 4 1)\n    (pull 4 x >=)\n    x)\n(3 0 2 1)\n\nI think this sort of \"porosity\" is in general a good idea. There's a\ncase to be made for treating functions as black boxes, but with\nmacros you often want to acknowledge what a macro expands into and\npass through its optional arguments if you can.\n\nNow we have all the operators we need to write the Bel reader. This\nis like an inverted pyramid built upon the rdb primitive, which reads\na single bit.\n\nWe want to be able both to read a character from a stream and also to\nlook at the stream to see what character is waiting to be read. We\nsimulate that with a global list of \"unconsumed\" characters, one for\neach open stream, kept as a list of (stream . char) pairs in cbuf.\nAt first the only open input stream is the initial one, represented\nby nil, so cbuf starts out with one entry, (nil . nil), which is\n(nil).\n\nAfter cbuf we see open and close, which call the ops and cls\nprimitives respectively, but also create and delete cbuf entries for\nthe streams involved.\n\nNext comes peek, which tells you the next character waiting to be\nread from a stream. As well as streams, the Bel I/O functions take\nqueues of characters (i.e. strings within lists), and that's what\nthe first test in peek is checking for. If s is a queue, peek just\nreturns the first element. Otherwise it begins by checking cbuf to\nsee if it contains a character for this stream. If it does, peek\nreturns it. Otherwise it calls bitc to try to read a new character.\n\nThe bitc function is where bits returned by rdb get turned into\ncharacters. It accumulates bits in bbuf, which is a list of\n(stream . bits) pairs. Once bits = the representation of some\ncharacter in chars, bitc returns that character.\n\nThe rdb primitive is non-blocking, meaning if no bit is currently\navailable from the stream passed to it, it returns nil instead of\nwaiting for one. Since bitc does the same, returning nil immediately\nif it gets nil back from rdb, it's non-blocking too. But the wait\nexpression in peek means it won't return till bitc gives it a\ncharacter or eof. If peek gets an eof, it returns nil.\n\nNext comes rdc, which is like peek but consumes the character it\nreturns. I.e. if a source has characters waiting to be read, repeated\ncalls to peek will return the same character, and repeated calls to\nrdc will return successive ones.\n\n> (let s '(\"abc\")\n    (list (peek s) (peek s)))\n\"aa\"\n> (let s '(\"abc\")\n    (list (rdc s) (rdc s)))\n\"ab\"\n\nThe structure of rdc is similar to that of peek. First check if the\nargument is a stream. If it is, either return whatever's stored in\ncbuf (wiping the cbuf entry in the process) or call bitc.\n\nLike peek, rdc waits till bitc gives it a character or eof, and\nreturns nil in the latter case.\n\nThen come some functions for recognizing types of characters.\nWhether a character is a digit depends on the base, which is why\ndigit takes an optional base argument.\n\n> (digit \\a)\nnil\n> (digit \\a i16)\nt\n\nThe next function, breakc, returns true iff a character signals the\nend of a symbol or number. Among the characters treated as breakcs\nare those used as keys in syntax; we'll see soon which those are.\n\nThe signc function returns true iff its argument is a numeric sign,\nand intrac is for detecting characters that have a special meaning\nif they occur within symbols. I'll explain what they do when we get\nto that part of the reader.\n\nThe source function returns true iff its argument is something that\ncan be read from, i.e. either nil (representing the initial input\nand output streams), an object of type stream, or a queue of\ncharacters.\n\nThen comes read itself. All its arguments are optional: a source to\nread from, which defaults to ins, the default input stream; a base to\nread numbers in, which defaults to 10; and a value to return in case\nof eof, which defaults to nil.\n\nIn read we see the first parameters with type restrictions; the first\nargument has to be a source, and the second has to be between 2 and\n16 inclusive. You can use type checking however you like, but I\npersonally use it only to catch errors that won't be caught\notherwise.\n\nThen comes saferead, which is like read but returns an alternate\nvalue if there's an error or we get an eof from the stream.\n\nFinally comes the actual reader, rdex, which is to reading what ev\nis to evaluation. There is one new parameter in rdex: share, which is\na list of shared structure we've encountered so far.\n\nSometimes it matters when the same pair occurs multiple times in a\ntree. For example, when we used smark to mark special stack entries\nin the interpreter, it mattered that the cars of such entries were id\nto smark and not merely = to it. The Bel printer and reader use\nlabels of the form #n, where n is whole number, to mark shared pairs.\nFor example:\n\n> (let x '(a)\n    (list x x))\n(#1=(a) #1)\n> (set x '(a #1=(b) #1 c))\n(a #1=(b) #1 c)\n> (id (2 x) (3 x))\nt\n\nThe share parameter keeps track of shared objects we've read so far,\nand their labels. It's passed to most functions in the reader, and\nmost return two values: whatever has been read, and the share list.\n\nThe first thing rdex does is call eatwhite to consume any whitespace\nbefore the object it's trying to read. There are two kinds of\nwhitespace, corresponding to the two clauses in eatwhite: invisible\ncharacters like spaces and linefeeds, and comments, which begin with\nsemicolons and continue till the end of the current line. In the\nlatter case we call charstil to consume all the characters up to the\nnext linefeed.\n\nWhen it has finished reading whitespace, rdex can do one of three\nthings depending on what rdc sees next. If rdc returns nil, that\nmeans the stream is out of characters, and we return whatever we've\nbeen told to return in case of eof. Otherwise the value returned by\nrdc is either a syntax character, like e.g. a left parenthesis or a\ndouble quote, in which case we have something special to do, or an\nordinary character, in which case we call rdword, which reads a word\n(roughly a symbol or number).\n\nThe syntax characters are for rdex what special forms are for ev.\nLike forms, syntax is a list of (char . function) pairs that\ndescribe what to do if each character is encountered. There is a syn\noperator, akin to form, that defines the behavior of each character.\nThe first syn, for example, defines what happens when the reader\nencounters a left parenthesis: it calls rdlist to read the elements,\nstopping when it encounters a right parenthesis.\n\nIf we skip down to rdlist, we see that it too begins with an\neatwhite. Then there are several cases depending on what predicate\nis true of whatever's seen by peek. If there's no character, then we\nhave a read error, because we at least need to see the list\nterminator (e.g. right parenthesis) before we're done. If it's a\nperiod, then we call rddot to handle that case. If it's the list\nterminator we were looking for, then we're done reading this list,\nwhich we've been accumulating in acc, and we can return it.\nOtherwise the character is the beginning of the next element of the\nlist, so we call rdex to read it, and then call rdlist recursively\nwith the new object snocced onto the end of acc.\n\nLet's take a look at rddot, which is not simply for reading dotted\nlists, because we could also be seeing something (e.g. a decimal\nnumber) that begins with a period. Which it is depends on whether\nthere's a breakc after the period. If there is, we call hard-rdex to\nread whatever object is in the cdr of the list. This function is\nlike rdex but signals an error if it can't read anything.\n\nIf we look at the syn for a right parenthesis, on the other hand, all\nit does is call error. That's because a syn says what to do when\nyou're starting to read something, and since rdlist always reads all\nthe way to the matching right parenthesis, if you encounter a right\nparenthesis when you're starting to read something, what you're\nseeing must be an unbalanced parenthesis.\n\nThere's a similar pattern for \\[ and \\], except that we do something\nwith the list we've read: we make it into a fn expression.\n\n> (read '(\"[cons _ 'b]\"))\n(fn (_) (cons _ (quote b)))\n\nThe sym for \\\\ shows how characters are represented. A backslash can\neither be followed by the character itself, or the name of one. The\nnames of characters like \\bel that have them are kept in namecs.\n\nNext come the syns for quote, backquote, and comma. They all call\nrdwrap, which does a hard-rdex, and then wraps the corresponding\noperator around it.\n\nThen comes the syn for \\\", which calls rddelim to read a sequence of\ncharacters up to the next \\\". Within the sequence of characters, a\nbackslash acts as an escape character, meaning whatever occurs next\nis treated as part of the sequence, even if it's the delimiter that\nwould otherwise signal the end.\n\n> \"foo\\\"bar\"\n\"foo\\\"bar\"\n\nThe escape character is not part of the string, just something used\nin its representation.\n\n> (mem \\\\ \"foo\\\"bar\")\nnil\n\nThe character \\¦ acts as a delimiter for symbol names that could not\notherwise be read. It works just like \\\" except that we call sym on\nthe result.\n\n> '¦foo bar¦\n¦foo bar¦\n\nAs we saw earlier, the character \\# indicates shared list structure.\nIf the #n occurs alone, it refers to a previously seen object; if\nit's followed by =, then it becomes the label for whatever is read\nnext.\n\nIn the latter case we call rdtarget to read it. This function does\nsome slightly odd things. It creates the pair (cell) to represent the\nobject it will read before it's read, then when it does read\nsomething (e), it writes its car and cdr into the car and cdr of\ncell, and returns that. Why? Why not just return e? So that we can\nread lists that contain themselves. If we want to be able to read\nsomething like\n\n#1=(a #1 b)\n\nwe need to add it to the list of shared objects before reading it. Or\nmore precisely, add to the list of shared objects a pair that we will\nlater turn into it.\n\nNow we come to rdword, which reads either a number, a symbol, or\nseveral numbers or symbols joined by intrasymbol characters like \\:.\n\nUnlike many other parts of the reader, this code knows from the start\nwhich characters it's dealing with: everything up to the next breakc.\nIt first tries to parse those characters as a number, by calling\nparsenum. If that fails, the next level of precedence is the vertical\nbar used in type specs. There is nothing specific to parameter lists\nabout this bar, incidentally; it's just something the reader expands\ninto a list beginning with t.\n\n> 'for|2\n(t for 2)\n\nIf there's no vertical bar, we look for the intrasymbol characters\n\\. and \\!. These are expanded by the reader into common expressions.\n\na.b expands into (a b)\n\na!b expands into (a 'b)\n\nSo for example if you wanted to insist that a parameter was a\ncontinuation, instead of expressing the parameter as\n\n(t c (isa 'cont))\n\nyou could just write\n\nc|isa!cont\n\nand our recent example\n\n(id (2 x) (3 x))\n\ncould have been written\n\n(id 2.x 3.x)\n\nI haven't used this notation so far in the Bel spec, but it's quite\nconvenient. Any combination of \\. and \\! is allowed.\n\n> 'a!b.c\n(a (quote b) c)\n\nIf there is nothing before the first \\. or \\!, the missing symbol is\ntreated as an implicit upon.\n\n> '!a\n(upon (quote a))\n> (let x '(a . b)\n    (map .x (list car cdr)))\n(a b)\n\nThe next level of precedence, represented by parsecom, is intrasymbol\ncolons. These, as we've seen, are abbreviations for compose\nexpressions.\n\n> 'a:b:c\n(compose a b c)\n\nThe next level of predence is prepended tildes, which as we've also\nseen are abbreviations for no expressions. Here's some of each:\n\n> 'x|~f:g!a\n(t x ((compose (compose no f) g) (quote a)))\n\nThe lowest level of precedence is the else clause of parseno, where\nwe try to parse a number, and failing that (since there can now be no\nintrasymbol characters in it), treat whatever we've got left as a\nsymbol.\n\nThat's the end of the reader. Next comes the definition of the bquote\nmacro. This is not part of the reader per se; the syns for \\` and \\,\nmerely yield bquote and comma expressions; but it feels like a part\nof the reader in the sense that you never use bquote or comma\nexpressions directly.\n\nThe bquote macro is the biggest in the Bel source, and gives a taste\nof how macros, as they become more powerful, can become like\ncompilers.\n\nThe general goal of backquote is to turn an expression containing\nbackquotes, commas, and comma-ats into calls to the familiar\nlist-building functions cons and append. To get an idea of what we're\naiming at, here are some backquoted expressions followed by their\nexpansions:\n\n  `(x ,y)          (cons (quote x) (cons y nil))\n\n  `(x ,@y)         (cons (quote x) (append y nil))\n\n  `(,x ,@y)        (cons x (append y nil))\n\n  `(,@x ,@y)       (append x (append y nil))\n\n  `(x . ,@y)       (apply cons (quote x) y)\n\n  `(,@x . ,@y)     (apply append x y)\n\nThese are not quite the expansions generated by bquote. I've cut some\nerror-checking code to make them clearer.\n\nMuch of the complexity of bqex is due to the need to handle nested\nbackquotes. We'll find it easier to understand bqex if we start with\na version that doesn't:\n\n(def bqex1 (e)\n  (if (no e)   (list nil nil)\n      (atom e) (list (list 'quote e) nil)\n               (case (car e)\n                 comma    (list (cadr e) t)\n                 comma-at (list (list 'splice (cadr e)) t)\n                          (bqexpair1 e))))\n\n(def bqexpair1 (e)\n  (with ((a achange) (bqex1 (car e))\n         (d dchange) (bqex1 (cdr e)))\n    (if (or achange dchange)\n        (list (if (caris d 'splice)\n                  (if (caris a 'splice)\n                      `(apply append (spa ,(cadr a)) (spd ,(cadr d)))\n                      `(apply cons ,a (spd ,(cadr d))))\n                  (caris a 'splice)\n                  `(append (spa ,(cadr a)) ,d)\n                  `(cons ,a ,d))\n              t)\n        (list (list 'quote e) nil))))\n\nNow it's easier to follow what will happen to an expression as it\ngets expanded.\n\nThe bqex1 function returns two values: an expansion, and a second\nvalue indicating whether anything changed in generating it. For\nexample, if we expand an expression containing no commas or\ncomma-ats, nothing need change.\n\n> (bqex1 '(x y z))\n((quote (x y z)) nil)\n\nThat call will go through the last clause of bqex1, and then, since\nthe recursive calls to bqex1 on the car and cdr at the start of\nbqexpair1 will get nil values for both achange and dchange, we'll go\nthrough the last clause of bqexpair1 as well.\n\nNow suppose we do have a comma or comma-at in our expression. The\nbase cases of bqex1 are for when the whole of e is a comma or\ncomma-at expression. When it's a comma expression, the expansion is\nsimply its argument.\n\n> (bqex1 '(comma x))\n(x t)\n\nBut when it's a comma-at expression, the expansion is a call to\nsplice:\n\n> (bqex1 '(comma-at x))\n((splice x) t)\n\nWhat's splice? If we look at its definition, it simply signals an\nerror. Why generate an expansion that signals an error? Because if\nthe expression we're expanding is a naked comma-at, meaning one\nthat's not within a list, we should signal an error; there's nothing\nto splice the value into.\n\n> (let x '(a b c)\n    `,@x)\nError: comma-at-outside-list\n\nNow let's see what happens when we have comma and comma-at\nexpressions within a list. In that case we call bqexpair1, which\ngenerates expansions for its car and cdr, and then puts them\ntogether to make an expansion for the whole list.\n\nSuppose we're expanding\n\n`(,x . ,@y)\n\nThe car and cdr of this list are the two cases we just examined.\nI.e. within bqexpair1\n\n(a achange)\n\nwill be\n\n(x t)\n\nand\n\n(d dchange)\n\nwill be\n\n((splice y) t)\n\nWhat happens when these get put together? Since the car of d is a\nsplice expression and the car of a isn't, we go through this clause\n\n`(apply cons ,a (spd ,(cadr d)))\n\nyielding\n\n(apply cons x (spd y))\n\nNotice that the splice put on the front of its return value by bqex1\nis taken back off when the return value gets back to bqexpair1.\nThat's why expansions of comma-ats don't always signal errors; it's\nonly a \"leftover\" splice that signals an error.\n\nThe call to spd is the error-checking code that I mentioned I cut\nfrom the examples above. As long as y is the right sort of value,\nmeaning a list of one element, spd simply returns it. But it also\nsignals an error if it's not.\n\n> (let x '(b c)\n    `(a . ,@x))\nError: splice-multiple-cdrs\n\nYou can't splice anything except a one-element list into the cdr of\na pair. The case above is like writing (a . b c), which is\nill-formed.\n\nHere's an example of this expansion in action:\n\n> (with (x 'a y '(b))\n    `(,x . ,@y))\n(a . b)\n\nAll the code that you see in the Bel source but not in bqex1 is for\ndealing with nested backquotes. The additional argument, n, is the\nnesting level, represented by an actual nested list. The function\nbqthru is for going through comma and comma-at operators to get at\nthe ones within that need to be expanded, since the outermost\nbackquote matches the innermost comma or comma-at. We increment the\nnesting level (by saying (list n)) each time we go through a bquote,\nand decrement it (by saying (car n)) each time we go through a comma\nor comma-at. Until the nesting level is nil, whereupon we expand\nthe comma or comma-at as in the examples above.\n\n> (bqex '(bquote (comma (comma x))) nil)\n((list (quote bquote) (list (quote comma) x)) t)\n\nNotice here for example we expand the innermost comma expression, but\nleave the outer one \"intact,\" in the sense of turning it into a call\nto list that makes a new comma expression.\n\nLike the splice macro, the comma and comma-at macros signal errors\nif they're ever called. In a well-formed backquote expression they\nnever do get called, because they're expanded away. They only get\ncalled when there are \"leftover\" commas or comma-ats that don't have\nmatching backquotes.\n\n> (let x '(a b c)\n       `,,x)\nError: comma-outside-backquote\n\nNow we come to the printer. The print function takes an object and\nan optional stream and prints the object to the stream. There are\ntwo other optional parameters, names and hist, which programs are\nunlikely to supply explicitly; the first is a list of shared\nstructure, which as we saw in read has to be displayed in a special\nway, and hist is a list of pairs printed so far.\n\nThere are four cases in print. If the thing we're printing is simple,\nmeaning an atom or number, we call prsimple to print it. In prsimple\nthere are four cases; two of them, chars and streams, are handled\nright there.\n\nIn the clause for chars we're down to printing individual characters\nwith prc. This in turn uses wrb to write the bits in the character's\nbinary representation (or simply enqueues the character, if printing\nto a queue).\n\nNotice that prsimple doesn't print streams in a way that can be read\nback in, or even distinguished from one another. Streams have no\nreadable representation.\n\nNearly all the complexity in prsymbol is for dealing with symbols\nthat need to have \\¦s around their names because otherwise they'd be\nunreadable. If it weren't for that possibility, prsymbol could be\n\n(map [prc _ s] (nom x))\n\nThe way we check if a symbol needs to have \\¦s around its name is by\ncalling read on the characters in its name. If we don't get the same\nsymbol back, we need to wrap it in \\¦s. In the middle of which we call\npresc to print the characters in the symbol with backslashes before\nany \\¦s.\n\nTo print a number we call prnum on its real and imaginary components.\nThis in turn calls rrep to generate fractional representations of\nunsigned rationals. Bel can read numbers in decimal format, but\ninternally they're rationals and are displayed that way.\n\n> 1.5\n3/2\n\nNow back up to print, where the next clause is for printing strings.\nThis is complicated by the fact that strings are lists and can thus\nshare structure with other things we're printing. If ustring says\nthat our string is a unique one, meaning one that doesn't share\nstructure with anything in names, then we can simply print it as a\nseries of characters between double quotes (using presc in case there\nis a double quote in the string).\n\n> \"foo\"\n\"foo\"\n\nThe next clause in print checks whether the thing we're printing is\none of the shared objects in names. If it is, we have to display it\nusing either #n=... if it's not in hist (meaning this is the first\ntime we're printing it) or as #n if it is.\n\n> (let x '(a b c)\n    (list x x))\n(#1=(a b c) #1)\n\nTo print a pair we call prpair. This prints parentheses around a call\nto prelts that prints the contents of the pair. In prelts we begin by\ncalling print recursively on the car. Then we have to decide how to\nprint the cdr. If it's simple, or a unique string, or shared\nstructure, we display the list as a dotted list.\n\n> (cons 'a 5)\n(a . 5)\n> (let x '(a b c)\n    (cons x x))\n(#1=(a b c) . #1)\n\nOtherwise we print a space and call prelts recursively on rest.\n\n> (append '(a b c) 5)\n(a b c . 5)\n\nFinally come a couple of functions for printing in specific\nsituations. The first is prn, which is used to display data, e.g. for\ndebugging. It takes any number of arguments and prints them separated\nby spaces, followed by a newline.\n\n> (with (x \"foo\" y 'bar)\n    (prn 'x x 'y y))\nx \"foo\" y bar\nbar\n\nIt returns the value of the last, so you can wrap a call to prn\naround any expression in your code without changing what it returns.\n\nThe second, pr, is for displaying messages to humans. If you're\nlooking at data, you want to print strings in double quotes, but if\nyou're printing a message to a user, you probably don't. E.g.\n\n(let user 'Dave\n  (pr \"I'm sorry, \" user \". I'm afraid I can't do that.\"))\n\nwill print\n\nI'm sorry, Dave. I'm afraid I can't do that.\n\nIt calls prnice to print its arguments in a readable form.\n\nThe remaining definitions in the Bel source aren't needed to write\nthe interpreter or read or print, but are useful in programs.\n\nThe drop function takes n elements off the front of a list\n\n> (drop 2 '(a b c d e))\n(c d e)\n\nand nth returns the nth element of one.\n\n> (nth 2 '(a b c d e))\nb\n\nAs I mentioned earlier, lists in Bel are 1-indexed.\n\nWe use nth in the virtual function for numbers, which I also included\nearlier.\n\n> (2 '(a b c))\nb\n\nWe see this in use in nchar, which is the converse of charn. It\nconverts a number to a character.\n\n> (nchar 65)\n\\A\n\nThe first function is the complement of drop. It returns a list of\nthe first n elements of a list.\n\n> (first 2 '(a b c d e))\n(a b)\n\nThe catch macro is used to establish a continuation to which we can\nthrow control if we want to abort a computation. It dynamically binds\nthrow to the continuation, so whatever argument we give to throw will\nbe returned as the value of the catch expression.\n\n> (catch\n    (throw 'a)\n    (/ 1 0))\na\n\nThe cut function returns the elements of a list from its second\nargument to its third inclusive,\n\n> (cut \"foobar\" 2 4)\n\"oob\"\n\nunless the second argument is negative, in which case it indicates\nhow many elements to take off the end of the list.\n\n> (cut \"foobar\" 2 -1)\n\"ooba\"\n\nThe whenlet macro is to when as iflet is to if. It's used in awhen,\nwhich is to when as aif is to if.\n\nThe each macro causes its body to be evaluated with a variable bound\nto successive elements of a list.\n\n> (let x nil\n       (each y '(a b c)\n         (push y x))\n       x)\n(c b a)\n\nNow come several functions on functions. The first, flip, takes a\nfunction and returns a function that calls it with the parameters\nreversed.\n\n> ((flip -) 1 10)\n9\n\nThe next, part, is for partial application. It takes a function and\nseveral arguments, and returns a function that will call it with\nthose arguments plus whatever additional ones are supplied.\n\n> ((part cons 'a) 'b)\n(a . b)\n\nAs its name suggests, trap is a backwards part; it puts the newer\narguments first.\n\n> ((trap cons 'a) 'b)\n(b . a)\n\nFinally, only takes a function and returns a function that calls it\nonly if its first argument is non-nil. So instead of\n\n(let x (f)\n  (if x (g x)))\n\nor\n\n(aif (f) (g it))\n\nyou can say just\n\n(only.g (f))\n\nSo for example find, which we defined\n\n(def find (f xs)\n  (aif (some f xs) (car it)))\n\ncould with only and composition be defined\n\n(set find only.car:some)\n\nIncidentally, these examples show the sort of situation where\nintrasymbol dot notation is useful. You wouldn't want to use it for\nevery expression in a program, but it's readable when used with a\n\"modifier\" like only.\n\nThese are followed by some functions involving numbers, including\n>= and <=, floor, which returns the largest integer <= its argument,\nand ceil, which returns the smallest integer >= its argument.\n\n> (map (upon 3.5) (list floor ceil))\n(3 4)\n\nThe mod function returns its first argument modulo its second,\n\n> (mod 17 3)\n2\n\nThen come a group of macros for iteration. The first, whilet,\nevaluates its body while a test expression returns true, with a\nvariable bound to its value.\n\n> (let x '(a b c)\n    (whilet y (pop x)\n      (pr y))\n    x)\nabcnil\n\nThen comes the general loop macro, which sets a variable to an\ninitial value, then updates the value on successive iterations, so\nlong as some test expression is true.\n\n> (loop x 1 (+ x 1) (< x 5)\n    (pr x))\n1234nil\n\nSeveral other iteration macros can then be defined in terms of loop,\nstarting with while\n\n> (let x '(a b c)\n    (while (pop x)\n      (pr x)))\n(b c)(c)nilnil\n\nThe til macro evaluates its body with a variable bound to the value\nof one expression till another expression returns true.\n\n> (let x '(a b c d e)\n    (til y (pop x) (= y 'c)\n      (pr y))\n    x)\nab(d e)\n\nWhile it might seem as if you could define whilet simply as\n\n(mac whilet (var expr . body)\n  `(til ,var ,expr (no ,var) ,@body))\n\nthis would fail if var were a pair.\n\nThe for macro starts a variable at some initial value and then\nincrements it by 1 on each succeeding pass through the loop, till it\nexceeds some threshold.\n\n> (for x 1 10\n    (pr x))\n12345678910nil\n\nThe repeat macro simply evaluates its body a certain number of\ntimes.\n\n> (repeat 3\n    (pr 'bang))\nbangbangbangnil\n\nAnd the poll macro evaluates an expression till a function is true of\nthe result, at which point it's returned.\n\n> (let x '(a b c d e)\n    (poll (pop x) is!c)\n    x)\n(d e)\n\nThe accum macro takes a variable and a body of code and evaluates the\nbody with the variable lexically bound to a function that accumulates\nall the values it's called on. It returns the list of values.\n\n> (accum a\n    (map (cand odd a) '(1 2 3 4 5)))\n(1 3 5)\n\nIt's used in nof, which takes a number and an expression and returns\nthe result of evaluating the expression that number of times.\n\n> (nof 10 (rand 10))\n(9 7 6 2 9 1 7 0 0 0)\n\n(Sequences of random numbers never look random enough.)\n\nThe drain function is a combination of poll and accum. It evaluates\nsome expression till it returns nil, or a value passing some other\noptional test, and returns a list of all the values the expression\nreturned.\n\n> (let x '(a b c d e)\n    (drain (pop x)))\n(a b c d e)\n> (let x '(a b c d e)\n    (drain (pop x) is!d))\n(a b c)\n\nThe ^w function returns a number raised to a whole power.\n\n> (^w 2+3i 3)\n-46+9i\n\nThe randlen function returns a random number that can be represented\nin n binary digits, which is the same as saying a random integer\nbetween 0 and 2^n-1 inclusive. It works by generating such a digit\nstring and calling read on it. Within randlen we see the first use of\nthe coin primitive, which randomly returns t or nil.\n\nThe clog2 function returns the ceiling of the logarithm base 2 of its\nargument. It and randlen are used to build the general rand function,\nwhich takes a positive integer n and returns a random integer between\n0 and n-1 inclusive.\n\nNext come a group of macros for assignment, starting with wipe, which\nsets multiple things to nil.\n\n> (let x '(a b c d e)\n    (wipe 2.x 4.x)\n    x)\n(a nil c nil e)\n\nThen we get the familiar pop macro, which takes the first element off\na list and returns it.\n\n> (let x '(a b c)\n    (list (pop x) x))\n(a (b c))\n\nLike any macro that uses where for assignment, pop can operate on any\npair that you can find a way to refer to.\n\n> (let x '(a b c)\n    (pop (cdr x))\n    x)\n(a c)\n\nThe clean macro removes everything from a list for which its first\nargument returns true:\n\n> (let x '(1 2 3 4 5)\n    (clean odd x)\n    x)\n(2 4)\n\nAnd swap rotates the values of its arguments\n\n> (let (x y z) '(a b c)\n    (swap x y z)\n    (list x y z))\n(b c a)\n\nas a degenerate case of which, if there are two arguments, it swaps\ntheir values.\n\n> (let x '(a b c d e)\n    (swap 2.x 4.x)\n    x)\n(a d c b e)\n\nThe adjoin function conses something onto a list only if it's not\nalready an element of it.\n\n> (adjoin 'a '(a b c))\n(a b c)\n> (adjoin 'z '(a b c))\n(z a b c)\n\nIt's used in pushnew, which pushes an element on a list if it's not\nalready an element.\n\n> (let x '(a b c d e)\n    (pushnew 'a x)\n    (pushnew 'z x)\n    x)\n(z a b c d e)\n\nThe dedup function returns a version of list without the later\ninstances of duplicate elements.\n\n> (dedup \"abracadabra\")\n\"abrcd\"\n\nNext come a group of functions involving sorting. The first inserts\nan element into a (presumably sorted) list according to a comparison\nfunction f.\n\n> (insert < 3 '(1 2 4 5))\n(1 2 3 4 5)\n\nThen we get sort itself, which uses insert to sort a list.\n\n> (sort < '(5 1 3 2 4))\n(1 2 3 4 5)\n\nAs much as possible of the original order is preserved.\n\n> (sort (of > len) '((a b) (c) (d e) (f)))\n((a b) (d e) (c) (f))\n\nThe best function takes a function and a list and returns the\nelement of the list that beats the others according to the function.\n\n> (best > '(5 1 3 2 4))\n5\n\nIn case of ties it will return the first.\n\n> (best (of > len) '((a) (b c) (d e) (f)))\n(b c)\n\nIt's used by max to return the largest of its arguments\n\n> (max 3 7 2 1)\n7\n\nand by min to return the smallest.\n\n> (min 3 7 2 1)\n1\n\nSometimes you want to use max and min on individual arguments and\nsometimes on a list. If we define them for the former case we can get\nthe latter with apply.\n\nThe even function returns true of even numbers, and odd of odd ones.\n\n> (map upon.3 (list even odd))\n(nil t)\n\nAnd round rounds its argument to the nearest integer, choosing even\nintegers in case of ties.\n\n> (map round '(-2.5 -1.5 -1.4 1.4 1.5 2.5))\n(-2 -2 -1 1 2 2)\n\nNext come a group of functions for operating on files. The first is a\nsort of let for files; it opens one, lexically binds the resulting\nstream to a variable within the body, then uses an after to make sure\nthe stream gets closed. If we evaluate\n\n(withfile s \"foo\" 'out\n  (print 'hello s)\n  (prc \\  s)\n  (print 'filesystem s))\n\nThe file \"foo\" will contain\n\nhello filesystem\n\nIt's used in from and to, which dynamically bind ins and outs (the\ndefault input and output streams) to the newly opened file. So if\nwe say\n\n(to \"foo\"\n  (map prn '(a b c)))\n\nthen \"foo\" will end up containing\n\na\nb\nc\n\nand thus\n\n> (from \"foo\"\n    (drain (read)))\n(a b c)\n\nThe function readall uses the same technique to read all the objects\nin a file, except it uses a unique pair to signal eof so that it can\nreturn nil as well.\n\n> (from \"foo\"\n    (readall))\n(a b c)\n\nThe load function reads all the objects in a file and also evaluates\nthem. This is how you load a file of code.\n\n> (to \"example.bel\"\n    (print '(def foo (x) (cons 'a x))))\nnil\n> (load \"example.bel\")\nnil\n> (foo 'b)\n(a . b)\n\nThe record macro is used for making a transcript. It binds outs to a\nnewly created queue, then at the end returns the characters it\ncontains.\n\n> (record\n    (pr 'what)\n    (pr \\ )\n    (pr \"he said\"))\n\"what he said\"\n\nThe function prs uses it to print its arguments to a string.\n\n> (prs 'what \\ \"he said\")\n\"what he said\"\n\nThen come functions for operating on arrays. Bel arrays are\nrecursively defined in the sense that an n dimensional array is a\nlist of n-1 dimensional arrays.\n\nWe can get a new array by giving array a list of dimensions and an\noptional default value.\n\n> (set a (array '(2 3) 0))\n(lit arr (lit arr 0 0 0) (lit arr 0 0 0))\n\nNow a is a 2x3 array of zeros.\n\nThe vir for arrs means we can use arrays as if they were functions on\nlists of indices, as implemented by aref. Vectors are one-indexed.\n\n> (a 1 1)\n0\n\nIf we supply fewer indices than the array has dimensions, we get an\narray back instead of a scalar.\n\n> (a 1)\n(lit arr 0 0 0)\n\nLike any reference to part of a pair, array references are settable.\n\n> (++ (a 1 1) 5)\n5\n> a\n(lit arr (lit arr 5 0 0) (lit arr 0 0 0))\n\nIncluding references to subarrays:\n\n> (swap (a 1) (a 2))\n(lit arr 5 0 0)\n> a\n(lit arr (lit arr 0 0 0) (lit arr 5 0 0))\n\nNext come a set of functions for operating on tables, which are\nkey-value stores.\n\nWe make a new one by giving table a list of (key . value) pairs.\n\n> (set k (table '((a . b) (c . d))))\n(lit tab (a . b) (c . d))\n\nThe vir for tabs means we can use tables as virtual functions on\nkeys.\n\n> (k 'a)\nb\n> (k 'z)\nnil\n> (map k '(a c))\n(b d)\n\nBecause we define a loc whose test is isa!tab and which expands\ninto a tabloc expression, we can set table entries and also create\nnew ones implicitly.\n\n> (set k!a 1 k!z 2)\n2\n> k\n(lit tab (z . 2) (a . 1) (c . d))\n\nFinally, tabrem removes all entries with certain keys from a table.\n\n> (tabrem k 'z)\n((a . 1) (c . d))\n> k\n(lit tab (a . 1) (c . d))\n\nThe last code in the Bel source is for defining objects with named\nfields. First we define templates describing these objects, which\nare stored in a global list. The templates can then be used to define\ninstances.\n\nWe call tem with the name of the template followed by pairs of field\nnames and expressions to generate default values for those fields.\nE.g. this defines a two-dimensional point:\n\n(tem point x 0 y 0)\n\nAlthough we used 0s here, you can use any code in a default\nexpression. It will be stored in a closure and called each time a\ndefault value is needed.\n\nHaving defined point, we can make new instances with make\n\n> (set p (make point))\n(lit tab (x . 0) (y . 0))\n\nWe can supply initial arguments if we want, and if we do they\noverride the defaults.\n\n> (set q (make point x 1 y 5))\n(lit tab (x . 1) (y . 5))\n\nNotice that nothing in a point says that it is a point. You can\neasily change that by adding a field called e.g. type, but for\nmaximum flexibility the language doesn't do it for you.\n\nSince instances are tables, we can do to them everything we can do to\ntables.\n\n> p!x\n0\n> (++ p!x)\n1\n> (swap p!x p!y)\n1\n> p\n(lit tab (x . 0) (y . 1))\n\nWe can even add and remove fields, which is either powerful or\nalarming depending on how you feel about such things.\n\nWe start to see the potential of intrasymbol characters and upon in\nfunctions like this one\n\n(set above (of > !y))\n\nwhich tells if points are above another in the sense of having\ngreater y-coordinates.\n\n> (above q p (make point))\nt\n\nFinally, the function readas reads a table as an instance of a\ntemplate. The fields that we read are treated as if they were initial\narguments to make, which means if fields have been added to a\ntemplate since what we're reading was written, it will automatically\nget the new fields with the default values. In my experience that's a\nconvenient feature to have.\n\n\n\n\n\n\n\n\n\n\nThanks to Kartik Agaram, Trevor Blackwell, Patrick Collison, Daniel\nFranke, Joel Franusic, Jared Friedman, Daniel Gackle, Michael Hartl,\nMatt Knox, Shriram Krishnamurthi, Kevin Lacker, Jessica Livingston,\nBill Moorier, Olin Shivers, Nick Sivo, and especially Robert Morris\nfor help with Bel.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n" 536870913] [131 :nodes/id "7b2d57bc-1f3c-4ab6-a4d6-b557cc1a7259" 536870913] [131 :nodes/properties {"CATEGORY" "20220309210344-bel_lang", "ROAM_ALIASES" "bel", "ID" "7b2d57bc-1f3c-4ab6-a4d6-b557cc1a7259", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220309210344-bel_lang.org", "PRIORITY" "B"} 536870913] [131 :nodes/title "bel lang" 536870913] [131 :nodes/value 3.166666626930237 536870913] [132 :nodes/content ":PROPERTIES:\n:ID:       4abaafc1-f6ec-4db0-a299-8a6d2ed74390\n:END:\n#+title: Programming Interviews Exposed book\n\n[[id:876a8e7d-8daf-4e9a-9f05-30eb0ea81061][books]] [[id:2edcdb52-f77b-477c-8af5-c8c2eb8c5353][jobsearch]]\n\n** pref\nwe haven’t made up any of the questions in this book. Every last one of them has\nbeen lifted from a recent interview. The distributions of problem type and\ndifficulty are similar to what you should expect to encounter in your interviews\n\nwork out some problems!\n\n!!\nYour health and well-being is your most important asset; it affects how well you learn and how\nwell you interview. Remember to get enough sleep — especially close to an interview date — and to\nexercise and eat properly.\n\n** 1 before the search\nYou shouldn’t apply for jobs without knowing what kind of job you want.\nyou must understand what the market wants and how you can improve and package\nyour own skills to make sure that the company with the job you want will want\nyou.\n\nall programmers are not alike. Knowing what kind of programmer you are is\ncrucial to finding the right kind of job.\n\nDo you want long-term or short-term projects?\n-> try consulting\n\nmost companies that intend to outsource have already outsourced whatever they can\n\n** 2 the job application process\n\nSmall companies, especially early-stage startups, can be much more challenging\nto find. Often these companies are too small, too new, or too secretive to get\nmuch press.\n\nrecruiters job is to get you to sign with their company as quickly as possible\nfor as little money as possible. Dont let their niceness fool you.\n\nTry to talk/negotiate w/ hiring manager, not recruiter. Get their info to talk\ndirectly with them!\n\n*** negotiation\nnever accept an offer on the spot. spend at least a day.\n\nAlmost every offer is negotiable to some extent.\n\nEven when an offer is in the range you were expecting, it’s often worthwhile to\nnegotiate.\n\nReread this section!\n** 3 Approaches to Programming Problems\nInterviewer wants to see thought process. Not just a solution. Show that you\nunderstand underlying concepts\n\nKeep talking! Even about random related things.\n\nCheck all error / special cases.\n" 536870913] [132 :nodes/id "4abaafc1-f6ec-4db0-a299-8a6d2ed74390" 536870913] [132 :nodes/properties {"CATEGORY" "20220920141309-programming_interviews_exposed_book", "ID" "4abaafc1-f6ec-4db0-a299-8a6d2ed74390", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220920141309-programming_interviews_exposed_book.org", "PRIORITY" "B"} 536870913] [132 :nodes/title "Programming Interviews Exposed book" 536870913] [132 :nodes/value 2.0 536870913] [133 :nodes/content ":PROPERTIES:\n:ID:       0b0f840e-e1c4-4269-8f5b-7118cf1510f3\n:END:\n#+title: solana\n\n- [[id:e2fa55ef-169e-42fe-8de0-43c1231b6cc2][solana whitepaper]] sucks\n\n* Solana Web Notes\nfrom [[https://docs.solana.com/introduction][solanas website]]\n- _account_ - A record in the Solana ledger that either holds data or is an\n  executable program.\n  - may hold funds\n  - addressable by a public key\n    + an ed25519 public key\n    + a program-derived account address (32byte value forced off the ed25519 curve)\n    + a hash of an ed25519 public key with a 32 character string\n- _fee account_ - is the account (must be read+writeable since SOL gets reduced).\n  That pays for the cost of a txn to be included in ledger.\n- _light client_ - can verify it's pointing to a valid cluster. Thinner than a\n  Validator, but heavier than a thing client.\n  - _thin clients_ trust they're communicating with a valid cluster.\n- _program derived account (PDA)_ - account owned by a program. no /private/ key.\n  Still has a public key to make it addressable\n- _rent_ is collected from all accounts. They're all sequentially processed and\n  those that run out of rent are evicted. ELSE, if you have two years of rent,\n  you are _rent exempt_ and don't pay any rent\n** solana cli\n- \"is the first place the Solana core team deploys new functionality\"\n- \"it provides the most direct, flexible, and secure access to your Solana\n  accounts\"\n" 536870913] [133 :nodes/id "0b0f840e-e1c4-4269-8f5b-7118cf1510f3" 536870913] [133 :nodes/properties {"CATEGORY" "20211222224718-solana", "ID" "0b0f840e-e1c4-4269-8f5b-7118cf1510f3", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20211222224718-solana.org", "PRIORITY" "B"} 536870913] [133 :nodes/title "solana" 536870913] [133 :nodes/value 3.555555582046509 536870913] [134 :nodes/content ":PROPERTIES:\n:ID:       a29523c4-74dc-4cf0-80cb-d66740edabcf\n:END:\n#+title: re-frame\n\n[[id:ba5e9b97-1bbc-45dc-85f4-d9f3e6cf1b20][clojurescript]]\n\nso it's like\n\ndispatch evt -> cofx -> event handler / middleware -> effect handler -> data\nsubscriptions / format data -> subscribers\n\nBut event's seem annoying what they recommend\n-> event handler -> asyncRequest (does nothing data-wise) -> data\ndata-arrived-evt -> event handler -> data\n\n- problems:\n  - effect handlers aren't called with code. They're called by passing around\n    keywords which makes code navigation and understanding harder.\n    Why not just call the effect directly? If you're so worried about testing,\n    just use fucking redef's. this is why clojure is dynamic.\n    - BC it's harder to test & reason about & you can't replay events\n      You can re-create a DB by just replaying all the events!\n      only if they're pure though\n    - data updates may require external data, like local storage.\n  - results of effect handlers are more events, to start the whole chain again.\n    I guess this isn't horrible cuz you'd have to synchronize with other things\n    that may have happened since results have been recieved.\n    - so your code has to be polluted with \"x data arrived\" \"x req failed\" everywhere.\n      I'd rather directly describe the data change when I write the effectful code.\n\n- need to read [[https://day8.github.io/re-frame/flow-mechanics/][flow mechanics]]\n\n** dominos\n1. event triggered\n2. event handlers\n3. effect handlers\n4. subscriptions for few data called\n5. view fn from subscription data\n** subscriptions\n- flow like this\n  1. app-db\n  2. subscriptions - just _simply_ extract data\n     bc these must be rerun on _every update_\n  3. more subscriptions - compute materialized view\n     computationally expensive. run only when upstream subs change value via `=`\n     NOTE: can supply TWO functions to `reg-sub`, first one does data extraction\n     and calls other subscriptions\n     second one (maybe expensive) calculates the materialized view\n  4. subscribe - extract value from 3. to be used in UI.\n     This is a ratom so must be `deref`d\n** event handlers\n- pure fns that DESCRIBE side effects to take place\n  - ONLY Return 2 keys: :db and :fx\n    - db update happens first\n    - fx are the effects to happen in order\n- event handlers end up calling _effect handlers_\n- sometimes event handlers need external data (e.g. localstorage),\n  these are coeffects\n** effect handlers\n- should be as simple as possible.\n  bc you can't test them well\n- also make the values you pass to them simple af\n" 536870913] [134 :nodes/id "a29523c4-74dc-4cf0-80cb-d66740edabcf" 536870913] [134 :nodes/properties {"CATEGORY" "20220115002556-re_frame", "ID" "a29523c4-74dc-4cf0-80cb-d66740edabcf", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220115002556-re_frame.org", "PRIORITY" "B"} 536870913] [134 :nodes/title "re-frame" 536870913] [134 :nodes/value 3.555555582046509 536870913] [135 :nodes/content ":PROPERTIES:\n:ID:       420a9a6e-217b-4dfc-b285-e869ff3d94ce\n:END:\n#+title: etherium\n\n[[id:4c761d6c-e68a-45a2-90d6-62b47c45e0aa][blockchain]]\n\n* Etherium!\n" 536870913] [135 :nodes/id "420a9a6e-217b-4dfc-b285-e869ff3d94ce" 536870913] [135 :nodes/properties {"CATEGORY" "20211222105314-etherium", "ID" "420a9a6e-217b-4dfc-b285-e869ff3d94ce", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20211222105314-etherium.org", "PRIORITY" "B"} 536870913] [135 :nodes/title "etherium" 536870913] [135 :nodes/value 3.0 536870913] [136 :nodes/content ":PROPERTIES:\n:ID:       68f98853-0d3a-4f60-aed6-7fe6c29e4084\n:END:\n#+title: kefir\n\nI make this all the time but never researched it!\n\nI kind of just assumed the probiotics were good and I seem to stay in ketosis\nand not feel gross on it like I do w/ milk or cheese\n\n\n- proteins are broken down seriously well\n  - probably helps digestion! as pasteurized & denatured casein might be hard for my\n    body to break down as [[id:406a4a8d-4aa4-4538-9294-0a6097df0cc5][Peter Dobromylskyj]] has mentioned\n  - (just look at graph)\n    https://www.sciencedirect.com/science/article/pii/S0022030210702617\n\n- MANY peptides in raw & homogenized milk no longer exist in kefir.\n  - look at the venn diagram graph! https://pubmed.ncbi.nlm.nih.gov/26616950/\n  - possible anti-bacterial properties? who knows\n" 536870913] [136 :nodes/id "68f98853-0d3a-4f60-aed6-7fe6c29e4084" 536870913] [136 :nodes/properties {"CATEGORY" "20221018234545-kefir", "ID" "68f98853-0d3a-4f60-aed6-7fe6c29e4084", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221018234545-kefir.org", "PRIORITY" "B"} 536870913] [136 :nodes/title "kefir" 536870913] [136 :nodes/value 2.095238097012043 536870913] [137 :nodes/content ":PROPERTIES:\n:ID:       03f07731-cc68-432c-9d16-9c2944f6a21c\n:ROAM_ALIASES: yc\n:END:\n#+title: y combinator\n\n[[id:269bc84d-7abe-4059-a90a-f35c254bddfb][paul graham]]\n\n* videos?\n** collison and pinterest founder on hiring\nhttps://www.youtube.com/watch?v=kTS7OIAMunM\n- first 10 employees\n  - pinterest\n    - worked hard, high integrity, low ego, creative (weird interests),\n      they wanna build something great.\n    - had a really shitty office and low pay\n    - he'll ask someone what their reference would say about them\n    - he'll call a reference and ask: is this person in the top 1% of people,\n      5% or 10% so its quantitative and creates a scarcity?\n      - so they can't say everyone is that good\n    - he'll ask where else they're interviewing\n    - He wants people who will hop on and care about the end goal\n      - looking for people who are authentic of who they care about\n      - They're looking for people who really care about \"discovery online\" ie\n        pinterest\n        - connor collison views users as merely one avenue\n  - stripe\n    - genuine/straight/ intellectual honest\n    - like getting things finished.\n    - care a lot. It's offensive when somethings a little bit off.\n    - is this the best engineer this engineer knows?\n    - Patrick - you want to see how much of a contribution you can make and at\n      a startup you can test that.\n      - so idk. I'm thinking about my insecurity of not being as good or capable\n        as other people. I want to test that. Is that genuine?\n        I think I need to work a bit more on what is genuine for me and create\n        my own narrative. I should try to be as genuine as possible.\n- tbh the way they're talking about the best people doesn't sound like me. Maybe\n  stripe's does a little bit.\n  - I wonder what Imre would rate me as an engineer in terms of top x% ppl worked\n    with. I think it's actually really hard because we didn't spend a lot of time\n    building new things! Maybe if I had stayed longer.\n    But I didn't! I left.\n\nquestion: how big do you intend to grow the company?\nquestion: what are the company's current priorities?\n** convo w/ pg\n- https://www.ycombinator.com/library/85-a-conversation-with-paul-graham-sus-2018\n- \"the top reason startups die is poor execution by founders\"\n  \"of 1900 startups, 1 was killed by competitors\"\n** patrick collison\n- https://www.youtube.com/watch?v=NprBQi0cSHU\n- be aggressive about getting user feedback. monitor every api call and see\n  how people are using it. it's painful to hear a bunch of negative feedback,\n  but the throughput of feedback is key\n- picking people\n  - it's quite hard\n  - key qualities\n    - being smart?\n    - intellectually honest - hard to fake\n    - being nice\n    - cares a great deal\n    - loves getting things done\n" 536870913] [137 :nodes/id "03f07731-cc68-432c-9d16-9c2944f6a21c" 536870913] [137 :nodes/properties {"CATEGORY" "20220818175401-y_combinator", "ROAM_ALIASES" "yc", "ID" "03f07731-cc68-432c-9d16-9c2944f6a21c", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220818175401-y_combinator.org", "PRIORITY" "B"} 536870913] [137 :nodes/title "y combinator" 536870913] [137 :nodes/value 4.1916667222976685 536870913] [138 :nodes/content ":PROPERTIES:\n:ID:       4c761d6c-e68a-45a2-90d6-62b47c45e0aa\n:ROAM_ALIASES: crypto\n:END:\n#+title: blockchain\n\n- https://github.com/district0x\n  - for repo of maintained dapp libraries. cljs included\n- [[https://github.com/district0x/ethlance][ethlance]] is cljs dapp all the way w/ ipfs and all the shit\n- [[https://medium.com/@matus.lestan/how-to-create-decentralised-apps-with-clojurescript-re-frame-and-ethereum-81de24d72ff5#.kul24x62l][blog post]] on creating cljs dapps\n  - great example of using [[id:a29523c4-74dc-4cf0-80cb-d66740edabcf][re-frame]] to build a dapp lib.\n    Will probably make need to make something similar for [[id:0b0f840e-e1c4-4269-8f5b-7118cf1510f3][solana]]\n\n- cool companies\n  - arbol - sells insurance contracts basically for farmers\n\n    #+begin_src clojure\n(- projects\n   (- something)\n   (- something else\n      that has words))\n    #+end_src\n- plaid.\n  - imports bank statements\n  - newsletter would be cool.\n\n- polymarket\n\n  -ledger wallet\n  - btc address bc1qkc7xfvx3yfts3gwks2e4tnt3jh9qv7zu330uqx\nbc1qkc7xfvx3yfts3gwks2e4tnt3jh9qv7zu330uqx\nbc1qfae6w8k90vvfmtjcaqzf87xgan3nypmj0yp73a\n\n112-7992283-8388257\n** projects to check\npoly market -\n\ntrevor said find a project and just dig into it and see if you can find an\narbitrage or just make money or whatever.\n\n- Serum\n  see https://portal.projectserum.com/ for list of projects using serum\n  - bonafida - seems to be built into Serum like it's by serum\n    - their [[https://docs.bonfida.com/#get-all-pairs][api]] seems really sick\n  - raydium - seems basically like a ui over serum for amm's, etc.\n- Aave - crypto lending platform\n*** hacker house\n- questions\n  - has community centralized on a way to verify programs?\n    - if not how were programs verified before\n  - is Serum the de facto order book?\n    - is anchor the de facto framework to develop pograms?\n  - do you see the lack of diversity on chain-producing nodes as a concern?\n  - what are the de facto dev tools / frameworks?\n  - whats the best way to get into it and learn?\n  - is there room to make arbitrage bots? where should I look for markets?\n  - best way to get a good job\n*** trevor (2022-02-04)\n- avicus (new) / optics (a bridge between chains)\n  - https://docs.celo.org/celo-codebase/protocol/optics\n  - there will be a multi chain future\n  - IBC for cosmos. Works for some consensus mechanism\n    - ibc is an expensive protocol\n    - other consensus types don't work\n    - tendermint\n      - proving something is a pita\n  - alternative is optics\n- all predicated on this (solana, celo, avalanche, polygon)\n  - layer 2 eth\n- bunch of different blockchains\n  - deploying on other chains.\n    - and wanna use assets on other chains\n    - some applications want their own chain\n- trust\n  - other chains trust needs to be managed by the application\n- compound is a lending market\n  - their coming out with a new blockchain\n  - they choose their own tradeoffs\n- good to have a concerted focus on something\n  - play around with different protocols on solana\n  - learning smart contract programming is most valueable to do with your time\n- get a wallet and borrow crypto, be a regular user.\n  - do some trades / swaps on a decentralized exchange\n  - uniswap is really cool.\n    - read and understand the code.\n  - arbitrage stuff. he learned a lot about writing those.\n  - BUT USE the protocols first\n- trevor could sit down and read smart contract code like a book\n- mev - maximal extractable value.\n  general term for arbitrage related shite.\n- find projects on a platform, use it, understand it, build something against it\n- trev found 3x leverage thing on coin gecho\n  - scroll through list of coins and find projects out there\n  - bigger projects on defi llama.\n    - list of each blockchain and things built on top of it.\n- Solana is a bet / risk on solana\n  - learning solidity is more transferrable\n  - evm is very common.\n- Brave supports ipfs!\n  - SEC and US has been cracking down\n  - ppl host on ipfs bc the US can crack down on things\n- Trevor's mom can walk with a cane now\n" 536870913] [138 :nodes/id "4c761d6c-e68a-45a2-90d6-62b47c45e0aa" 536870913] [138 :nodes/properties {"CATEGORY" "20211222105353-blockchain", "ROAM_ALIASES" "crypto", "ID" "4c761d6c-e68a-45a2-90d6-62b47c45e0aa", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20211222105353-blockchain.org", "PRIORITY" "B"} 536870913] [138 :nodes/title "blockchain" 536870913] [138 :nodes/value 8.0 536870913] [139 :nodes/content ":PROPERTIES:\n:ID:       fb84e338-8c95-4980-968f-c03b7c8cae06\n:END:\n#+title: your symphony of selves - james fadiman\n\n[[id:68a54c7b-545e-46e0-84bd-60940fa5f207][toread]]\n\n\n[[https://www.amazon.com/Your-Symphony-Selves-Discover-Understand/dp/B08C8TWYBP/ref=sr_1_2?dchild=1&keywords=james+fadiman&qid=1618195283&sr=8-2][amazon link]]\n\nalready downloaded\n" 536870913] [139 :nodes/id "fb84e338-8c95-4980-968f-c03b7c8cae06" 536870913] [139 :nodes/properties {"CATEGORY" "20210412075129-your_symphony_of_selves_james_fadiman", "ID" "fb84e338-8c95-4980-968f-c03b7c8cae06", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210412075129-your_symphony_of_selves_james_fadiman.org", "PRIORITY" "B"} 536870913] [139 :nodes/title "your symphony of selves - james fadiman" 536870913] [139 :nodes/value 2.0 536870913] [140 :nodes/content ":PROPERTIES:\n:ID:       269dd95e-bce8-4092-8761-4f5b78af4e41\n:END:\n#+title: creating cursive colin fleming\n\n[[id:c7f85840-11a5-4b2c-b574-0c8a028f6a7e][clojure]] [[id:22b2f09e-14a0-45f7-97f3-d8d9b326675f][clojure development environment]] [[id:28f08ff2-eba5-4267-b8a7-005bb4c9cf46][colin fleming]]\n\nbased on this [[https://www.youtube.com/watch?v=2sPYiGxU4kA&t=1112s&ab_channel=YOW%21Conferences][Lambda Jam 2018 - Colin Fleming - Developing an IDE for Clojure code]]\n\nthis is also cool af: [[https://www.youtube.com/watch?v=kt4haSH2xcs&ab_channel=ClojureTV][Improving Clojure's Error Messages with Grammars - Colin Fleming]]\n\n** traditional clojure editors\ni.e. cider-type editors, called =repl-based= editors\n- these base all ide tooling on the runtime environment\n- nice bc runtime is \"source of truth\" in a sense\n- don't get non-runtime things\n  e.g. keywords, reader macros\n- doesn't work with different runtime envs! e.g. clojurescript\n\n** we need to be smarter\n- don't do anything a computer could do\n  => your ide should be smart about manipulating code.\n  you shouldn't be typing. you should be directly manipulating the syntax tree\n" 536870913] [140 :nodes/id "269dd95e-bce8-4092-8761-4f5b78af4e41" 536870913] [140 :nodes/properties {"CATEGORY" "20210409185107-creating_cursive_colin_fleming", "ID" "269dd95e-bce8-4092-8761-4f5b78af4e41", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210409185107-creating_cursive_colin_fleming.org", "PRIORITY" "B"} 536870913] [140 :nodes/title "creating cursive colin fleming" 536870913] [140 :nodes/value 2.0 536870913] [141 :nodes/content ":PROPERTIES:\n:ID:       e6862ed2-ffc0-4d4f-bf94-d10c1c45e71b\n:ROAM_ALIASES: \"notes workflow\"\n:END:\n#+title: notes-workflow\n[[id:b719d97b-7bf0-4a56-8188-5c64bb322c46][org mode]]\n\n* biblio\n- https://blog.jethro.dev/posts/org_mode_workflow_preview/\n  taken from [[id:bf693fa1-eeb9-4c5c-a659-f400149e18fa][roam-motivation]]\n[[id:a04b1dfc-7642-4c2e-bced-6542b9d7d350][jenthro-workflow-preview]]\n[[id:4383801b-9fb7-4bc0-bb2b-2498da519d88][org roam]]\n\n* my workflow\n** requirements\n1. easy to get down random things that come up for later processing\n2. (multiple) ordered TODO lists. easy to add to randomly\n3. archives for todo lists\n4. dailies\n5. can easily run program to remove all work stuff\n** workflow\n1. for random thing create file, make link to inbox maybe shortcut with template.\n   - periodically process inbox\n2. link TO that todo list. add status above here so the status can be read in\n   the roam buffer.\n   - for ordering can explicitly do so by linking back (copy pase from roam buffer)\n   - BUT this means that TODO is opt-in you must explicitly put something there.\n     it should be opt-out. you must explicitly move stuff\n   - NEED function to push link to top (bottom might be easier) of org roam todo list.\n\n   - modification. I think operating on subtrees (rather than files) might be better\n     relying on backlinks for an archive seems unsustainable.\n     - It's not searchable.\n   - org already has =org-archive-subtree= so I could probably use that\n   - BUT i want to reference the subtree from multiple places so it makes sense\n     to have in its own file\n3. the \"archive\" can just be the backlinks\n4. TODO read dailies\n5. link work stuff to =ekata_only=? not perfect but I don't think it needs to be\n** in general\n- make templates to speed all this up\n* takeaways\n- emphasize category files that may have no content\n- inbox\n  - can this just be a category?\n    I think it needs to be ordered and re-orderable\n  - function that takes a subtree and pastes it to the beginning of some other file?\n    then this file is my TODO?\n\n- rules for autoprocessing the inbox for things that should be easily categorized\n- need to get on the [[http://www.paulgraham.com/makersschedule.html][makers schedule]]\n" 536870913] [141 :nodes/id "e6862ed2-ffc0-4d4f-bf94-d10c1c45e71b" 536870913] [141 :nodes/properties {"CATEGORY" "20210324185151-notes_workflow", "ROAM_ALIASES" "\"notes workflow\"", "ID" "e6862ed2-ffc0-4d4f-bf94-d10c1c45e71b", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210324185151-notes_workflow.org", "PRIORITY" "B"} 536870913] [141 :nodes/title "notes-workflow" 536870913] [141 :nodes/value 2.540000021457672 536870913] [142 :nodes/content ":PROPERTIES:\n:ID:       6577d39e-e0d5-442a-95b6-42409a3b904e\n:END:\n#+title: ekata svc-2486 slo-based monitoring\n\n* migrate other services (SVC-2513)\n:PROPERTIES:\n:ID:       a80369a0-febe-4a9f-8ba8-31fb89b263db\n:END:\n- [[https://jira.us-west-2.ec2.pages/browse/SVC-2513][ticket SVC-2513]]\n- worry about all of them. see [[https://docs.google.com/spreadsheets/d/10Gixq1EhgoYsN7_bCiVe7ezmd37z_YyqMdvCCLORU-4/edit#gid=0][sheet]]\n** nss\n- downstreams: idc-ng -- lowest latency is phone_intel which is 100ms\n- ng previous downstreams\n  - tis\n* latency alerting writeup (svc-2535)\n:PROPERTIES:\n:ID:       a4a2ac3d-cec9-4f4e-a235-c44afa3cde0c\n:END:\n** kevins notes\n- Where does the slo document go? should we actually create one or are the dashboards okay??\n- What is going to be the process for other services?\n  - seems like some supporting code will need to be created in prometheus-alert-rules\n** intro\n** burn rate alerting\nWe currently use Multiwindow, Multi-Burn-Rate Alerts from  https://sre.google/workbook/alerting-on-slos/#short_and_long_windows_for_alerting\n\nA /burn rate/ is defined as blah blah\n** defining slo\nsome tips about picking the SLO\n** implementing the alerts\n\n* svc 2486\n** notes\n*** services meeting\n- implement current alerts?\n  - side by side? or replace atomically?\n    - side by side for a little\n  - problems: low urgency ap\n    - run feature tests there?\n    - or disable all together\n    - so yeah we could enable feature tests there.\n- what do w/ low urgency? ticket or just a low urgency alert?\n  - low urgency should be good for now.\n*** post-product\n- email low urgency is fudged (us)\n- business low+high are fudged (us)\n- [X] fix query for /outcome to use outcome ingestor\n*** jason talk\n- have all of core / platform optional and then just require like jeff, janos, imre\n- maybe just not do apac region?\n*** alert problems\n- email low urgency us-west-2\n  - maybe should be raised\n- ao low urgency ap-southeast-1\n  - mitigate w/ feat tests ?\n- aoe low&high ap-southeast\n  - mitigate w/ feat tests (maybe?)\n- mero low&high us-west & apac\n  - us-west only a few days so should be fine\n  - ap-  also a few days but idk if cuz zero traffic\n*** what do:\n  - action items\n    - make application-level status counter (not required)\n    - propose current rules (maybe propose artificial traffic)\n    - talk to product\n  - implement current alerts?\n    - current problems\n      - no application level status code / error counter per endpoint\n      - ao firing all the time for AP\n      - product not wanting them to be this high\n    - talk to team? ignore ao for AP?\n  - talk to product?\n  - svend\n    - ao firing all the time in AP\n    - would our alerts fire specifically against k8s_cluster, track\n    - talk to product\n- [ ] add status to something\n  - should remove promethues ring instrumented metrics and introduce our own\n    counter that includes totals w/ full path\n- problems\n  - ao apac at 3d\n  - aoe apac at a few\n  - email apac\n  - phone eu\n  - trapi flappy\n- would we need to know the api version?\n- my guesstimations\n\n  | api                 | latency p99 slo (in ms) |\n  |---------------------+-------------------------|\n  | trapi               |                     200 |\n  | identity_check      |                     540 |\n  | account_opening     |                     520 |\n  | location_intel      |                     150 |\n  | 3.0/phone_intel     |                     110 |\n  | 4.0/phone_intel     |                     150 |\n  | merchant_onboarding |                     600 |\n  | ao express          |                     150 |\n  | /email              |                     550 |\n  | /phone              |                     300 |\n  | /location           |                     110 |\n\n   {k8s_cluster pro-apps.us-west-2a.ec2.pages, :name slo-alerts-identity_check, :step 5m}\n\n|      :time |             :value |\n|------------+--------------------|\n| 1630724461 | 0.3587368156513323 |\n| 1630724761 | 0.1961835620572401 |\n\n {k8s_cluster pro-apps.us-west-2b.ec2.pages, :name slo-alerts-identity_check, :step 5m}\n\n|      :time |              :value |\n|------------+---------------------|\n| 1630724461 | 0.36670322348525497 |\n| 1630724761 |  0.1834345029544752 |\n\n {k8s_cluster pro-apps.us-west-2b.ec2.pages, :name slo-alerts-merchant_onboarding, :step 360m}\n\n|      :time |               :value |\n|------------+----------------------|\n| 1630268461 |  0.04545455065894548 |\n| 1630311661 |  0.01754530958828408 |\n| 1630333261 | 0.023522351683254304 |\n| 1630354861 |  0.02083333306168855 |\n\n {k8s_cluster pro-apps.us-west-2a.ec2.pages, :name slo-alerts-merchant_onboarding, :step 5m}\n\n|      :time | :value |\n|------------+--------|\n| 1630983361 |      1 |\n\n {k8s_cluster pro-apps.eu-central-1b.prod.pages, :name slo-alerts-phone, :step 120m}\n\n|      :time |              :value |\n|------------+---------------------|\n| 1629476461 | 0.33333333333333337 |\n| 1630621261 |                 0.5 |\n\n {k8s_cluster pro-apps.eu-central-1b.prod.pages, :name slo-alerts-phone, :step 30m}\n\n|      :time | :value |\n|------------+--------|\n| 1629476461 |    0.5 |\n| 1630615861 |      1 |\n\n {k8s_cluster pro-apps.eu-central-1b.prod.pages, :name slo-alerts-phone, :step 360m}\n\n|      :time |              :value |\n|------------+---------------------|\n| 1629490861 | 0.11111111111111105 |\n| 1630635661 |                 0.5 |\n\n {k8s_cluster pro-apps.eu-central-1b.prod.pages, :name slo-alerts-phone, :step 5m}\n\n|      :time | :value |\n|------------+--------|\n| 1629475561 |      1 |\n| 1630615561 |      1 |\n\n\n\n  | api                 | burn rates |           slo guess | current alert                 |\n  |---------------------+------------+---------------------+-------------------------------|\n  | trapi               | [[https://thanos.us-west-2.utility.pages/graph?g0.expr=(%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Ftransaction_risk%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D))%20-%20on%20()%20group_right%0A%20%20%20%20%20%20%20%20%20%20%20sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Ftransaction_risk%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D~%220.1.*%22%7D%5B3d%5D))%20by%20(le))%0A%20%20%20%20%20%20%20%20%20%20%2F%20on%20()%20group_left%20()%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Ftransaction_risk%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D)))%0A%20%20%20%20%20%20%20%20)%20%2F%20(1%20-%200.99)%0A&g0.tab=0&g0.stacked=0&g0.range_input=2w&g0.max_source_resolution=0s&g0.deduplicate=1&g0.partial_response=0&g0.store_matches=%5B%5D][link]]       |                0.13 | low at 0.15; high at 0.3; 10m |\n  | identity_check      | [[https://thanos.us-west-2.utility.pages/graph?g0.expr=(%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Ftransaction_risk%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D))%20-%20on%20()%20group_right%0A%20%20%20%20%20%20%20%20%20%20%20sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Ftransaction_risk%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D~%220.1.*%22%7D%5B3d%5D))%20by%20(le))%0A%20%20%20%20%20%20%20%20%20%20%2F%20on%20()%20group_left%20()%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Ftransaction_risk%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D)))%0A%20%20%20%20%20%20%20%20)%20%2F%20(1%20-%200.99)%0A&g0.tab=0&g0.stacked=0&g0.range_input=2w&g0.max_source_resolution=0s&g0.deduplicate=1&g0.partial_response=0&g0.store_matches=%5B%5D][link]]       |                0.54 | none?                         |\n  | account_opening     | [[https://thanos.us-west-2.utility.pages/graph?g0.expr=(%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Faccount_opening%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D))%20-%20on%20()%20group_right%0A%20%20%20%20%20%20%20%20%20%20%20sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Faccount_opening%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D~%220.4.*%7C0.5.*%22%7D%5B3d%5D))%20by%20(le))%0A%20%20%20%20%20%20%20%20%20%20%2F%20on%20()%20group_left%20()%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Faccount_opening%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D)))%0A%20%20%20%20%20%20%20%20)%20%2F%20(1%20-%200.99)%0A&g0.tab=0&g0.stacked=0&g0.range_input=2w&g0.max_source_resolution=0s&g0.deduplicate=1&g0.partial_response=0&g0.store_matches=%5B%5D][link]]       |                0.49 | high at 0.55; 10m             |\n  | location_intel      | [[https://thanos.us-west-2.utility.pages/graph?g0.expr=(%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Flocation_intel%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D))%20-%20on%20()%20group_right%0A%20%20%20%20%20%20%20%20%20%20%20sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Flocation_intel%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D~%220.1.*%22%7D%5B3d%5D))%20by%20(le))%0A%20%20%20%20%20%20%20%20%20%20%2F%20on%20()%20group_left%20()%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Flocation_intel%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D)))%0A%20%20%20%20%20%20%20%20)%20%2F%20(1%20-%200.99)%0A&g0.tab=0&g0.stacked=0&g0.range_input=2w&g0.max_source_resolution=0s&g0.deduplicate=1&g0.partial_response=0&g0.store_matches=%5B%5D][link]]       |                0.11 | high at 0.2; 10m              |\n  | 3.0/phone_intel     | [[https://thanos.us-west-2.utility.pages/graph?g0.expr=(%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F3.0%2Fphone_intel%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D))%20-%20on%20()%20group_right%0A%20%20%20%20%20%20%20%20%20%20%20sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F3.0%2Fphone_intel%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D~%220.02.*%7C0.018%7C0.016%7C0.014%7C0.012%22%7D%5B3d%5D))%20by%20(le))%0A%20%20%20%20%20%20%20%20%20%20%2F%20on%20()%20group_left%20()%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F3.0%2Fphone_intel%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D)))%0A%20%20%20%20%20%20%20%20)%20%2F%20(1%20-%200.99)%0A&g0.tab=0&g0.stacked=0&g0.range_input=2w&g0.max_source_resolution=0s&g0.deduplicate=1&g0.partial_response=0&g0.store_matches=%5B%5D][link]]       |               0.014 | high at 0.03; 10m             |\n  | 4.0/phone_intel     | [[https://thanos.us-west-2.utility.pages/graph?g0.expr=(%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F4.0%2Fphone_intel%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D))%20-%20on%20()%20group_right%0A%20%20%20%20%20%20%20%20%20%20%20sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F4.0%2Fphone_intel%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D~%220.028%7C0.026%7C0.024%7C0.023%7C0.022%7C0.021%7C0.03.*%22%7D%5B3d%5D))%20by%20(le))%0A%20%20%20%20%20%20%20%20%20%20%2F%20on%20()%20group_left%20()%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F4.0%2Fphone_intel%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D)))%0A%20%20%20%20%20%20%20%20)%20%2F%20(1%20-%200.99)%0A&g0.tab=0&g0.stacked=0&g0.range_input=2w&g0.max_source_resolution=0s&g0.deduplicate=1&g0.partial_response=0&g0.store_matches=%5B%5D][link]]       |               0.023 | high at 0.04; 10m             |\n  | merchant_onboarding | [[https://thanos.us-west-2.utility.pages/graph?g0.expr=(%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Fmerchant_onboarding%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D))%20-%20on%20()%20group_right%0A%20%20%20%20%20%20%20%20%20%20%20sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Fmerchant_onboarding%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D~%220.3.*%22%7D%5B3d%5D))%20by%20(le))%0A%20%20%20%20%20%20%20%20%20%20%2F%20on%20()%20group_left%20()%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Fmerchant_onboarding%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D)))%0A%20%20%20%20%20%20%20%20)%20%2F%20(1%20-%200.99)%0A&g0.tab=0&g0.stacked=0&g0.range_input=2w&g0.max_source_resolution=0s&g0.deduplicate=1&g0.partial_response=0&g0.store_matches=%5B%5D][link]]       |  0.6 (lack of data) | high at 0.8; 10m              |\n  | ao express          | no data?   | 0.10 (but not sure) | high at 0.15; 10m             |\n  | /email              | [[https://thanos.us-west-2.utility.pages/graph?g0.expr=(%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Femail%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D))%20-%20on%20()%20group_right%0A%20%20%20%20%20%20%20%20%20%20%20sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Femail%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D~%220.07%7C0.06%7C0.05%7C0.04%7C0.03%7C0.02%22%7D%5B3d%5D))%20by%20(le))%0A%20%20%20%20%20%20%20%20%20%20%2F%20on%20()%20group_left%20()%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Femail%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D)))%0A%20%20%20%20%20%20%20%20)%20%2F%20(1%20-%200.99)%0A&g0.tab=0&g0.stacked=0&g0.range_input=2w&g0.max_source_resolution=0s&g0.deduplicate=1&g0.partial_response=0&g0.store_matches=%5B%5D][link]]       |                0.03 | none?                         |\n  | /phone              | [[https://thanos.us-west-2.utility.pages/graph?g0.expr=(%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Fphone%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D))%20-%20on%20()%20group_right%0A%20%20%20%20%20%20%20%20%20%20%20sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Fphone%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D~%220.2.*%22%7D%5B3d%5D))%20by%20(le))%0A%20%20%20%20%20%20%20%20%20%20%2F%20on%20()%20group_left%20()%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Fphone%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D)))%0A%20%20%20%20%20%20%20%20)%20%2F%20(1%20-%200.99)%0A&g0.tab=0&g0.stacked=0&g0.range_input=2w&g0.max_source_resolution=0s&g0.deduplicate=1&g0.partial_response=0&g0.store_matches=%5B%5D][link]]       | 0.27 (but not sure) | none?                         |\n  | /location           | [[https://thanos.us-west-2.utility.pages/graph?g0.expr=(%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Flocation%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D))%20-%20on%20()%20group_right%0A%20%20%20%20%20%20%20%20%20%20%20sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Flocation%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D~%220.1.*%22%7D%5B3d%5D))%20by%20(le))%0A%20%20%20%20%20%20%20%20%20%20%2F%20on%20()%20group_left%20()%0A%20%20%20%20%20%20%20%20%20%20(sum(rate(http_endpoint_latency_seconds_bucket%7Buri_base%3D~%22%2F.*%2Flocation%22%2C%20namespace%3D%22prod%22%2C%20track!%3D%22sales%22%2C%20le%3D%22%2BInf%22%7D%5B3d%5D)))%0A%20%20%20%20%20%20%20%20)%20%2F%20(1%20-%200.99)%0A&g0.tab=0&g0.stacked=0&g0.range_input=2w&g0.max_source_resolution=0s&g0.deduplicate=1&g0.partial_response=0&g0.store_matches=%5B%5D][link]]       |                0.11 | none?                         |\n\n\nvisualize the burn rate!\n#+begin_src\n(\n          (sum(rate(http_endpoint_latency_seconds_bucket{uri_base=~\"/.*/transaction_risk\", namespace=\"prod\", track!=\"sales\", le=\"+Inf\"}[3d])) - on () group_right sum(rate(http_endpoint_latency_seconds_bucket{uri_base=~\"/.*/transaction_risk\", namespace=\"prod\", track!=\"sales\", le=~\"0.1.*\"}[3d])) by (le))\n          / on () group_left ()\n          (sum(rate(http_endpoint_latency_seconds_bucket{uri_base=~\"/.*/transaction_risk\", namespace=\"prod\", track!=\"sales\", le=\"+Inf\"}[3d])))\n        ) / (1 - 0.99)\n#+end_src\n- [[https://grafana.pro-apps.us-west-2a.ec2.pages/d/transaction_risk-slos/transaction-risk-api-slos?orgId=1][graphana]]\n- so 150ms would be fine. We'd be mostly well above that\n- 100ms us might barely meet p99 eu is just below that,\n- looking https://docs.google.com/spreadsheets/d/1kKTYV_iK9Q6YdURakqBeQmAHEmFextjyjUgns2Npxz8/edit#gid=0\n- 60 70 80 90 100, 200, 300, ...\n\nWe'd like to define the slo's for all services. Denes\n-\n** svend meeting\n*** agenda\n- do you use an emacs terminal emulator? / which one?\n  - vterm - works very well for actually emulating a real terminal.\n  - shell mode more like regular. can't do interractive.\n  - ansi-term is what multi term wraps\n\n- code management:\n  - will this cue repo just be promoted to be infratructure code base and we'll make PR's to that?\n    ANS: yes\n  - should more custom alerts be added to this?\n    ANS: yes, but only SLO-related alerts. Svend mentions a cue-based approach\n    could be added somewhere to other metrics if we find this useful\n  - Then eventually old alerts will be depricated?\n    ANS: No. there will always be non-SLO based alerts. e.g. days since cass data release\n- deployment / testing of alerts?\n  - can go back in time to check if alerts would have fired. fudge values and check, etc.\n    + sanity check: go on there and poke it, mess w/ values make sure stuff fires\n  - I especially want to check low-traffic circumstances i.e. apac\n  - prometheus has unit tests... ?\n\n*** meeting notes\n- [ ] quality need todo\n  + Need to measure only degridated performance somehow\n  + would be nice to have common metric across all endpoints if possible\n- latency + error (500)\n  - measure at LB or at application\n\n- figure out what alerts are redundant\n\n*** action items\n- metric required for quality SLO of 95% non-degraded responses\n- Svend is going to shift ownership of his repo to all engineering, create a\n  pipeline that will deploy alerts + dashboards.\n  - WHEN?\n- use lb-level or application-level measures of 500's + latency?\n- service slo documents\n- testing.\n  - sanity checking ofc\n  - prometheus unit tests? this may require test data that would probably be a pita to maintain\n    - I assume we'll skip for now.\n*** warnings\n- internally we can use defex warnings to calculate degraded response\n- maybe can just add a label to an existing count metric like latency\n- formats utils namespace. Theres a function called warnings or failure. Or get-warnings. or something\n** current alerts\n- latency\n  + phone_intel latencies 5m avg > num (for 10m)\n  + locationintel latency 5m avg > 0.2 (for 10m)\n  + AO, mero, trapi latency all done w/ similar latency alerts\n- locationIntel partial error percent > 10\n- ng upstream client latency alerts\n- no traffic alerts\n" 536870913] [142 :nodes/id "a80369a0-febe-4a9f-8ba8-31fb89b263db" 536870913] [142 :nodes/properties {"CATEGORY" "20210823125707-ekata_svc_2486_slo_based_monitoring", "ID" "a80369a0-febe-4a9f-8ba8-31fb89b263db", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210823125707-ekata_svc_2486_slo_based_monitoring.org", "PRIORITY" "B", "ITEM" "migrate other services (SVC-2513)"} 536870913] [142 :nodes/title "migrate other services (SVC-2513)" 536870913] [142 :nodes/value 2.0 536870913] [143 :nodes/content ":PROPERTIES:\n:ID:       a04b1dfc-7642-4c2e-bced-6542b9d7d350\n:END:\n#+title: jenthro-workflow-preview\n[[id:4383801b-9fb7-4bc0-bb2b-2498da519d88][org roam]]\n\nlink: https://blog.jethro.dev/posts/org_mode_workflow_preview/\n\nactually a series\n\n- has a central 'inbox' that is just that. so you can save something to file/categorize\n  later when you're working on something\n  #+BEGIN_QUOTE\n  Your brain is for having ideas, not storing them – David Allen\n  #+END_QUOTE\n\n- inbox\n    #+begin_quote\n    Because the inbox is so crucial to the workflow, the process of adding and\n    processing items is as frictionless as possible.\n    The inbox is all about trust. Trust that you everything you will need to think\n    about is captured somewhere. This allows you to give your 100% for the current\n    task.\n    #+end_quote\n\n- clocks in on each task -- tells him where the time goes\n\n* takeaways\n- need an inbox - idk if I would want org agenda though\n  - would maybe even want inbox items to just be sub-trees\n- to set up my templates\n    https://orgmode.org/manual/Template-expansion.html#Template-expansion\n    https://www.gnu.org/software/emacs/manual/html_mono/org.html#Setting-up-capture\n\n* his HN [[https://blog.jethro.dev/posts/how_to_take_smart_notes_org/][blog post]]\n- note taking is the thinking process itself (feynmann)\n- When we take notes, we should ask: “In what context do I want to see this note again?”\n  - so he LINKS TO a bunch of files that are related at the top of a page. and then it\n    will show up in \"backlinks\" on the side of that one\n    - these are \"topic notes\" that have no actual content\n\nawesome demo vid of creating article [[https://www.youtube.com/watch?v=RvWic15iXjk&ab_channel=NatEliason][here]]\n" 536870913] [143 :nodes/id "a04b1dfc-7642-4c2e-bced-6542b9d7d350" 536870913] [143 :nodes/properties {"CATEGORY" "20210325001048-jenthro_workflow_preview", "ID" "a04b1dfc-7642-4c2e-bced-6542b9d7d350", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210325001048-jenthro_workflow_preview.org", "PRIORITY" "B"} 536870913] [143 :nodes/title "jenthro-workflow-preview" 536870913] [143 :nodes/value 2.439999997615814 536870913] [144 :nodes/content ":PROPERTIES:\n:ID:       e78c96fa-fdb3-472a-9cdc-6a5c83280c59\n:END:\n#+title: bipolar\n\nthis seems interesting\nhttps://psycheducation.org/blog/antidepressant-controversy-2-do-they-cause-mania-hypomania/\n\nI like this amber post\nhttps://www.mostly-fat.com/empirica/2015/01/dear-lyle-mcdonald/\n" 536870913] [144 :nodes/id "e78c96fa-fdb3-472a-9cdc-6a5c83280c59" 536870913] [144 :nodes/properties {"CATEGORY" "20220730010818-bipolar", "ID" "e78c96fa-fdb3-472a-9cdc-6a5c83280c59", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220730010818-bipolar.org", "PRIORITY" "B"} 536870913] [144 :nodes/title "bipolar" 536870913] [144 :nodes/value 2.0 536870913] [145 :nodes/content ":PROPERTIES:\n:ID:       9969e49c-7c1c-46e0-9b8a-012642cb96e8\n:END:\n#+title: geopolitics\n" 536870913] [145 :nodes/id "9969e49c-7c1c-46e0-9b8a-012642cb96e8" 536870913] [145 :nodes/properties {"CATEGORY" "20210328093443-geopolitics", "ID" "9969e49c-7c1c-46e0-9b8a-012642cb96e8", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210328093443-geopolitics.org", "PRIORITY" "B"} 536870913] [145 :nodes/title "geopolitics" 536870913] [145 :nodes/value 2.0 536870913] [146 :nodes/content ":PROPERTIES:\n:ID:       4e007f1e-3e2b-4c96-98f0-58260d6ed0e2\n:END:\n#+title: sibo\n\n** reddit\n- mark pimentel\n\n*** protokinetics\n- magnesium oxide (oxy powder) clears you out\n- motility pro / ginger-artichoke extract\n  - pimentel says to take at night so your mmc can run laps\n    youtube guy does in morning bc it disturbs his sleep\n\n**** Gastrointestinal Motility Enhancing Effect of Ginger..\nhttps://sci-hub.se/https://doi.org/10.1248/cpb.38.430\n\nfood traveled farther down small intestine after 30 minutes in rats given\nginger.\n\nNote, this says nothing about mmc and is WITH food. so who knows\n**** effects of food components on motility\nhttps://www.karger.com/Article/Abstract/128034\nhttps://sci-hub.se/https://doi.org/10.1159/000128034\ngave dogs glucose, fat, or peptides.\npeptides inhibited mmc the least, then glucose, then fat.\n- oh but they did combos too!\n- presence of of lipid in the lumen inhibits absoarbtion of glucose & peptides\n  bc lipids induce fluid secretion, which secretes electrolytes, so absorbtion\n  of organic solutes is reduced\n  - citing https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1411680/\n**** Effects of psychological stress on small intestinal motility and bacteria and mucosa in mice\nhttps://www.ncbi.nlm.nih.gov/pmc/articles/PMC4305729/\n\nmice w/ hungry cats near them had sibo, lack of motility, and leaky gut\n*** youtube healing story\nhttps://www.reddit.com/r/SIBO/comments/wcuxyz/made_a_video_about_my_sibo_experience_and_full/?utm_source=share&utm_medium=web2x&context=3\n\n- https://www.youtube.com/watch?v=53f1gsRUxvY\n- TLDR: motility is only thing that matters. killing bacteria helps symptoms\n  - https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4411465/\n- they don't pay attention to small intestine bc it's so hard to test\n- _mmc_ - migrating motor complex\n- mmc gets impaired during infection or something, then bacteria can grow\n  - THIS is the core of the disease\n- stomach ulcers have a similar story to IBS / sibo.\n  - They'd say \"just chill out\" for years in the 80's and then they finally\n    found out it was H. Pylori\n- reddit was the best resource during this whole thing\n- rifaxin (ryfaxin?) - antibodic that just acts in small intestine\n- BUT you don't need a kill phase!\n  you need motility!\n- sometimes, the kill phase is so good that it can restart the motility\n- mark pimentel is the best dude ever\n- they have NO drugs to stimulate the mmc, but they sometimes use stuff used for\n  other stuff\n  - prapralipide is the closest thing\n- otc things can work!\n  - ginger extract, artichoke extract get shit moving. and it works af\n    - commercial combo is SIBO mmc\n    - Prodigest (test name) / MotilityPro (lisence name) is what he took\n- doctors work for insurance companies\n  - 99% are just cogs in the machine\n- his link\n   At Cedars-Sinai Medical Center, we have determined that food poisoning and a\ntoxin they all have, causes nerve damage\n** Small Intestinal Bacterial Overgrowth, Bushyhead et. al.\nhttps://sci-hub.se/https://doi.org/10.1016/j.gtc.2021.02.008\n\n- Gastric acid, bile, small bowel antegrade motor patterns, and pancreatic\n  secretions inhibit bacterial growth\n\n- Although direct injury by bacterial toxins may result in villous blunting,\n  most small bowel biopsies from patients with SIBO reveal normal\n  morphology.[20]\n\n- \"Bacterial bile acid deconjugation can cause fat malabsorption and result in\n  steatorrhea, weight loss, fat-soluble vitamin deficiencies, and osteoporosis.\"\n  - BUT NO REFERENCE! :(\n\n- diagnosis is HARD.\n  - biopsy is invasive/expensive, can miss stuff or be corrupted\n  - beath test - humans don't produce methane or hydrogen. Take glucose or\n    lactulose and see if your breath has more of that BEFORE it reaches the\n    colon, then you know you're fermenting in the small intestine\n** Small Intestinal Bacterial Overgrowth: Histopathologic Features and Clinical Correlates in an Underrecognized Entity\nhttps://doi.org/10.5858/134.2.264\n" 536870913] [146 :nodes/id "4e007f1e-3e2b-4c96-98f0-58260d6ed0e2" 536870913] [146 :nodes/properties {"CATEGORY" "20220330002812-sibo", "ID" "4e007f1e-3e2b-4c96-98f0-58260d6ed0e2", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220330002812-sibo.org", "PRIORITY" "B"} 536870913] [146 :nodes/title "sibo" 536870913] [146 :nodes/value 3.879365123808384 536870913] [147 :nodes/content ":PROPERTIES:\n:ID:       c9bfdc3c-2fbc-41f9-bb90-3f1af1165271\n:END:\n#+title: vividness david chapman\n\n[[id:1eca4241-9815-471f-900c-d8864678ba9f][david chapman]] [[id:eb039932-abd7-4a9b-89c9-d4f6e9d4adb1][budhism]]\n\nBudhism recs:\n - https://vividness.live/emailing-the-lamas-from-afar\n - Hardcore Zen and that guy's site\n - This blog https://www.thinkbuddha.org/ and his book, Finding our sea leggs\n\nfrom https://vividness.live/yidams-a-godless-approach-naturally\n\n#+begin_quote\nWhen you “look within,” usually all you find are idle fantasies and stale emotional loops.\n#+end_quote\n\nfrom https://vividness.live/no-cosmic-justice\n#+begin_quote\nHowever, genuine ethical action is impossible if we are motivated by reward and punishment.\n#+end_quote\n" 536870913] [147 :nodes/id "c9bfdc3c-2fbc-41f9-bb90-3f1af1165271" 536870913] [147 :nodes/properties {"CATEGORY" "20220801215146-vividness_david_chapman", "ID" "c9bfdc3c-2fbc-41f9-bb90-3f1af1165271", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220801215146-vividness_david_chapman.org", "PRIORITY" "B"} 536870913] [147 :nodes/title "vividness david chapman" 536870913] [147 :nodes/value 2.0 536870913] [148 :nodes/content ":PROPERTIES:\n:ID:       58795098-c56f-47ad-8fe9-4b70ecda3f7c\n:END:\n#+title: the road to serfdom\n\n[[id:83a85a81-5256-4915-8758-10777d5dc1fb][hayek]] [[id:903253ec-c378-4afd-881c-195447e4e4cb][liberalism]]\n\nbook by Hayek\n\n** one: the abandoned road\n- people are take liberalism's success for granted and slowly propose ideas of central\n  planning to fix current and apparent problems we see in liberalism. This is\n  actually a reversion to pre-liberal times of central control of all aspects of\n  life.\n  - ppl think society is a problem that can be solved as if it were a technology problem\n- central economic planning is inseparable from removing other liberties / individualism\n- really, liberalism was innovative and awesome compared to the old system\n\n** two: the great utopia\n- socialism started in france as an overtly authoritarian reaction to liberalism\n  in the revolution\n- Slowly they twisted it to more align w/ librals. They changed the definition\n  of freedom to mean \"economic freedom\". What they really wanted was equal\n  distribution of wealth.\n- facism and socialism are almost the same\n- socialism always results in Stalinism\n** three: individualism and collectivism\n- \"the socialists believe in two things which are absolutely different and\n  perhaps even contradictory: freedom and organization\" - Elie Halevy\n- \"socialism\" has two aspects\n  - the \"end\" - social justice, equality, security\n  - the \"means\" - abolition of private enterprise and creation of \"planned economy\"\n    - this is _collectivism_ - i.e. central planning. deliberately distributing\n      resources\n- \"liberalism\"\n  - is any form of market / competition to distribute resources. Buying and\n    selling and producing are all optional and fair. Theres no coercion involved.\n  - this is much more than \"lase fare\". You can have lots of laws and still have\n    markets, and laws often make many things better.\n" 536870913] [148 :nodes/id "58795098-c56f-47ad-8fe9-4b70ecda3f7c" 536870913] [148 :nodes/properties {"CATEGORY" "20220412132835-the_road_to_serfdom", "ID" "58795098-c56f-47ad-8fe9-4b70ecda3f7c", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220412132835-the_road_to_serfdom.org", "PRIORITY" "B"} 536870913] [148 :nodes/title "the road to serfdom" 536870913] [148 :nodes/value 2.0 536870913] [149 :nodes/content ":PROPERTIES:\n:ID:       e2fa55ef-169e-42fe-8de0-43c1231b6cc2\n:END:\n#+title: solana whitepaper\n\n[[id:4c761d6c-e68a-45a2-90d6-62b47c45e0aa][blockchain]]\n\n- there is one generator elected at any given time. this serializes all\n  transactions\n- _bond_ a coin that a validator commits (to the PoH chain) as collateral while\n  validating transactions\n- _super majority_ - 2/3rds of validators weighted by bonds. This indicates\n  consensus. Cost of an attack would be 1/3rd, which is basically 1/3rd the\n  market cap of the coin.\n\n- proof of replication\n  + used by replicator nodes\n  + selects 32 random bytes from the history\n  + the dataset is fully encrypted with CBC encryption\n    + the CBC key is rotated often\n    + then a key is signed.\n    + the replicator signs a hash generated by PoH sequence, this ties it\n      to the replicator identity and the PoH.\n      + this is then fed into pseudorandom number generator to select 32 random\n        bytes from the history.\n      + the data must be encrypted in sequence for each block bc you must XOR the\n        previous encrypted block to the input of the next.\n      + then they submit a merkle tree of these random encrypted bytes. These can\n        be verified quickly?\n        + verifiers could use a GPU to assign one Replicator identity per core\n          and verify a bunch all at once\n      + new PoH sequences happen quickly if there is no key rotation\n    + a PoR gets published and verified by a super majority of validators. The\n      PoH node just saves pending proofs and verified proofs. The Replicator\n      collects these verifications and submits them as one proof to the PoH node.\n    + PoR submit false proofs a small percentage of time, so verifiers that just\n      say yes to everything get punished\n- architecture\n  - _leader/PoH generator_ consums arbitrary transactions, outputs PoH with unique\n    global order. After each batch, leader outputs a signature of the state that's\n    the result of running txn's in that order.\n  - _state_ - two hash tables. Bonds table & Transaction table.\n    - Proof of Stake bonds table - hash of pub key, bond, last vote, unused\n    - Transaction table - hash of pub key, account (user data?), unused\n  - _Verifiers_ - replicate the state and serve it. validators determine replication\n    target\n  - _Validators_ - consume Verifier bandwidth. can run on same machine as\n    Verifiers or leader.\n- smart contracts\n  - executed as eBPF (extended Berkely Packet Filter). BPF is a vm originally\n    used to forward packets w/ some code.\n  - eBPF has no loops! not turing complete!\n    - but then no need to check stuff. You can ascertain runtime and memory in\n      one pass.\n" 536870913] [149 :nodes/id "e2fa55ef-169e-42fe-8de0-43c1231b6cc2" 536870913] [149 :nodes/properties {"CATEGORY" "20211222225525-solana_whitepaper", "ID" "e2fa55ef-169e-42fe-8de0-43c1231b6cc2", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20211222225525-solana_whitepaper.org", "PRIORITY" "B"} 536870913] [149 :nodes/title "solana whitepaper" 536870913] [149 :nodes/value 3.166666626930237 536870913] [150 :nodes/content ":PROPERTIES:\n:ID:       e081a0db-45ce-482b-adf6-540cd7acfba5\n:END:\n#+title: paradigms of artificial intelligence programming (paip) by peter norvig\n\n[[id:876a8e7d-8daf-4e9a-9f05-30eb0ea81061][books]] [[id:81a17d27-594a-4f01-9ec9-7686271bcf24][coding]] [[id:aefbec29-99b8-459f-a729-41c3d4b7270c][lisp]]\n\nSeems like the best version is on github [[https://github.com/norvig/paip-lisp/blob/main/docs/preface.md#outline-of-the-book][outline]]\n\nInteresting parts (2022-12, mostly no AI-specific stuff):\n- [[https://github.com/norvig/paip-lisp/blob/main/docs/chapter9.md][ch 9 & 10]] efficiency techniques\n- [[https://github.com/norvig/paip-lisp/blob/main/docs/chapter11.md][ch 11]] prolog interpreter\n- 13 & 14 introduces, then talks about oo programming. Which sounds interesting!\n- [[https://github.com/norvig/paip-lisp/blob/main/docs/chapter22.md][ch 22]] scheme dialect interpreter\n\n** ch 11\n\nfile:./resources/paip-prolog.el\n\nHow is prolog different?\n1. creates a _uniform database_ of facts (that is relational).\n2. uses logical variables rather than normal variables. These are bound by unififcation\n  rather than assignment?\n3. _automatic backtracking_ you just provide constraints. It searches. You don't have to\n  know.\n\n*** 1. Uniform DB\nthere are _facts_, which hold relationships between some objects and _rules_, which\nstate contingent facts. We'll create some macros.\n\nHere's a macro defining some facts.\n#+begin_src elisp\n(<- (likes Kim Robin))\n(<- (likes Sandy Lee))\n(<- (likes Sandy Kim))\n(<- (likes Robin cats))\n#+end_src\n\nhere is a rule:\n\n#+begin_src elisp\n(<- (likes Sandy ?x) (likes ?x cats))\n#+end_src\n\nsaying sandy likes anyone who likes cats.\n\nThe /declarative/ way is \"For any x, Sandy likes x if x likes cats.\", but for\nProlog, it's only /backward chaining/. Meaning, \"If you ever want to show that Sandy likes some x, one way to do it is to show that x likes cats.\".\n\nMany systems do /forward chaining/, which is the opposite basically.\n\nThe arrow implicates the one-way implication here of backwards chaining.\n\nRules are of the form =(<- head body...)=. The head can be proved if all of\nthe body things can be proved (logical \"and\").\n\n*** 2. Unification of Logic Variables\n\nUnification only allows stating variables are equal to other variables or expressions,\nit does NOT allow anything other than equality.\n" 536870913] [150 :nodes/id "e081a0db-45ce-482b-adf6-540cd7acfba5" 536870913] [150 :nodes/properties {"CATEGORY" "20221118202649-paradigms_of_artificial_intelligence_programming_paip_by_peter_norvig", "ID" "e081a0db-45ce-482b-adf6-540cd7acfba5", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221118202649-paradigms_of_artificial_intelligence_programming_paip_by_peter_norvig.org", "PRIORITY" "B"} 536870913] [150 :nodes/title "paradigms of artificial intelligence programming (paip) by peter norvig" 536870913] [150 :nodes/value 2.524999976158142 536870913] [151 :nodes/content ":PROPERTIES:\n:ID:       16c2d427-48ac-48e4-87f1-d7fdc65afd98\n:END:\n#+title: org babel\n\n[[id:b719d97b-7bf0-4a56-8188-5c64bb322c46][org mode]]\n\nmostly from https://orgmode.org/worg/org-contrib/babel/\n\nsome useful tips\n\n- use =org-edit-special= to edit in a separate buffer with the major mode\n\n  #+begin_src elisp\n(require 'straight)\n\nstraight--build-cache\n  #+end_src\n** results header\n\nsee https://orgmode.org/manual/Results-of-Evaluation.html\n\ndefault\n\n#+begin_src python\nreturn 'what the heck'\n#+end_src\n\n#+RESULTS:\n: what the heck\n\n#+begin_src python :results value raw\nprint('wtf')\nreturn 'what the heck'\n#+end_src\n\n#+RESULTS:\nwhat the heck\n\n\n#+begin_src python :results output\nprint('wtf')\n'what the heack'\n#+end_src\n\n#+RESULTS:\n: wtf\n\n** your own language\nhttps://orgmode.org/worg/org-contrib/babel/languages/index.html#develop\n\nthe template\n\n#+begin_src sh :results output code\ncurl \"https://git.sr.ht/~bzg/worg/blob/master/org-contrib/babel/ob-template.el\"\n#+end_src\n\n\n#+begin_src\n\n#+end_src\n\n#+begin_src elisp\n;;; ob-template.el --- org-babel functions for template evaluation\n\n;; Copyright (C) your name here\n\n;; Author: your name here\n;; Keywords: literate programming, reproducible research\n;; Homepage: https://orgmode.org\n;; Version: 0.01\n\n;;; License:\n\n;; This program is free software; you can redistribute it and/or modify\n;; it under the terms of the GNU General Public License as published by\n;; the Free Software Foundation; either version 3, or (at your option)\n;; any later version.\n;;\n;; This program is distributed in the hope that it will be useful,\n;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n;; GNU General Public License for more details.\n;;\n;; You should have received a copy of the GNU General Public License\n;; along with GNU Emacs; see the file COPYING.  If not, write to the\n;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n;; Boston, MA 02110-1301, USA.\n\n;;; Commentary:\n\n;; This file is not intended to ever be loaded by org-babel, rather it is a\n;; template for use in adding new language support to Org-babel. Good first\n;; steps are to copy this file to a file named by the language you are adding,\n;; and then use `query-replace' to replace all strings of \"template\" in this\n;; file with the name of your new language.\n\n;; After the `query-replace' step, it is recommended to load the file and\n;; register it to org-babel either via the customize menu, or by evaluating the\n;; line: (add-to-list 'org-babel-load-languages '(template . t)) where\n;; `template' should have been replaced by the name of the language you are\n;; implementing (note that this applies to all occurrences of 'template' in this\n;; file).\n\n;; After that continue by creating a simple code block that looks like e.g.\n;;\n;; #+begin_src template\n\n;; test\n\n;; #+end_src\n\n;; Finally you can use `edebug' to instrumentalize\n;; `org-babel-expand-body:template' and continue to evaluate the code block. You\n;; try to add header keywords and change the body of the code block and\n;; reevaluate the code block to observe how things get handled.\n\n;;\n;; If you have questions as to any of the portions of the file defined\n;; below please look to existing language support for guidance.\n;;\n;; If you are planning on adding a language to org-babel we would ask\n;; that if possible you fill out the FSF copyright assignment form\n;; available at https://orgmode.org/request-assign-future.txt as this\n;; will make it possible to include your language support in the core\n;; of Org-mode, otherwise unassigned language support files can still\n;; be included in the contrib/ directory of the Org-mode repository.\n\n\n;;; Requirements:\n\n;; Use this section to list the requirements of this language.  Most\n;; languages will require that at least the language be installed on\n;; the user's system, and the Emacs major mode relevant to the\n;; language be installed as well.\n\n;;; Code:\n(require 'ob)\n(require 'ob-ref)\n(require 'ob-comint)\n(require 'ob-eval)\n;; possibly require modes required for your language\n\n;; optionally define a file extension for this language\n(add-to-list 'org-babel-tangle-lang-exts '(\"bb\" . \"tmp\"))\n\n;; optionally declare default header arguments for this language\n(defvar org-babel-default-header-args:bb '())\n\n;; This function expands the body of a source code block by doing things like\n;; prepending argument definitions to the body, it should be called by the\n;; `org-babel-execute:bb' function below. Variables get concatenated in\n;; the `mapconcat' form, therefore to change the formatting you can edit the\n;; `format' form.\n(defun org-babel-expand-body:bb (body params &optional processed-params)\n  \"Expand BODY according to PARAMS, return the expanded body.\"\n  (require 'inf-bb nil t)\n  (let ((vars (org-babel--get-vars (or processed-params (org-babel-process-params params)))))\n    (concat\n     (mapconcat ;; define any variables\n      (lambda (pair)\n        (format \"%s=%S\"\n                (car pair) (org-babel-bb-var-to-bb (cdr pair))))\n      vars \"\\n\")\n     \"\\n\" body \"\\n\")))\n\n;; This is the main function which is called to evaluate a code\n;; block.\n;;\n;; This function will evaluate the body of the source code and\n;; return the results as emacs-lisp depending on the value of the\n;; :results header argument\n;; - output means that the output to STDOUT will be captured and\n;;   returned\n;; - value means that the value of the last statement in the\n;;   source code block will be returned\n;;\n;; The most common first step in this function is the expansion of the\n;; PARAMS argument using `org-babel-process-params'.\n;;\n;; Please feel free to not implement options which aren't appropriate\n;; for your language (e.g. not all languages support interactive\n;; \"session\" evaluation).  Also you are free to define any new header\n;; arguments which you feel may be useful -- all header arguments\n;; specified by the user will be available in the PARAMS variable.\n\n(defun org-babel-execute:bb (body params)\n  \"Execute a block of bb code with org-babel.\nThis function is called by `org-babel-execute-src-block'\"\n  (message \"executing Bb source code block\")\n  (let* ((processed-params (org-babel-process-params params))\n         ;; set the session if the value of the session keyword is not the\n         ;; string `none'\n         (session (unless 't ;(string= value \"none\") I don't get where 'value' is supposed to come from\n                   (org-babel-bb-initiate-session\n                    (cdr (assq :session processed-params)))))\n         ;; variables assigned for use in the block\n         (vars (org-babel--get-vars processed-params))\n         (result-params (assq :result-params processed-params))\n         ;; either OUTPUT or VALUE which should behave as described above\n         (result-type (assq :result-type processed-params))\n         ;; expand the body with `org-babel-expand-body:bb'\n         (full-body (org-babel-expand-body:bb\n                     body params processed-params)))\n    ;; actually execute the source-code block either in a session or\n    ;; possibly by dropping it to a temporary file and evaluating the\n    ;; file.\n    ;;\n    ;; for session based evaluation the functions defined in\n    ;; `org-babel-comint' will probably be helpful.\n    ;;\n    ;; for external evaluation the functions defined in\n    ;; `org-babel-eval' will probably be helpful.\n    ;;\n    ;; when forming a shell command, or a fragment of code in some\n    ;; other language, please preprocess any file names involved with\n    ;; the function `org-babel-process-file-name'. (See the way that\n    ;; function is used in the language files)\n    (print full-body)\n    (org-babel-eval \"bb -f /dev/stdin\" full-body)))\n\n;; This function should be used to assign any variables in params in\n;; the context of the session environment.\n(defun org-babel-prep-session:bb (session params)\n  \"Prepare SESSION according to the header arguments specified in PARAMS.\"\n  (list \"todo\"))\n\n(defun org-babel-bb-var-to-bb (var)\n  \"Convert an elisp var into a string of bb source code\nspecifying a var of the same value.\"\n  (format \"%S\" var))\n\n(defun org-babel-bb-table-or-string (results)\n  \"If the results look like a table, then convert them into an\nEmacs-lisp table, otherwise return the results as a string.\"\n  )\n\n(defun org-babel-bb-initiate-session (&optional session)\n  \"If there is not a current inferior-process-buffer in SESSION then create.\nReturn the initialized session.\"\n  (unless (string= session \"none\")\n    ))\n\n(provide 'ob-bb)\n;;; ob-bb.el ends here\n#+end_src\n\n#+RESULTS:\n: ob-bb\n\n#+begin_src bb\n(for [[k v] {:a :b :c 'd}]\n  [v k])\n#+end_src\n\n#+RESULTS:\n: ([:b :a] [d :c])\n" 536870913] [151 :nodes/id "16c2d427-48ac-48e4-87f1-d7fdc65afd98" 536870913] [151 :nodes/properties {"CATEGORY" "20220310174937-org_babel", "ID" "16c2d427-48ac-48e4-87f1-d7fdc65afd98", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220310174937-org_babel.org", "PRIORITY" "B"} 536870913] [151 :nodes/title "org babel" 536870913] [151 :nodes/value 2.0 536870913] [152 :nodes/content ":PROPERTIES:\n:ID:       4d339c99-33b9-463c-9822-1f2469e11766\n:END:\n#+title: filecoin\n\n[[id:4c761d6c-e68a-45a2-90d6-62b47c45e0aa][crypto]]\n [[id:8db01ec6-b63d-45e3-ac58-1cdcaa65d07a][ipfs]]\n\nfilecoin spec:\nhttps://spec.filecoin.io/\n\nseems interesting. I'd like to try to make money that way somehow\n\nhttps://filecoin.io/blog/posts/the-future-of-datadaos/\n" 536870913] [152 :nodes/id "4d339c99-33b9-463c-9822-1f2469e11766" 536870913] [152 :nodes/properties {"CATEGORY" "20220127220142-filecoin", "ID" "4d339c99-33b9-463c-9822-1f2469e11766", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220127220142-filecoin.org", "PRIORITY" "B"} 536870913] [152 :nodes/title "filecoin" 536870913] [152 :nodes/value 2.0 536870913] [153 :nodes/content ":PROPERTIES:\n:ID:       faee692b-c853-4bdb-a5eb-267da5c48d29\n:END:\n#+title: questions\n\njust questions I have. Similar to [[id:efadd1da-f54a-4cbc-bcba-ed6c349c89a5][patrick collison]]'s questions\n\n** diet\n- why do I have so much acetone in my pee after (supposedly) being in keto for 3 years?\n- what happens when you cook fats too much? how do they affect the body?\n    I've heard of people concerned with cooking certain oils, but they never talk\n    about \"good\" cooking fats, ghee & tallow. At which point do these get fucked up?\n\n    I've noticed sometimes when cooking on a cast iron at high heat that I get I'll\n    sometimes feel gross. I think it has something to do with this.\n- why does morning protein fuck me up and make me burpy? It seems ghee alone\n    doesn't have this negative consequence.\n    Morning:\n  - ketones lower\n  - glucose higher\n  - more LA in blood bc relying on fat stores?\n  => protein could spike insulin a bit more?\n  Why does spiking insulin fuck you up?\n  I'm burpy because the fat isn't being absoarbed by the liver as much?\n  What effect does insulin have on the process of storing fat?\n  I'm thinking some chylomicron issue?\n- what changes rate of fat absorbtion?\n- How do I explain that night camping in Arkansas where I felt terrible having\n    eaten ghee and homemade jerky. I chalked it up to my body not digesting\n    properly and it fermenting later.\n    It may have been the most painful night of my life. What happened?\n    I think it happens to a lesser extent now. What is it?\n    Too much protein or too much fat? I've been alternating between the two for a\n    while now.\n" 536870913] [153 :nodes/id "faee692b-c853-4bdb-a5eb-267da5c48d29" 536870913] [153 :nodes/properties {"CATEGORY" "20220829012311-questions", "ID" "faee692b-c853-4bdb-a5eb-267da5c48d29", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220829012311-questions.org", "PRIORITY" "B"} 536870913] [153 :nodes/title "questions" 536870913] [153 :nodes/value 2.0 536870913] [154 :nodes/content ":PROPERTIES:\n:ID:       c8424162-ba5d-4134-a990-5b7fe189d106\n:ROAM_ALIASES: foolog\n:END:\n#+title: food log\n\n[[id:b77d4578-bc50-42a8-94c4-b11d27f78837][food]]\n\nfood log to corelate stuff\n\n** blood sugar conversion\n3.2 mmol/L = 57.66 mg/dL\n3.3 mmol/L = 59.46 mg/dL\n3.4 mmol/L = 61.26 mg/dL\n3.5 mmol/L = 63.06 mg/dL\n3.6 mmol/L = 64.86 mg/dL\n3.7 mmol/L = 66.67 mg/dL\n3.8 mmol/L = 68.47 mg/dL\n3.9 mmol/L = 70.27 mg/dL\n4.0 mmol/L = 72.07 mg/dL\n4.1 mmol/L = 73.87 mg/dL\n4.2 mmol/L = 75.68 mg/dL\n4.3 mmol/L = 77.48 mg/dL\n4.4 mmol/L = 79.28 mg/dL\n4.5 mmol/L = 81.08 mg/dL\n4.6 mmol/L = 82.88 mg/dL\n4.7 mmol/L = 84.68 mg/dL\n4.8 mmol/L = 86.49 mg/dL\n4.9 mmol/L = 88.29 mg/dL\n5.0 mmol/L = 90.09 mg/dL\n5.2 mmol/L = 93.69 mg/dL\n5.4 mmol/L = 97.30 mg/dL\n5.5 mmol/L = 99.10 mg/dL\n5.6 mmol/L = 100.90 mg/dL\n5.8 mmol/L = 104.50 mg/dL\n6.0 mmol/L = 108.11 mg/dL\n6.2 mmol/L = 111.71 mg/dL\n6.4 mmol/L = 115.32 mg/dL\n6.5 mmol/L = 117.12 mg/dL\n6.6 mmol/L = 118.92 mg/dL\n6.8 mmol/L = 122.52 mg/dL\n** meat macro\n| meat         | prot |  fat |   |\n|--------------+------+------+---|\n| 85/15 ground | 18.6 | 15.0 |   |\n| 80/20 ground | 17.2 | 20.0 |   |\n|              |      |      |   |\n\n** 2022-03-22\n  - coffee in the morning.\n  - 1pm ~1.5 cup yoghurt\n    - felt gross and depressed after eating this\n  - 5:30 ~0.5cup kefir cheese\n  - 7:30 1lb tri tip with dehydrator beef fat & some butter\n  - 11pm feel gross. pooped floating half-liquid greasy stool.\n    - took 1000mg acetaminophen\n  - *THEORY*\n    I've felt quite shitty this week. poor digesion leading to poor sleep.\n    This might be because of three things:\n    - too much fat\n      - but I was fine last week with just as much fat. So it could also be the\n        other things causing my fat digestion to be fucked up\n    - coffee\n      - this has fucked me in the past. I'm going to remove it.\n    - die-off. kefir was introduced more. So this is a possibility.\n      - AnnMarie has also been feeling gross. She has not had coffee or too much\n        fat, just shares the yoghurt with me (which I added kefir to).\n        BUT AnnMarie had cheesecake (with graham cracker crust). I had much more\n        yoghurt last week and felt great.\n\n** 2022-03-23\n  - NO coffee, hibiscus tea though, some adderall (dexedrine/dextroamphetamine)\n    metformin\n  - 10am feel gross from last night. bad digestion -> bad sleep.\n    - had some yoghurt and a cup or so of whey\n  - 1pm took hot bath. have mild headache. maybe from yoghurt?\n  - 3:30pm had two oxtails with some broth. made last night.\n  - later on felt burpy and kind of goss. Had some yoghurt at around 5pm or so\n    and fasted till night.\n\n** 2022-03-24\n  - early morning had a small amount of yoghurt. fasted most of the day,\n    heavily debated lunch, bug avoided with nicotine pouch.\n  - 5:30pm had a few small sips of cheap scotch. got a bad headache from this.\n    Likely dehydration\n  - 7pm got home and binged some cheese and a bit of yoghurt. not a huge quantity\n    but enough to make me worried. Felt excess mucus from this. Resisted strong\n    urge to eat tri tip.\n  - *THEORY* acetaminophen fucks with me? I've been downhill since I tooks some\n    2022-03-20 & 21. It's said to fuck with mucus production and mucus\n    permiability, so it could be causing excess mucus later on.\n    https://pubmed.ncbi.nlm.nih.gov/7697906/ Also I remeber in budapest, I was\n    taking some acetaminophen and that possibly fucked me up\n\n** 2022-03-25\n  - 7:30 500mg metformin, tiny adderall, nicotine\n  - 9am about 1/3 mason jar of fatty beef bits cold and a few spoons of fresh\n    kefir-started yoghurt, and 0.5lb leftover tri tip\n  - 10:30am another greasy stool. light green, almost yellow in color, similar\n    to last night.\n  - 1pm oxtail soup, kefir yoghurt, george's bacon (good stuff)\n  - 6pm a few bites of cheese. Felt really tired and kind of gross. My far\n    sighted vision was really blurry which was concerning.\n  - 8pm had steak w/ butter and 7 egg yolks. Felt very tired after and basically\n    took a 30min nap. Felt mucus in my throat after the meal. was a lot\n  - 11pm I feel quite good after it being a lot to digest. was worried\n    initially. far sighted vision is perfectly clear now.\n\n** 2022-03-26\n  - 8am 500mg metformin, adderall, nicotine. Was inflamed with ears ringing and\n    tummy grumbling. I think I ate too much last night.\n  - 11am 500mg metformin.\n    I kind of want to do a fast. I think this mucus in my thoat is a sign that\n    my digestion needs a rest.\n  - 1pm had egg yolks bc I was hungry and felt malnourished. Near instant\n    headache and mucus in my throat. Highly regret. Also some of AnnMarie's steak\n  - 3pm continued feeling gross. made myself throw up. The steak bits were\n    completely undigested.\n  - 4pm diarrhea pretty bad. mostly liquid with some chunks, some floating.\n  - 5pm COFFEE!\n  - 6:30 was having a headache, so needed electrolytes so drink 1.5 cup kefir.\n    Felt good from this. Also metformin. Little kefir yoghurt.\n  - 9:30pm kefir, beef fat, yoghurt. Solid amount. We'll see how I fare.\n\n** 2022-03-27\n  - woke up feeling kind of gross like there was still fat in my stomach. still\n    much better than yesterday though.\n  - 8am coffee, metformin. Felt fucked up from the coffee. was too much caffeine.\n  - 1:30pm metformin. Was hungry and going to eat, but then drank some water and\n    no longer had the desire. I should try this strategy more--every time I eat,\n    I should drink water first and see if hunger goes away.\n    I think I need a fast to get over this digestion issue.\n  - 5pm had two tablespoons of kefier yoghurt and noticed it made me feel\n    somewhat gross and have a little bit of flem in my throat.\n  - 6:45 had two bites of beef fat to see if there was a reaction like the\n    yoghurt. there wasn't. It was good.\n  - 7:30 0.75in thick NY strip with more beef fat. Surprisingly I wasn't that\n    into the fat and got satiated pretty quick and was enjoying the lean meat a\n    lot more. The feeling of satisfaction biting into a lean piece of meat was\n    really surprising. I feel like I've experienced it long ago but have since\n    forgot. Maybe yoghurt / =dairy fucks with my satiety so I eat more fat but=\n    =not protein?=\n    Feel very full. I home this goes down well.\n  - 9:45pm had a solid mouthful of kefir, which was a MISTAKE. Felt kinda gross\n    after and like it disrupted digestion.\n  - *THEORY* - Dairy was okay at first, but now I've had too much and its really\n    affecting me poorly. Going to try to stay away from it for a few days.\n\n** 2022-03-28\n  - Still woke up feeling like there was still fat.\n  - 7:30 dark roast COFFEE\n  - 9am felt nauseous and made myself throw up. There were a few undigested fat\n    chunks and lots of mucussy bits. Tasted like beef a bit. Like the dehydrated\n    beef though maybe. No rendered fat there, which I thought there would be\n    though.\n  - 6pm had a pound of sirloin. Prepared beef fat, but wasn't into it. Was\n    actually craving the protein more.\n    This digested alright. Went on a walk after. was still around in my stomach\n    for like an hour though.\n  - *THEORY* - looking at [[id:aa276919-dce8-4427-b939-9dea096a12a2][ketotic blog]], saying that IBD is worse with any \"residue\"\n    including dead cells (i.e. those in kefir/yoghurt maybe?).\n\n** 2022-03-29\n  - Woke up feeling better. Still not awesome. metformin\n  - 8am COFFEE\n  - 7pm 1lb flank steak, little fat + butter, and HONEY (like 2 tbsp)\n  - 10:30pm lower stomach almost feels like it's stretched out? like it's trying\n    to force something through? Slightly burpy and ears ringing and inflamed.\n  - 12am this escalated to me feeling gross then nausea then vomit. It was very\n    non-acidic and mucussy. undigested protein and fat.\n  - *THEORY* I have [[id:4e007f1e-3e2b-4c96-98f0-58260d6ed0e2][sibo]]. also, coffee fucks with motility. I need to fast I\n    think. I still don't have a good story for how I have this though?\n    - OR nicotine + motility? [[id:6d87c5bf-dd93-4267-b713-fb3dc9fba0b0][lucy mailing blog]] on sibo seems to indicate that\n      bad motility, stomach acid production, etc. fucks with it.\n      I should look into what may be affecting my motility\n\n** 2022-03-30\n  - 7:30am COFFEE and metformin -- plan to fast\n\n  - *THEORY*\n    gastric emptying and nicotine https://pubmed.ncbi.nlm.nih.gov/2979243/\n    smokers using higher nicotine cigarettes have much slower gastric emptying!\n    There are definitly other effects on digestion!!\n\n** 2022-03-31\n  - 8am COFFEE and metformin\n  - 6:30pm cheese+butter w/ berberine\n  - was up and down all night with diarrhea. See [[id:a49bfbb3-9c08-42cf-909d-4a9f789aeb61][berberine]] for why I think this\n    is so. I kind of wish I didn't breakfast w/ cheese. But I think I probably\n    still would have had the diarrhea.\n\n** 2022-04-01\n  - 8am COFFEE and berberine\n  - 11:30am 0.8lb flank steak, butter, beef fat. Beef fat was cold and had been\n    heated up a few times, which made it taste kind of gross tbh and I'm still\n    burping at 2pm from it. Other than that the meal was really awesome.\n    This ofc triggered some diarrhea shortly after.\n  - More berberine after meal\n  - 2pm some cheese + butter, kefir cheese, kefir yoghurt.\n  - 5:30pm still burping the old beef fat taste :/ -- made myself throw up,\n    mainly out of curiosity and maybe it could help. It definitely looked and\n    smelled like the beef tallow. Very mucussy.\n    So this is not good. We're right back where we were pre-fast I guess.\n  - 6:30pm 1.3lb chuck roast\n  - 8:45 trader joes stinky brie cheese\n\n** 2022-04-02\n  - 5:30am COFFEE, berberine -- Felt terrible this morning. My left eye was\n    redder than its ever been and I was so inflamed. Luckily wasn't still burpy\n    or anything. I obviously should NOT have had the chuck roast or the cheese.\n  - hike: 7:30 to 12 - berberine\n  - lunch at 4:10. 0.8lb flank steak with A LOT of butter and ghee. Also some\n    parmesean cheese that I would put butter / ghee with salt on it bc I was\n    still hungry. berberine. And like 1 tbsp HONEY!\n  - 5:30 - kefir cheese + kefir yoghurt. Pobably like 1.75 cups total\n  - 9pm - cap cider wings with lots of blue cheese dressing\n    Was craving and totally overate and felt gross after.\n\n** 2022-04-03\n  - Felt much better than when I woke yesterday, though still inflamed. I think\n    there must by some appetite misregulation going on where I'm like super\n    hungry randomly. Then I overeat to my detriment. Like this morning I was\n    hungry for a brief second, but then it went away pretty quick and I still\n    felt inflamed. Maybe I just need to equalize to multiple smaller meals per\n    day rather than fasting and doing one giant one. Though I think the fast is\n    beneficial. I wonder when my appetite regulation will stabalize.\n  - 8am COFFEE, berberine + metformin\n  - 11:30 0.85lb steak, bunch of bacon, ghee, honey.\n  - 3:30pm a bit tired and burpy. It was a really intense meal and I should\n    have fasted longer. again, my appetite regulation is fucked up somehow.\n  - 5:20pm little bit of parmesian / gouda & a LOT--maybe 1/3 cup--of ghee.\n    kefir cheese, kefir yoghurt (a cup and a half)\n  - 9pm had kind of a lot of honey. maybe 3 tbsp\n  - 11pm and little burpy still from that ghee\n  - 12am threw up A LOT. there was STILL BACON in my vomit! I think it was bc of\n    coffee that I had a hard time digesting it. I didn't even think there would\n    be anything at all. I thought maybe just some fat or something.\n\n** 2022-04-04\n  - 8:30am 1 tbsp of honey, metformin + berberine\n  - 11am about 1.2lb chuck roast cut into steak. Lots of butter.\n    - took a 40 min nap at 12 and still felt really tired throughout the day.\n  - 5:45pm felt gross and out of curiousity, made myself throw up again. it was\n    BAD. Almost the whole meal was in there besides the fat. Most of it was\n    almost completely undigested. I'm so sick. I need to fast. Right now I feel\n    like dying.\n\n** 2022-04-05\n  - 7:45am COFFEE\n  - 9:15pm 1.2lb flank steak, little bit of parmesean\n  - 2:30am severy diarrhea\n  - had 2 berberine, 1 metformin this day\n\n** 2022-04-06\n  - had severe diarrhea at like 2:30am last night.\n    felt a little gross this morning? Didn't digest as well as it could have.\n    But feel alright this morning.\n  - 7:30am COFFEE\n  - 4:30pm 3tbsp honey, 0.5 cup kefir cheese.\n  - 5:30 feel surprisingly gross from such little food. got stuffed sinus, ears ringing,\n    and still ofc the grumbling tummy of breaking a fast\n  - 6:30 binged hard on cheese. Lots of butter too.\n  - 8:45pm a half slice of bacon.\n  - 10:15pm I feel pretty gross. had intense liquid diarrhea again.\n  - had 2 berberine, 1 metformin again\n\n** 2022-04-07\n  - 7am stomach was still aggressively grumbling from that cheese binge.\n    Had some gross farts\n\n** 2022-04-13\n  - Have a long update. Was Ryan's wedding and I've been in OC for a bit so this\n    has been hard to keep track of. On rehearsal day, I ate dinner full on, lots\n    of meat, some carbs, and ate the dessert which was some chocolate sugarry\n    mousse shit. Felt gross and had a headache later and made myself throw up on\n    the side of the road. BUT the bad part was actually because of what I ate\n    earlier in the day. I had a solid lunch at like 9am with honey, ground beef,\n    and sugary bacon. Like 8 hours later this gave me a really bad headache.\n    Like the one I had while hiking in AR at night after eating too much jerkey.\n    Then the next morning, after having 2 alieve/naproxin the night before, I\n    did a b12 shot and made sure not to eat. This was the day of the wedding.\n    But I then drank a solid amount from like 5pm till 11:30, and even had a\n    small dinner of brocolini and steak. But I felt great and felt great the\n    next morning! And then fasted till dinner and felt good. Then I've just been\n    deteriorating. No nicotine the day before or day of the wedding.\n  - Liver last night at 5pm did horrible. I wasnt too hungry and just had about 6oz of it.\n    Been having coffee every morning and then fasting till like 5pm and this is\n    still not working. Even on monday with no nicotine this didn't do well.\n  - THEORY: when in AR having digestion issues, I switched to plain lean beef\n    that was mostly raw from the air fryer and I slowly healed from this.\n    I think switching back to this is a good idea. Just lightly boiled lean beef.\n    And I'll only eat when this sounds appealing. Since I've been such a slave to\n    cravings lately. Also it's possible reintroduction of coffee has generally\n    been bad. oh, but ALSO I didn't do metformin?\n\n** 2022-04-16\n  - fast. had some coffee in the morning\n\n** 2022-04-18\n  - 10am measured blood ketones bhoxb, ONLY 0.3mmol/L!!\n  - 11am super fatty parts of ribeye. did not eat lean part\n  - 4pm 1 brat, 2.5 hot dogs, from Dave's meat & produce, pure pork and beef respectively. no additives.\n  - 1am felt nauseous and woke up and threw up in the toilet. All the hot dogs were still there.\n\n** 2022-04-18\n  - THEORY: want to read up on https://cholesterolcode.com/are-you-a-lean-mass-hyper-responder/\n    and their \"lipid theory\". My guess is coming off a fast, you may be high fat\n    metabolism, so eating a bunch of fat causes the \"traffic jam\" as you are\n    burning fat but eating fat competes with those pathways, so there's no demand\n    for more fat, so you have issues digesting it.\n    Next meal will be low fat, high protein.\n  - 11:30am two t-bones, totaling probably 1.7 lb\n  - 4:30 feel a bit inflamed, but not too bad and I'm not burping.\n    Was really tired. I don't think I slept well last night.\n  - 9pm felt fine.\n  - 10:30 was quite hungry and ate maybe 1lb of tri tip steak, some raw.\n\n** 2022-07-26\n  - THEORY: reluctantly, at night I ate a shit ton of a bottom roast even though I feared I would feel gross from a microbiome thing,\n    but it was delicious and made me feel really good and woke up feeling much better than the last several nights of severely limiting protein.\n    I think I tolerate lean meat much better! Amazingly.\n\n** 2022-07-27\n  - 8am wake up\n  - 9am - eat 4.5 eggs w/ parmesean & generous ghee (lots of fat)\n  - 12:10am - workout, but felt gross food in stomach. Had to force a good\n    workout.\n  - 1:15 - got home from workout, forced throwup bc food felt gross. whole meal\n    came out basically. Felt much better after this\n  - THEORY - I'm eating too much fat. Maybe metformin is affecting this. I wonder if insulin signaling affects fat digestion???\n    This would totally explain the grossness I feel from eating fat? maybe? Or maybe I'm just fat intolerant rn.\n    Gonna try a PSMF basically.\n\n** 2022-07-28\n  - 7am wake up, work out\n  - 9am small amount of coffee\n  - 10am hike\n  - 2:30pm eat ~1.5 ny strip steaks, dry aged & grilled. Also some of a baked bottom roast\n  - 9:15pm cap cider chicken wings\n  - felt gross after the ny strip steaks and also gross after the wings. Was bad news.\n    Felt very gross the next morning. Seemed like not too much fat but was still gross.\n\n** 2022-07-29\n  - 9:30am wake up. Felt gross and slept like shit from yesterday\n  - 1pm - eat saussage & eggs at breakfast place\n    - got severe acid reflux after this\n  - 3:30pm eat remainder of roast from yesterday - had a bit of butter & cheese\n    with it bc it was so lean it didnt taste great\n  - 7pm eat like a pound ish of bottom round roast, drink some cream.\n    - cream made me feel gross, had some kefir and it eventually went away.\n      Seems too easy to over-eat from cream.\n    - tested ketones and they were actually high BohB was like 1.7!\n\n** 2022-07-30\n  - 10am woke up (fell asleep at 4am bc kratom)\n  - 10:30 coffee\n  - 12pm some meat ~0.5 lb w/ a little ghee. (I should start actually weighing)\n  - 5pm chuck roast ~0.8 lb w/ ghee\n  - 7pm more chuck -- ~0.2lb w/ ghee AND CHEESE. which was not good\n  - 10pm CHEESE snack\n  - feel bloated from the cheese and get cheese cravings kind of. It is\n    addictive. Maybe its an endocannabinoid release thing?\n\nGIVE UP CHEESE FOR A WHILE (just ghee and a little kefir)\n\n** 2022-07-31\n  - 8:30am wake\n  - 10:30am sun+coffee\n  - 12:30-1:10pm workout + 10min run\n  - 2pm - 562g cooked rump w/ thick fat cap + small amount of ghee\n  - 8pm - about a cup of kefir\n    - the roast was too much and fucked me up for some reason!\n\n** 2022-08-02\n  - just meat + ghee I think? I wish I wrote it!\n  - I felt exceptionally good these two days\n    \n** 2022-08-03\n  - 10:30am 1.2lb petit sirloin, 0.75lb ribeye, fried in cast iron\n    - this was way too much protein I think (~182g).\n      Felt like shite later on in the day and didn't have energy to workout\n  - 8:30pm generous amount of new ghee + some petit sirloin raw\n  - NOTE: new ghee with Smith bro's butter is much better than old ghee w/\n    trader joe's shit butter\n** 2022-08-04\n  - 9:30am cold brew\n  - 11:30am weightlift + run home\n  - 2:30pm ~1lb fatty chuck w/ heafty ghee\n  - 7pm ate something\n  - 9:30pm ate more\n  - THEORY: ate too much protein this day again?\n\n** 2022-08-05\n  - woke up with a headache. Like I was fermenting like I would in AR sometimes.\n  - 11am HEAVY CREAM bc it was on sale.\n    - this was a mistake\n  - 2pm some food. went down but felt kinda gross\n  - 7pm dinner with lots of ghee. Kept protein low\n  - 12am throw up bunch of ghee. I think heavy cream did me dirty.\n    \n** 2022-08-06\n  - inflamed again. coffee, ghee, meat, kefir\n\n** 2022-08-07\n  - woke up inflamed. coffee. ghee, meat, & kefir only\n  \n** 2022-08-08\n  - woke up feeling even more inflamed. cover with coffee.\n  - THEORY:\n    - coffee covers my sittiness. I eat while still on coffee. Then that\n      compounds and ferments with underlying shittiness.\n    - When I felt good on 08-02, it was due to me having only meat for\n      like a day or two. No ghee. Maybe I should try to do a psmf again.\n      - YES.. I was burning fat from fat stores, and the excess fat was having a\n        hard time getting absoarbed so it was just sitting there. Working out\n        helped create demand for fat so this helped. Maybe bc I have such little\n        insulin? How would the fat get stored anyway?\n      - absoarbtion of fat depends on demand.\n        Low demand => slow absoarbtion => fermentation.\n\n** 2022-09-18\n- Woke up inflammed af from too many scrambled egg yolks. I've been fat intolerant.\n- 2:30pm ate 120g braised chuck w/ fat\n- 6:30pm felt disgusting/inflamed/acid reflux, threw up, and so much fat in there!\n- 1:40am felt like shit w/ headache ringing ears. Took hot bath, then got out\n  and was hungry, so had gelatin ground beef.\n- THEORY:\n  fat intolerance!\n  based on [[id:e22d1b38-9b0c-46df-ac70-f9fe028527e7][Regulation of antibacterial defense in the small intestine by the nuclear bile acid receptor]]\n  I think\n  some issue?? idk => fat's not digested correctly => no bile production => no\n  FXR signaling => SIBO => inflammation/insulin/low ketones/more fat intolerance\n\n  So, I'm going to try to short circuit this w/ berberine based on\n  [[id:919e9425-207e-45b9-9ab8-891fd455f7f4][Berberine Directly Affects the Gut Microbiota to Promote Intestinal Farnesoid X Receptor Activation]]\n\n  BUT why do I have malabsorbtion?\n  - see [[id:34cf2840-1d8d-4283-b6ff-58287196b719][nutrient malabsorbtion]]\n    -> NO MORE [[id:793f1b7c-84c5-44c0-b818-80bdeb5df1cd][nicotine]]!!!!\n** 2022-09-19\n- woke up with massive headache\n  like worst night ever type stuff. Best theory is that it's protein\n  fermentation?\n  - maybe the powdered gelatin fucked me up\n- 9am coffee. more headache.\n- 10am kratom concentrate. this seemed to help headache.\n- 11:40am some dutch oven tri tip. no added fat.\n- 4pm shot of ginger-artichoke\n- 6pm (ish?) some ~155g boiled meat and butter\n  - ginger-artichoke seemed to do something here. Felt quite full.\n    And was grumbling earlier. idk if from ga though\n\n** 2022-09-20\n- 7:30am - woke up feeling okay!\n- 8am - coffee, ginger-artichoke\n- 10:20 - workout - bench / pull ups\n- 11:50am - 160g boiled steak w/ ghee & tallow w/ ~2g glycine supplement\n- 1:30pm - bohb: 3.1,  bg: 84= 4.7. GKI = 1.51 feel somewhat tired\n- 3:30pm boiled steak ~180g, plenty ghee. Some coco oil\n- 9pm - boiled roast (so mostly raw) like ~90g, plenty ghee.\n\n** THEORY\nToday I felt like shit for a period after every meal. BUT I still feel like I'm\nimproving. I think I should basically do a PSMF and cut out fat for like a day.\n\nRAW meat is working. fully cooked ground beef has been fucking me.\n\nZoltan Magyari said his friend had Chrone's disease and had to eat only chicken\nbreast for like a month. Maybe there's something to the no fat thing. At least\nfor a little bit.\n\nMotility is supposed to be better on protein! see [[id:4e007f1e-3e2b-4c96-98f0-58260d6ed0e2][sibo]]\n\ngonna try this.\n\nALSO i'm still on the berberine 3x per day.\n\n** 2022-09-21\n- 7:45 - woke up feeling okay. lots of smoke from wildfires last night.\n  - coffee. not a lot. more ginger-artichoke. This time 3 viles full.\n- 10:30am - several spoons of ghee.\n  - said I wouldn't but I figure if it's by itself, and not too much then it\n    would provide good energy\n- 12:15pm - ~100g boiled meat\n  - felt good after this, but I'm tired now that coffee wore off\n- 3pm tired af. took hour long nap.\n- 6:15pm - ~160g rare cooked roast. had a fatty bit. 3g glycine\n- 7:30pm\n  - blood glucose = 94mg/dl = 5.2\n  - boxb = 2.2\n  - GKI = 2.36\n- 9pm - ghee and salt. AND ginger tea from actual ginger\n\n- THEORY:\n  - tried lower fat today. ruined GKI.\n  - fat fast or do psmf? idk. gonna do fat fast bc that feels better and GKI.\n  - ginger-artichoke not doing anything\n  - how to improve motility? idk!\n\n  NOW:\n  - high fat. VERY low protein meals. 35g MAX. preferrably less\n  - no nicotine\n  - continue berberine\n  - continue glycine\n  - continue ginger-artichoke. even though it doesn't seem to be working.\n  - continue raw / rare meat (seems easier to digest)\n  - butter or no? seemed to do good w/ it the other night? idk.\n\n** 2022-09-22\n- 8:40am - ~3 tbsp ghee, 3g glycine\n  - woke up w/ slight headache continued from last night, I think bc of a double\n    dose of berberine. Or the ice cream I tasted.\n- 1:20pm - workout - wanted but couldn't do squats cuz I was sore\n- 2:15pm\n  - blood glucose (bg) - 88 mg/dl = 4.9mmol\n  - boxb = 3.3\n  - GKI = 1.48\n- 3:15pm - some raw beef (140g?). plenty ghee\n  - now 7pm and still super full!\n- 9:30pm\n  - <100g raw round roast. plenty ghee\n  - 3g glycine, ~5g creatine\n  - more ginger tea before bed. Was super spicy. Not sure about it.\n\n- THEORY\n  feeling better! some possible reasons\n  - no nicotine\n  - berberine did it's work?? - no berb today!\n  - glycine\n  - only source of protein is rare raw meat\n    - low protein\n  - protokinetics -- ginger+artichoke\n\n** 2022-09-23\n- 8am - woke up w/ slight inflammation & ringing ears. Started getting better\n- 9:15am - 2 tbsp ghee, coconut oil, and a little bit of coffee (I have an\n  interview and I'm addicted) - glycine\n- 11am - feeling gross still! - berberine is back\n- 11:20am - some magnesium oxide\n- 3:30pm - some quite rare round roast, small ghee cuz didn't feel like it\n- 3:45\n  - boxb = 5.9 - tested again cuz this seemed high and got 6.1!\n  - bg = 84 = 4.7\n  - GKI = 0.77\n- THEORY:\n  - Don't eat at 9:30pm? LAST MEAL AT 6pm!!!\n  - no berberine => overgrowth?\n  - I have folate defficiency?!?! [[id:3be9fb0e-7384-4d63-a57a-eb62fd89ccc8][folate]]\n\n** 2022-09-24\n- 9:30 - 4 scrambled egg yolks w/ generous ghee\n- 12pm - folate!!! w/ ~60g liver 30g meat\n- 1:15pm - ~50g roast\n- 4pm little bit of kefir\n  - was quite tired after this. took a tiny nap\n- 6pm - raw round roast ~200g\n  - bohb = 4.7\n  - bg = 89 = 4.9\n  - gki = 1.04\n- 11pm - 60g of roquefort cheese\n\n** 2022-09-25\n- 9am - woke up feeling kinda sickly. quite depressed!\n- 10:15am - ate some raw meat ~80g and ghee\n- 1pm - almost 0.5 stick butter. plus vitamin d\n- 4:45pm - 220g? roast more vitamin d. up to 50k IU today\n  - have a slight headache! started before the butter. I think it was from the cheese?\n    Still somewhat sleepy today.\n- 6pm\n  - bohb = 3.6\n  - bg = 78, but I don't believe that. I was a lil sweaty\n  - But I'm very inflammed. I think it was the cheese last night setting off a\n    chain of fermentation.\n- more vitamin d - 20k more\n- THEORY:\n  - [[id:4f9113d9-fef2-4f02-a826-54757c43159a][vitamin d]]\n  - also, Amber said vitamin B supplements helped her a lot bc she had\n    absoarbtion problems when she was sick. this could be me.\n    - I felt GREAT the three days after the Vitamin B shot from ken\n  - I also think I'm slowly improving and it might just be slow. But I think\n    it took me a while to get into keto and I should just stay in it for a while\n    and not fuck up (like w/ the cheese).\n** 2022-09-26\n- 7am - woke up feeling pretty good. kinda tired. no ringing ears or headache, just groggy.\n  - bohb = 3.4\n  - bg = 100 = 5.6\n  - gki =\n  - interestingly high bg! maybe its bc cortisol but I don't think so. Some\n    issue going on maybe? Rich collins' is much lower.\n  - remember what amber said about depression caused by too much sleep and maybe\n    I'm currently in that position\n- 10:45am - solid workout, no legs, run home. v tired\n- 12pm - ghee, vitamin d 20k IU\n  - feel pretty good post workout. pretty energetic.\n- 2:30pm - oven roasted chuck, very rare. solid amount of fat.\n  - now 3:30 and I'm pretty sleepy. I felt really good and energetic before meeting though\n- 9pm - some ghee\n  - feel like shit! from roasted chuck! I might have seared it too hard. Need to go back to\n    boiled meat. Also maybe ate too much.\n- 1am\n  - solid headach w/ inflammation from that roasted meat. finally fell asleep\n    around 1:30\n\n- THEORY:\n  Maybe it'd help to not mix large amounts of fat w/ protein. Like have big fat\n  meals, sure, but pure fat. Then have protein meals w/ little fat. This would\n  speed up protein digestion.\n\n** 2022-09-27\n- 8am - woke up tired but no headache.\n  - bohb = 4.5\n  - bg = 88 = 4.9\n- 8:30am - some ghee, 1 tbsp butter\n  - weirdly, feel little inflame after this. now have one clogged nostril.\n- 2pm? - light boiled (mainly raw) roast, 191g, no butter\n- 5:30pm - some ghee, butter, and cocoa butter\n- 9:15 - light boiled (really raw) roast 180g, solid amount of butter > 1/2 stick?\n  - I'm afraid the butter was too much!\n  - also, some glycine and creatine.\n- 12am - feel okay. little burpy\n  - 3 squirts each of ginger-artichoke, plus two of the pills\n** 2022-09-28\n- 9am - woke up groggy af, ringing ears. didn't fall asleep till past 3am. Maybe\n  the ginger-artichoke is fucking me? I didn't quite have a headache, but had\n  ringing ears bordering on it.\n- 9:30am - butter + ghee.\n- 3:20 - 250g? rare roast in dutch oven. cooked too fast and was more of a boil.\n  parts overcooked\n  - NO FAT. hopefully this works w/ the theory. lot of protein it seemed tho.\n- 6:30 - feeling better now. Felt pretty gross for a while and took a nap\n  some water seemed to make me feel better\n- 7:20 - fat - butter, ghee, cocoa butter till full.\n- THEORY\n  NEED to THINK MORE before eating!! But I think I was fine. Thing is, I could\n  have just got lucky, ya know. I didn't think about it. Luckily didn't do\n  anything bad\n** 2022-09-29\n- 7:30am - woke up tired but okay\n  - bohb = 5.8\n  - bg = 90 = 5.0\n  - pretty sure I had coffee today.\n- 9am - surprisingly ringing ears!\n- 2:30pm - ny strip cooked on cast iron. not too hot. In butter, decent fat. Ate\n  some of AnnMarie's also\n- 7pm - some butter and ghee\n- 2:30am - finally went to bed. had ringing ears, clogged nostril, etc.\n- THEORY\n  - more fat mixed w/ the protein? connective tissue?\n    Maybe raw is better? some people swear they need this! They seem white af like me.\n** 2022-09-30\n- 7:30am - woke up mouth open feeling gross. Still kinda achy\n  - coffee again\n- 8am - some butter+ghee\n- 2pm - some bits of raw meat ~100g\n- 4pm - some fat\n- 6pm - crock pot roast ~200g\n- 9pm - more butter and fat. this was not good.\n- 1:45am - really bad headache! wtf is happening?\n** THEORY\n- Coffee? there's some people that have huge triglycerides w/ coffee. maybe I'm\n  having some reaction\n- protein poison? maybe having too big of meals\n** 2022-10-01\n- 9am - wake up w/ massive headache.\n- 10am - raw \"cream\" (in quotes cuz the brand sucks so bad).\n  - butter + ghee\n- 1:30pm - more butter+ghee+solid kefir\n  - starting to feel better\n  - burped up gross tasting roast taste\n- 3pm, half a ny strip, oven roasted. felt basically good after this\n  - had some kefir + butter\n- 7pm kefir+butter\n- 12am little burpy from butter\n** 2022-10-02\n- 9am - wake up, feel pretty good, just tired. not bad ringing ears. swig of kefir, some butter\n  - bohb = 7.0!!! wtf\n  - bg = 88 = 4.9\n- 12pm - half a NY strip, kefir, butter.\n  - berberine\n- 4pm ? not sure - ~70g raw chuck roast + butter, kefir\n- 9:30pm - butter+kefir\n- 11pm - some ghee, glycine, and HONEY\n- THEORY:\n  - could something in the kefir be increasing ketones?\n    Lactate or something?\n** 2022-10-03\n- 7:30am - wake. feel quite groggy. muscles still sore. throat mucussy\n  - bohb = 2.3\n  - bg = 99 = 5.5 mmol\n- 8am - hit gym - shorter arms, lots of squats.\n- 10am\n  - tummy quite grumbly & farting a lot\n  - I'm concerned about the blood glucose\n- 1pm - 1/3 of a thick ny-strip, butter\n  - coptis chinensis\n- 3pm - boiled some beef trimmings till they were crispy like pork rinds\n  - there was still some muscle meat mixed in so this got cooked very well\n    - this later fucked me up\n- 6pm - some kefir butter. starting to get a HEADACHE\n- 12:30am - still a headache\n** 2022-10-04\n- 8am\n  - woke up with still a headache! But it's on it's way out.\n  - I feel okay bc I know it's cause and I know I can prevent it in the future.\n    I really feel shitty when I don't know the cause.\n** 2022-10-07\n- 8:40am\n  - bg = 96 ~5.3\n  - bohb 4.2\n  - felt okay last couple days. just doin ketoaf w/ low protein. AnnMarie is sick\n    and I think I was a little sick.\n    Still doing coptis chinensis\n  - had some cheese last night and a tiny part of a burger from AnnMarie's OT\n    cookout and I'm farting and feel inflame!\n** 2022-10-09\n- 8:40am\n  - bg = 90\n  - bohb 3.2\n- felt depressed this morning and pretty sluggish all day. First day in a while\n  that I've had no coffee or nicotine. Hoping tomorrow I feel better.\n- low protein, higher fat today. Overall not super hungry.\n  - one metformin earlier on\n** THEORY\n- nicotine and/or coffee fucking me up. The coffee effect is sneaky bc it\n  appears to be cumulative. Like I feel fine the first day or so, but the fuckup\n  is REAL. COFFEE is EVIL.\n** 2022-10-10\n- 7:20am - felt okay, kinda ick from last night having slightly rotten shaved\n  steak late last night\n- oven baked t bone late at night\n** 2022-10-11\n- 7:20am - feel pretty good. Little tired but okay.\n  - bohb 4.8\n  - bg = 95\n- 8:40am - workout. squats. Slight bench & and bent over rows. should have done\n  pullups I realize.\n- 12:10pm - most of the ny strip side of a t-bone.\n- 1:50pm - feel pretty dang tired!\n- 4:30pm - No pee ketones, so tested blood\n  - bohb - 2.9\n  - bg = 103 (or more?)\n** 2022-10-13\n- 7:30am\n   - feel gross and bloated. This is bc I had smith bro's ultra-pasteurized\n     cream last night bc I thought it would be fine. Totally not! It seems like\n     I truly am fine w/ kefir though which is surprising\n** 2022-10-15\n- feeling kind of gross tonight. ate some steak w/ butter today. very much\n  ketoAF.\n- also had a solid teaspoon of chinensis (way too much), and then started\n  feeling shitty and inflame, and stomach grumbly, so had a metformin too and\n  now its 12:30am and I'm pooping and still have crazy grumbly stomach.\n  BUT maybe I'll feel better tomorrow?\n- THEORY:\n  - one thing I haven't tried is ketoAF with NO DAIRY. Like paleomedecina\n    recommends. I feel I haven't been getting better for a while and maybe this\n    is the missing link?\n  - also, some guy on twitter said he gets quite fucked up near 100g of protein\n    per day, so maybe I'm not high fat enough?\n  - Might try fenugreek\n** 2022-10-16\n- morning: suet+butter\n- 12:40pm - used bighorn to make some beef. was maybe 0.5lb piece. TOO MUCH. Was\n  so tired after, took nap even.\n- 5:20 - gym. was difficult, but glad I went. Sauna'd pretty hard. trying to\n  lower respiratory rate as low as possible. Only got down to 4 bpm, but last\n  time I was at like 2.5\n- THEORY:\n  - tried eating some beef suet (frozen ground suet from butcher in belleview),\n    but I think it made me feel gross, but much later in day.\n  - want to look into [[id:75767c4c-6d11-4e9f-b3c5-ebdc81fce3ce][collagen]] seems dope\n  - want to look into rapamycin\n  - gonna start fenugreek\n** 2022-10-17\n- feel like shite this morning. diarrhea from last nights buttery chicken.\n- bpc-157 shipped via UPS! - 9400111108070877427807\n- 9am - ghee & 10g hydrolysed collagen\n- 12:50pm - ~1/4lb /blackened/ sirloin steak w/ ghee.\n- 6pm - ~1/3lb /blackened/ sirloin steak w/ butter & tallow.\n- had 1600mg [[id:e42315f6-b35e-428a-86ad-d71970ed1825][fenugreek]] and hydrolysed collagen\n- 9pm - more /blackened/ sirloin! I was hungry!\n** 2022-10-18\n- 7:10am\n  - wake, feeling kind of sleepy. little burpy, meat taste in mouth, farting a\n    little bit. Maybe too much fat still? poop is floating so probably.\n  - COFFEE!! for interview\n- 8:30am - inflamed and burpy, steatorrhea\n- 9am - some tallow & hydrolysed collagen\n- 3pm - blackened steak. not much\n- 6:30pm - blackened steak. plenty kefir. Not as much butter as usual.\n- 11:30pm - farting and lots of stomach noise\n  - more steatorrhea\n    - hopefully this was just bc of coffee.. I think it was the tallow I ate\n      earlier. It was not the typical light, butter color\n- 1:30am - cup more of kefir. Still kind of a headache\n  - got the headache after my interview today. I think bc I had kratom right\n    before and that just fucked my electrolytes.\n** THEORY\nI reread every entry in this food log. It's striking how stupid I was in\n2022-04. But basically I really really need to get over all this bullshit.\n\nissues\n- I get hungry and then binge. I can't work against hunger ever.\n- seemed like cocoa butter helped with hunger. Maybe I could eat that in the morning?\n\nnew regime:\n\n- no coffee or nicotine.\n- continue fenugreek\n- fat in morning. delay eating protein till later. prefer raw. But don't wait\n  too long. keep meal small. Dont deprive\n- [[id:68f98853-0d3a-4f60-aed6-7fe6c29e4084][kefir]]? embrace or avoid? I'm not sure. That one day I really embraced it on\n  10-01, I felt great and woke w/ ketones of 7.0. Need to experiment.\n** 2022-10-19\n- 8am\n  - bg = 100 = 5.6\n  - bohb = 3.1\n  - gki = 1.8\n- 9am - some fat. butter + tallow\n- 11am - gym! shoulders and high-rep squats.\n  - I felt really good like an hour after the gym!\n- 12:15pm - blackened steak, some butter, not a ton\n- 5:30pm - more blackedned steak. A solid amount.\n- 10pm - had lots of hydrolysed collagen with tallow. This was NOT good. Was burpy after and tummy grumbly.\n  Also had LOTs of kefir, just like last night, and I think that served me well.\n\n** 2022-10-20\n- 8am - feel slight pressure and slight ringing ears, but airways clear.\n  - bg = 91 ~ 5.0\n  - bohb = 4.8\n- 2:30pm - blackened steak\n- 5pm - more blackened steak\n- 8:30pm\n  - tallow w/ some butter. New tallow tastes really good!\n  - kefir!\n  - [[id:0b1263e6-7b9a-450e-8775-06f5df043e6b][bpc 157]]\n\n** 2022-10-21\n- 8am - kind of farting, but feel pretty good!\n  - bg = 92 = 5.1\n  - bohb = 6.1\n- 12:30 - blackened steak w/ TOO MUCH BUTTER & FAT!\n- 6pm - another, smaller blackened steak.\n- 10pm\n  - more beef fat & hydrolysed collagen. This was a MISTAKE\n    took a while to digest\n  - NO kefir\n- THEORY:\n  feel pretty good past couple days! here's my current interventions to explain\n  - fenugreek\n  - /blackened/ steaks? they taste really good\n  - /lots/ of kefir (esp. at night)\n  - higher fat. Not really much lower protein. Not too much fat though.\n  - front load day with fat.\n\n** 2022-10-22\n- 8am - farting from collagen.\n  - bohb: 5.7\n  - bg = 97\n  - steatorrhea!!! see, too much fat\n** 2022-10-23\n- 11am - COFFEE\n- 1pm -  work out\n- 3:30pm - blackened steak\n- 10pm - a bunch of kefir.\n  - BUT this was only 4 days old in a cold apartment!\n    so it FUCKED me up. I think I can only have kefir that's so sour, it's hard\n    to not make a face when sipping it.\n- 2am - so fucked from the kefir :(...\n- 3:30am - finally fell asleep\n** 2022-10-24\n- 8am woke feeling pretty shite\n- 3:30pm - ate a blackened steak w/ lots of tallow & butter\n- 9:30pm - ate a substantial amount\n** 2022-10-25\n- 8:30am - feel pretty shitty and farty, though not depressed at least\n- 9:15am - ate some tallow & butter\n** 2022-10-28\n- 8am\n  - bg = 90 = 5\n  - bohb = 2.2\n  - I feel okay. _Lots_ of [[id:68f98853-0d3a-4f60-aed6-7fe6c29e4084][kefir]] last night. Wanted to test 5 full days of\n    grains in organic, pasteurized milk. I felt great on it last night!\n    But w/ ketones so low, I wonder if it was too much or not fermented enough\n    still.\n    - will have raw A2 milk on tuesday which will be great.\n    - worked out, actually feel pretty inflame and gross. Don't know if kefir.\n- 5:30pm - first meal, blackened steak. NOT a lot of protein, but still knocked me out!\n- 9pm - more steak, but less. Lots of kefir before and after\n** 2022-10-29\n- 8:45am\n  - feel like shit. Felt like shite last night. I think the Smith bro's milk\n    kefir is totally fucking me even fermented for 6 days. I was wrong about it\n    being hypoallergenic after a few days.\n** 2022-10-20\n- 10am - some fat\n- 11am - ate blackened steak defrosted from freezer and in fridge for few days\n  and felt gross and burpy from it. Did not eat very much!\n- later\n  - _lots_ of kefir. Seemed to not be fuckin w/ me, but I think it was bc I felt quite depressed.\n  - steak at 5:30pm\n  - solid steak at like 9:20pm. Like big protein load. Very little fat with it\n** 2022-10-31\n- 8am - woke up feeling gross. Burps show there's still shit in my stomach :(.\n  Also have slight headache. Wanna fat fast all day.\n  - bg = 92 = 5.1\n  - bohb - 2.4\n- 8:50am - workout pretty good. only arms, but ran to gym\n- 4:30pm - blackened steak, ~180g?\n  - had a headache and decided to eat!\n- 6:40pm - ny strip, 160g\n  - this finally got rid of headache\n\n** 2022-11-01\n- 8am - woke up feeling fine? -- then like 30 min later was not feeling good.\n  - bg = 96 = 5.3\n  - bohb = 2.2\n  - weird bc I fat fasted\n** THEORY\ngonna try to front-load protein in the day. Then finish off w/ fat only.\n** 2022-11-03\n- 7:40am - woke up feeling fine. tired\n  - bg = 100 = 5.6\n  - bohb = 1.5\n  - okay so little farty, little ringing ears and itchy head.\n  - so I think it's from all the raw milk and kefir just before bed last night.\n    Been doin the no meat after 3pm thing, but I think too much sugar in the\n    milk is probably causing some issues? Maybe should stick with pure fat\n    today?\n** 2022-11-05\n- just overview of last few days. lots of raw milk / raw kefir. I think that got\n  me out of ketosis so I haven't been feeling good.\n  - was trying eating meals in the morning, but that wasn't really helping bc I\n    was being an idiot and getting hungry in the evening and fat wasn't satisfying.\n** THEORY\naccording to [[id:cd2c0a01-c5ce-4474-831f-041edee42bb3][peter attia]] guest, if you eat >60g protein, then that's not taken\nup by muscle and must be processed by liver.\n\nSO I'm gonna go back to measuring meat. No more than 200g per meal now. Been\ntrying not to eat very much fat during my morning meals, favoring protein, and\nthinking I could just be hungry for the fat later. This is not the case. I should\njust go all in.\n\nAlso, some of my evening hunger could be from lack of access to fat stores? Maybe\nsome cardio / zone 2 work would help with this? Metformin might help?\n\nAlso, been doing nicotine for the fun of it. Should probably stop. I think it\nmight interfere w/ my digestion. Plus, I don't even really feel it anymore so\nwhats the point.\n\n- <=200g meat per serving\n  - UPDATE: (from 2022-11-06) no! So that's I guess 40g?\n    wanna go down to 30g or less. so 150g or less\n- prefer mornings\n- plenty of fat always\n  - NO not w/ meals. Try to separate maybe? Or just not too much?? idk\n    but I get fucked by too much fat sometimes for sure.\n- no nicotine\n- zone 2 cardio?\n- much less kefir. esp. fresh. I want to actually be in deep ketosis\n  - (update 2022-11-09) NO MORE kefir!\n** 2022-11-06\n- 9:50am - woke feeling kinda gross\n  - bg = 100 = 5.6\n  - bohb = 1.0\n  - Seems like the raw milk and kefir is totally fucking me despite the\n    protein ending at 3pm. Also, I haven't worked out the last two days so that's\n    probably part of it.\n- 11pm - feel gross from the meals I had today. I think I need even less meat!\n  - I burped some grossness and felt SO TIRED today. tbh I think I have like\n    super good protein retention. I'm just gonna try going super low protein for\n    a while. 30g per meal and thats IT!!\n** 2022-11-07\n- small meals, about 100g meat each, w/ substantial kefir. I think I'll cut back on kefir now\n** 2022-11-08\n- 7:30am - grumbly tummy! Ringing ears. But feel okay?\n  - bg = 105 = 5.8\n  - bohb = 1.5\n- 8:30 - butter, _old_ kefir, creatine, and glycine\n- 10am - ~100g steak w/ some butter\n** 2022-11-10\n- yesterday evening - had a super sour batch of raw milk kefir, and wanted to do\n  an experiment so had a LOT of that. Like 2 pints maybe? And yeah I did NOT\n  feel good. Had inflamed forehead and itchy scalp again. That subsided after a\n  few hours, but this morning I felt like shite too! So, no more for a while.\n  Maybe a 1x per week thing for probiotics.\n** 2022-11-14\n- got back from Virginia. Had texas roadhouse and I think there was gluten so I\n  was fucked up and I fasted and only ate one meal at night the subsequent two\n  days.\n- woke up feeling okay, but swollen\n  - bg = 94 = 5.3\n  - bohb: 3.4\n- 9:15 charred steak! ~170g\n- 1:30 more charred steak! 160g\n** 2022-11-15\nFasted most of the day. Had coffee, some fat, nicotine. Had charrred pork belly\nat like 5pm. Was extremely tired from like 8:30pm\n** 2022-11-16\n- woke up feeling like shite.\n  - Idk if it's still the gluten from 6 days ago making me sensitive or what.\n- fasted w/ nicotine and coffee\n** THEORY\nonly beef salt and water for a bit. Staying w/ small meals.\n** 2022-11-17\n- woke up kind of tired and weak but not hungry\n- 9:45 - breakfast! 148g charred tri tip steak + beef fat\n- 11:50 - still hungry! so had 135g charred tri tip + LESS beef fat\n- 12pm - POOP\n  - very much floating liquid. So the pork I had on 11-15 totally was just\n    sitting there! And I had way too much fat it seems.\n    Probably why I felt like shit.\n- 2:30 ame meal\n- 5:30 150g. this time, WITH GHEE. idk if was a good idea.\n  - this is the only time today my head or forehead felt itchy! so maybe ghee is fucking me!!\n- 7:30 - 150g\n- 11:30 - 200g !! idk I was hungry!\n** 2022-11-18\n- 8am - woke feeling fairly good? just slight ringing ears\n  - bg = 94\n  - bohb = 5.5\n- 9am - eat 170g steak, w/ some beef fat\n- 10am - feel kinda head ringy and not so great. maybe it's from coffee withdraw\n  or ghee of yesterday? Neck aches! idk why.\n- 11:30 - weirdly have strong ringing ears and feel kinda inflammed. Still neck\n  aches. Headache escalating. I think maybe from the excessive protein I ate\n  last night.\n- 1am - I don't think well-cooked meat is working for me atm. The ground\n  beef I had earlier is not sitting well.\n- 2:50 - now I'm back to a headache!! wtf! Maybe the kratom?\n  - was thinking, maybe for some reason the nicotine is fucking with my insulin\n    and giving me shitty meat tolerance?\n** Theory\nRead a paper, [[id:af90c362-ba7e-42d8-8a62-017d2749d784][A Review of Issues of Dietary Protein Intake in Humans by Shane Bilsborough and Neil Mann]]\n\nmy takeaway:\n- /fastest/ digested protein is 10g/hr. Many are much slower. Raw egg whites are\n  like 2g/hr. If I have 50g, that takes >5 hours, but I think for me it passes\n  into my digestive system and ferments and gets all fucked up. That's why I get\n  those headaches after highly cooked protein meals.\n- RDA median estimated daily requirement in g/kg is 0.63. For 97.5th percentile, 0.8.\n  My needs are likely met /below/ 0.8. So if my ideal weight is 165 (hoping to\n  gain some muscle), then 0.63 and 0.8 are 47.25 and 60!\n  Which is much lower than I've been doing.\n- PLUS! if you're in ketosis, you're requirement is likely less.\n\nToo much protein is VERY NOT GOOD! (sometimes for some people)\n\nI think I must especially have a protein sensitivity.\n** 2022-11-19\n- 8:30am - not feeling great but whatever\n- 11am - zone 2, 45 min run\n- 1:15pm - eat 130g 80/20 ground beef w/ beef fat. Lots of fat.\n- 5:30pm - ate 106g lean flank steak s/ some fat chunks and tallow.\n- 8pm - some cracklinks from making tallow. It might be bad.  I'm okay so far\n  though (9pm). Likely the shittiness is from the collagen in there, which I\n  mostly spit out unless it was really soft.\n** 2022-11-20\n- 8:30am - 130g 80/15 burg w/ some fat\n- 1:30 - 110g burg with some fat\n- 5pm - 110g lean flank w/ fat\n- 9pm - fat bits. Two bites of AnnMarie's burg\n\n- been grilling the fat trimmings from double DD's and it tasts fucking amazing.\n  God bless that I have this.\n** 2022-11-21\n- 8:30am - wake up feeling good!\n  - bg = 86\n  - bohb = High!! -- it's been 7.0 before so it's above that. wtf!\n  - Lowest waking bg recorded yet!! Last time I had something close was 88 and\n    7.0 on 2022-10-02 when I woke up feeling shitty from too much protein the\n    day before and had almost no protein.\n    - I think I must be adapting to the low protein high ketones?\n  - little bit COFFEE\n- 11am - 125g 85/15 burg w/ fat and some tallow.\n  - 12pm - ringing ears from that meal and sinuses somewhat inflamed! But idk now\n    it's maybe starting to subside? Maybe from the coffee?\n    It eventually subsided 30ish min. later\n- 2:15 - beef fat\n- 3:20 - 78g flank steak + beef fat + lil hydrolyzed collagen.\n- 6:45 - 100g flank steak + lil beef fat & tallow\n  - total of 23.25 + 20 + 23 = ~67g protein today.\n** 2022-11-22\n- 7:30am - bg at 86 still. Feeling good, but not awesome. Little farts. I think\n  the collagen was not good and that last protein meal could have been skipped\n  tbh.\n** 2022-12-10\n- 8:55am\n  - bg = 85 = 4.7\n  - bohb = 5.5\n- 1:20pm - 112g chuck steak w/ fat. Felt gross and inflammed after this! Why?\n\n  Do I need to fast? Am I just less tolerant of stuff bc I'm no longer working out?\n\n** 2022-12-16\n- 7:20 - did two [[id:9dba0048-02d0-4bde-9866-50ca4a6bf2ff][metformin]]'s last night to see!\n  - bg = 97\n  - bohb = 4\n\n** 2023-01-28\n\nIts pretty obvious that I'm not doing as well as I can be. I'm not /thriving/.\nWhy? I think it must be a microbiome thing.\n\nWhy do some people seem to have this \"x-factor\" tolerance for certain foods that\nI don't seem to have?\n\nWhy can others eat carbs, but it seems like I ferment really hard whenever I\ntry?\n\nWhy in so many cases is it either a negative feedback loop or a positive one?\n\nMy feeling with the feedback loop is that people get compromized intestinal\nbarrier, then they start fermenting and taking damage, then their body spends\nmore time repairing than improving the barrier, and the barrier deteriorates\nmore.\nThen when you try to fast, the body doesn't expend as much energy anymore so it\ndoesn't fix anything.\n\n** 2023-01-07\nFor some history, it's saturday. Tuesday and Wednesday I had a substantial amount of sweet potatoe\nand I've been significantly fucked up. I fasted at work yesterday, then came home and ate steak at\nlike 5:30, then, stupid me, had eggs at like 9 not bc I was that hungry, but bc I felt like I hadn't\neaten enough, and I greatly regretted eating the eggs (with some cheese). Threw\nup like 4 hours later. Finally fell asleep at like 2 something ish.\n\nBut doing a stronger berberine and I feel like it's helping me in general before this mishap week.\n- 10am\n  - bg = 91\n  - bohb = 2.2\n\n** 2023-01-12\nSo reading some of [[id:406a4a8d-4aa4-4538-9294-0a6097df0cc5][Peter Dobromylskyj]]'s work, particularly [[https://high-fat-nutrition.blogspot.com/2009/02/multiple-sclerosis-and-hydrogen.html][this one]]. And now have a theory that I GET HYDROGEN OVERLOAD!\n\n- I get mucussy throat and nose right after eating something that fucks me.\n- I get the H. Pylori Gastritis when it's really bad and my stomach won't digest anything.\n\nSo what this mean? Low hydrogen food?? OR I have hydrogen-producers in my small intestine?\n\n** 2023-02-03\n\nNow friday. Was doing terrible on the weekend. Did journaling. Decided to\nemphasize a process over a cure. I won't get lucky with a solution. I need a\nsteady process.\n\nMonday\n- Felt like shit at work monday morning even after the coffee.\n  Forgot what I ate that night. Not much. But felt like shit and had\n  difficulty sleeping.\n  DRY FAST. only drank espresso all day and like a cup of water at night.\nTuesday\n- Felt much better in the morning and after coffee. Even less hungry.\n  That evening I think was an abortion breaking the fast. Not quite as\n  bad as the previous day.\n  DRY FAST continued. Seemed to be nice.\nWednesday+Thursday\n- I think I felt okay. Sleep was still not very good. Shifted to only\n  raw ground beef and tallow.\nFriday\n- In office coffee. Got home, broke fast at 7:15pm ish. Was hungry, ate again\n  at 9. And again some sardines at like 11. Now can't sleep. Stomach is\n  extremely grumbly.\n\nBreaking fasts is a big issue for me. Maybe I should try breaking with one small\nmeal and NOT EAT for at least like 4 hours?\n\nMaybe it's just the previous filth working its way out.\n\n** 2023-02-04\n\nStill feel like shit surprisingly. WTF!\n\ntheory from https://doi.org/10.1016/S0016-5085%2819%2933763-1\n\n\n\nThere's an \"inhibitory effect of even a short period of starvation on cell\nproliferation in the epithelial crypts\". Maybe this inhibition is due to a\nworn-out epithelium trying to renew its cells and so letting them die off\nfaster.\n\nMaybe when you're extra worn out, you cells die faster. Then breaking a fast\nsucks more ass.\n\nPossibly relevant, thought it's skeletal muscle\nhttps://doi.org/10.1155/2014/315896\n\"ROS is required for skeletal muscle constitutive autophagy\"\nBut fasting is an even stronger signal, as NAC could not prevent autophagy in\nfasting.\n\nTheoretically, ROS and fasting compound. So once the ROS dies down, the cells\nwill proliferate and you'll have an awesome strong intestine.\n\n** 2023-02-07\n\n[[id:1769e7fd-ea9f-462f-bcda-f890a1b8bc93][why breaking a fast sucks]]\n\n** 2023-02-11\n- bohb = 4.0\n- bg = 94\n\nAnd gassy! This sucks! Swollen. Kinda felt like shit yesterday. Maybe the kratom?\n\n** 2023-02-13\nNew suet. Ate really high fat yesterday. Woke up with a headache though.\n\n- bohb = 5.5\n- bg = 87\n\nNow monday so will fast and curious to see how my numbers are tomorrow.\n** 2023-02-25\nBasically felt like shit this week. I think it's because of the new tea I had.\nBut I quit coffee. yesterday I had bone broth which I think was too fatty, but\nfelt amazing bc of the nutrients. That's all I ate bc the day before I had the\ninstant tea and felt horrible when I ate later in the day. My theory is it is\nintestinal permeability like paleomedecina says.\n\n- bohb = 5.7\n- bg = 86\n\n** THEORY\nI'm giving more of a try Paleomedecina and their theory of intestinal\npermeability. It also seems to be one of the only ways to explain why I feel\nlike shit after eating after having coffee or tea. That stuff makes the\nintestine permeable, then I die!\n\nIn addition to that part of their theory they also say to eat bone marrow / brain up to\nlike a pound or half pound per week?! Which sounds like a lot. So tried it and\nfelt great yesterday. Maybe this will help though.\n** 2023-03-02\n- bohb = 6.8\n- bg = 88\n\nI did have quite a bit of fat and was a little burpy last night. Ringing ears and slight\nheadache. I wonder if I'm fermenty.\n\nThe night before was gross. I had this lardo I ordered, and was feeling very\nburpy from it, then the next morning I was still burpy so had myself threw up\nand there was still a bunch of food there.\n** 2023-03-03\n- bohb = 4.9\n- bg = 79\n\nWow! so yesterday was\n- 8am: ground beef 130g. Plenty fat.\n- 12pm: ground beef, same.\n- 6pm: cracklings from rendering beef fat. I got kinda sick of this. Little burpy, not much. This\n  was true till bed.\n** 2023-03-22\n- bohb = 6.4\n- bg = 86\n\nSo I had a lot of protein last night before bed and thought that was fucking me\nup because I woke up at 5am with a cramp and had a bit of ringing ears so didn't\nwanna go back to sleep. Wonder if my ketones are a lie. Don't wanna waste\nanother strip on it.\n\nAmazingly butter has not been good for me!\n\n** 2023-04-18\nThis was around noon:\n- bohb = 2.9\n- bg = 100\n\nFelt generally like shit yesterday too. Idk how strictly to lower my blood\nglucose.\n\n** 2023-04-19\n- bohb = 5.2\n- bg = 85\n\nMaybe all the metformin yesterday. Also feel extremely tired still!\n" 536870913] [154 :nodes/id "c8424162-ba5d-4134-a990-5b7fe189d106" 536870913] [154 :nodes/properties {"CATEGORY" "20220322225300-food_log", "ROAM_ALIASES" "foolog", "ID" "c8424162-ba5d-4134-a990-5b7fe189d106", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220322225300-food_log.org", "PRIORITY" "B"} 536870913] [154 :nodes/title "food log" 536870913] [154 :nodes/value 2.0 536870913] [155 :nodes/content ":PROPERTIES:\n:ID:       1769e7fd-ea9f-462f-bcda-f890a1b8bc93\n:END:\n#+title: Why Breaking a Fast Sucks\n\nOkay so it started with this [[https://doi.org/10.1016/S0016-5085(19)33763-1][paper]] from a quick google. It has:\n\n#+begin_quote\nintestine of the fed rats was heavier and the deoxyribonucleic acid content\ngreater than in the fasted group and these increases appeared to be due to the\ngreater cell mass of the mucosal fraction.\n...\ncell content between the two groups is believed to be related to the stimulatory\neffect of food compared with the relative inhibitory effect of even a short\nperiod of starvation on cell proliferation in the epithelial crypts of the small\nintestine\n#+end_quote\n\nBut this post is mainly related to [[https://doi.org/10.1080%2F15548627.2021.1909406][How autophagy controls the intestinal epithelial barrier]].\n\nBasically autophagy helps endoplasmic reticulum (ER) stress and ROS, helping the\nintestingal stem cells (ISCs) not prematurely differentiate or die. Basically\nsimilar stuff with goblet cells & immune cells producing anti-microbial pepties.\n\nTheory\n- IEC cells proliferate due to constant mTOR stimulation in fed state\n- ROS builds in damaged IEC cells\n- Fasting leads to large cell loss due to compounded autophagy signal of\n  fasting + ROS\n- Leaves you with a temporarily thin (& vulnerable!) intestinal epithelium. This\n  is why breaking a fast sucks.\n- As autophagy does its magic, cells slowly have less ROS, they live longer, and\n  you have a badass epithelium.\n- Breaking a fast should be easier if you have glycine and N-Acetyl Cysteine to\n  ease the ROS and trigger regrowth. Also starting with a small meal.\n  But wouldn't this imply that you're interfering autophagy?\n\n\nMixed signals on my thesis\n\nBut two references over to [[https://doi.org/10.1146/annurev.nutr.20.1.195][Intestinal Transport During Fasting and Malnutrition]]\nsays \"significant decreases in mucosal mass are evident after fasts of 24 h or\nmore\".  Microvilli changes are inconclusive so the \"total intestinal surface\narea almost always decreases with fasting\" because of villi.\n\n#+begin_quote\nVillus heights decreased with fasting (15, 45, 56, 62, 82, 87, 97) because of\nsignificant reductions in the number of cells along the crypt-villus axis (76).\nThe decrease in cell number likely resulted from decreases in cell proliferation\nand migration rates (37, 45, 97), as well as from increases in rates of cell\nloss (4) and apoptosis (7).\n#+end_quote\n\nIf this is so well known, why tf did the main study not talk about how a shitton\nof cells die during fasting? Proselytizing autophagy?\n\nKeep in mind, this is /fasting/. Which they define as 24-72 hours. Not\nmalnutrition.\n\nThey later say it's probably adaptive bc the small intestine is one of the\ngreatest energy hogs in the whole body. 25% of totaly oxygen!\n\nHot take:\n\n#+begin_quote\nFM (fasting or malnutrition) has been associated with oxidative stress to the\nintestinal mucosa, including changes in levels of antioxidant enzymes (2,\n24, 48) and in production of free radicals (24).\n#+end_quote\n\n^checked on that and it's total bullshit citations\n\n#+begin_quote\nintestinal absorption of essential and nonessential amino acids transported\nmainly or in part through a Na+-dependent pathway increased with FM in rats and\nchickens\n#+end_quote\n\nMaybe when fasting, glycine / bone broth is actually absoarbed better so you\ndon't need fats with it\n\n\nHoles / questions:\n\n- why is autophagy not beneficial in fed state? i.e. why doesn't the body do it\n- does ROS actually increase autophagy & cell turnover in IECs?\n  - when fasting?\n  - first paper kinda says less proliferation in epithelial crypts?\n    but idk it's old and I'd like more confirmation\n- is there actually a difference in proliferation in IEC proliferation between\n  fed / fasted state?\n" 536870913] [155 :nodes/id "1769e7fd-ea9f-462f-bcda-f890a1b8bc93" 536870913] [155 :nodes/properties {"CATEGORY" "20230207211055-why_breaking_a_fast_sucks", "ID" "1769e7fd-ea9f-462f-bcda-f890a1b8bc93", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20230207211055-why_breaking_a_fast_sucks.org", "PRIORITY" "B"} 536870913] [155 :nodes/title "Why Breaking a Fast Sucks" 536870913] [155 :nodes/value 2.642857052385807 536870913] [156 :nodes/content ":PROPERTIES:\n:ID:       82ed419e-60ed-4740-b670-87b433aa49c8\n:END:\n#+title: sabbatical 2022\n#+alias: todo\n\nThis is a home page of stuff for my sabbatical.\n\n- [X] read [[id:406a4a8d-4aa4-4538-9294-0a6097df0cc5][hyperlipid]] metformin stuff\n  (maybe he has a realistic mechanism for metformin)\n- [ ] read list from [[id:876a8e7d-8daf-4e9a-9f05-30eb0ea81061][books]]\n- [ ] read [[id:c48f4cd0-e81e-4577-8376-9cff30d43ff7][pattern recognition and machine learning bishop]]\n- [ ] projects\n  - [ ] make these notes modifiable via mobile (via web browser?)\n  - [ ] make better interface over bus stop times?\n  - [ ] p2p radio social media? but I don't really care\n- [ ] look into replit\n- [ ] read 101 essays book and answer questions\n  - [ ] implement habbits -- meditation, working out, food habits?\n\n[[id:2edcdb52-f77b-477c-8af5-c8c2eb8c5353][jobsearch]]\n\n[[id:e6eeb8fa-b223-45d2-96cf-11bbfc64a4f0][yc startup job guide]]\n\nwhat do?\n\n- I think it'd be cool to be a scientist and investigator. Like someone trying\n  to figure out a mystery given strange and hard to connect clues. That would be\n  fun. All the more if its for a meaningful cause. I don't think I could do it in\n  an extremely political climate though. Like nutrition or some medical stuff.\n\n** 08-29\nI'm being pulled in so many different directions and I'm not sure how to spend\nmy time. Should I be looking into AI, reading about database modling, learning\nabout how to improve my nutrition/health, doing coding challenges to prep for\ninterviews, or what?\n\nThis overwhelm is starting to make me think that /nothing/ is good enough. And\nwhenever I am doing something, it's half-assed because my mind is partially\nwondering if I should instead be doing a million other things.\n\nThere's certainly some habit changes that need to happen. Maybe reading more of\nMeaningness would help? Or that one book that's like a productivity book but\nnot, saying you just need to decide for yourself and make and actual choice\nright now and commit to a path, thereby closing other possible life paths.  It\nis attractive to keep them all in your head because you feel like the\npossibilities are limitless. But then you're just not really defined. You end up\ndoing nothing meaningful.\n\nI think this is something I should form an opinion on?\n\nSide note: I'm glad I'm asking these questions in the first place. I know so\nmany people don't. I sense the \"offness\" of what is happening. This is some form\nof intellectual honesty, or being able to listen to thoughts and feelings over\nthe excitement and promises of the world. I think this is because of meditation.\nI've been having a hard time justifying meditation, but I think this is\nultimately it. You can never stray too far off track if you listen honestly to\nyourself.\n\n** 08-21\nI fear that I'm not as good as other people. I can't do what other people can.\n\nMaybe a startup could be a place where I could figure that out? Referring to [[id:03f07731-cc68-432c-9d16-9c2944f6a21c][yc]]\nvid about hiring, I'm not the awesome person they say you should try to hire.\n\nThat's not to say that I can't get there eventually. Maybe it's that I'm hoping\na startup helps develop me into greater potential. That's a perfectly legit\nmotivation in my opinion. This might be what Collison meant when he said you\ncould use personal development as an attraction point. He referenced the\nleverage aspect too. At Google you can't make much of a difference for the\ncompany as a whole. At a startup you can really see how much you're propelling\nthe boat. But maybe also the personal development thing.\n\nThe pinterest guy says you NEED people that die hard always cared about discovery.\nI think thats fucking dumb and unrealisty. In reality, the idea should be deeply\nexciting and hook into some core value that you have. Like joining replit would\nbe cool to destroy the laptop class which I resent.\n\n\nI think it's okay that I don't have an awsome\n\nSo why do I want to join a startup, ranked with importance.\n- Be engaged. I'd rather work more hours and be excited and care about something.\n  All the best times in my work are those times and it's the best.\n- Get great experience so I can grow into the most badass version of myself. i.e.\n  the one that would one day start a company one day.\n- To get rich\n\nBut I fear I need to get more meta than this. Why do I want all THIS in the first\nplace?! Are there ANY life goals that are above this?\n\nAm I 100% sure it's not for presteige? Genuinely, what would I do if I had a\nmillion dollars?\n\n** 08-16\nToday I finished my profile on Y combinator and applied to Replit.\n\nI could see myself getting back into engineering? I read some twitter blogs and\nit seems interesting. I like how they talk about career progression and take\nself-improvement so deadly seriously. For me it was like for what though?\nFor nerding out on Engineering itself?\n\nThe end feels important and idk the joy of coding for the sake of itself\nhas always been a struggle for me. Maybe it's because it really does need a\nmeaningful end other than just increasing understanding. There are some cases\nwhere you do need to test stuff and get something, but it needs a meaningful end\nthat I believe in.\n\nEkata felt like we were into engineering for the sake of itself. The wrok didn't\nfeel meaningful enough. Also, I wasn't even learning that much!\nIt was mainly extending and improving an old system.\n\nBUT I think engineering is still fun.\n\nLike getting back into a frontend+backend clojure project like radio station\nsounds pretty fun.\n\nAlso, creating something where I can export my org roam db as a full blown\nwebsite sounds pretty cool too.\n\nI think my own \"ambition\" is getting in the way. Like some of this reflection\nperiod has been accepting that I'm not going to start an awesome startup right\naway and be a millionare and be able to have all the freedom in the world. There\nare more steps along the way and they will give structure to my life.\n" 536870913] [156 :nodes/id "82ed419e-60ed-4740-b670-87b433aa49c8" 536870913] [156 :nodes/properties {"CATEGORY" "20220717092816-sabatical_2022", "ID" "82ed419e-60ed-4740-b670-87b433aa49c8", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220717092816-sabatical_2022.org", "PRIORITY" "B"} 536870913] [156 :nodes/title "sabbatical 2022" 536870913] [156 :nodes/value 2.5416666865348816 536870913] [157 :nodes/content ":PROPERTIES:\n:ID:       9dba0048-02d0-4bde-9866-50ca4a6bf2ff\n:END:\n#+title: metformin\n\nsome metformin research\n\n** Hypothesis: Metformin is a potential reproductive toxicant\nhttps://doi.org/10.3389/fendo.2022.1000872\nfrom amber on twitter!\n\n** Metformin and Its Benefits for Various Diseases\n- a review: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7212476/\n  - overall function. also activates AMPK through other pathways\n    #+begin_quote\n    Metformin inhibits mitochondrial complex I (13, 14), which leads to AMPK (adenosine 5′- monophosphate—activated protein kinase) activation (15). Mitochondrial complex I is vital to electron transport. As a result, the production of ATP (adenosine triphosphate) decreases and the intracellular concentration of ADP (adenosine diphosphate) increases. Consequently, the cellular levels of AMP (adenosine monophpsphate) increases, finally activating AMPK\n    #+end_quote\n  - maybe this is why it's bad to do while working out bc it disturbs protein\n    synthesis? inhibition on mTOR\n    #+begin_quote\n    Metformin's anti-cancer properties depend on its direct and indirect regulation of cells' metabolism. The direct effects are mediated by AMPK-dependent and -independent pathways. (i) Metformin activates AMPK, which leads to the inhibition of mTOR signaling, and as a result, protein synthesis is disturbed, and cell growth and proliferation is suppressed\n    #+end_quote\n\n  - metformin + fasting\n    #+begin_quote\n    It has been found that combination of metformin and intermittent fasting showed the strongest reduction in tumor growth without causing any weight loss or toxicity.\n    #+end_quote\n\n  - obesity\n    #+begin_quote\n    It was shown that metformin exerts its anti-obesity effects through increasing mitochondrial biogenesis, decreasing fatty acid uptake, and stimulating thermogenesis\n    #+end_quote\n\n  - modifies microbiome\n    #+begin_quote\n     Moreover, a study indicated that in rats, metformin modulates gut microbiota and prevents high-fat diet induced obesity, which increased the abundance of short-chain fatty acid producing bacteria and decreased microbial diversity\n    #+end_quote\n\n  - improves endothelial oxidative stress.\n    #+begin_quote\n    Through activating AMPK, metformin inhibits alpha-dicarbonyl-mediated modification of apolipoprotein residues, consequently ameliorating high-density lipoprotein (HDL) dysfunction and reducing low-density lipoprotein (LDL) modifications. Reductions in HDL dysfunction improve cholesterol transport and diminish the cardiovascular risk. Moreover, metformin improves endothelial oxidative stress levels and attenuates hyperglycemia-induced inflammation, decreasing the occurrence of CVD\n    #+end_quote\n  - decreases cellular inflammation\n    #+begin_quote\n    By inhibiting mitochondrial complex I, metformin reduces endogenous production of ROS and subsequently decreases DNA damage (60). By activating AMPK, metformin is able to inhibit NF-κB signaling and attenuate cell inflammation (108). Metformin also leads to decreased insulin levels, and suppresses IGF-1 signaling and mTOR signaling, these all together resulting in suppression of inflammation and autophagy that is beneficial to the aging process\n    #+end_quote\n" 536870913] [157 :nodes/id "9dba0048-02d0-4bde-9866-50ca4a6bf2ff" 536870913] [157 :nodes/properties {"CATEGORY" "20211002004603-metformin", "ID" "9dba0048-02d0-4bde-9866-50ca4a6bf2ff", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20211002004603-metformin.org", "PRIORITY" "B"} 536870913] [157 :nodes/title "metformin" 536870913] [157 :nodes/value 7.443750061094761 536870913] [158 :nodes/content ":PROPERTIES:\n:ID:       69b9e520-60df-42d5-b193-0bbc7a2521ef\n:END:\n#+title: meditation\n\nthese are just some mediatation tips\n\n- 2022-10-24 - you're trying to make this present moment enough. So you don't\n  even need enlightenment.\n- it's a matter of getting used to existence\n  - like how Chapman says to get used to nebulosity.\n  - and Roarning Silence says mediation is getting used to the enlightened state\n    I guess that means just not impulsively running from it.\n- don't let anything bother you -- suzuki\n- let go and let be. Keep letting go and letting be. -- Roaring Silence\n  - i.e. remain uninvolved\n- just accept things as they are\n- you have the thought in you're head that youre not supposed to think which\n  reminds you to let go of thoughts.\n- it doesn't actually require effort. you notice the \"effort\" as another thought\n  and objectify it as not part of \"you\". The hard part is to choose to do this.\n- experiencing this moment is always THE most important thing. It's the only way\n  you can grow and learn.\n" 536870913] [158 :nodes/id "69b9e520-60df-42d5-b193-0bbc7a2521ef" 536870913] [158 :nodes/properties {"CATEGORY" "20220817162354-meditation", "ID" "69b9e520-60df-42d5-b193-0bbc7a2521ef", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220817162354-meditation.org", "PRIORITY" "B"} 536870913] [158 :nodes/title "meditation" 536870913] [158 :nodes/value 3.166666567325592 536870913] [159 :nodes/content ":PROPERTIES:\n:ID:       b47d8757-c806-4559-b216-af68b02fe1a9\n:END:\n#+title: carnivore recipes\n\n[[id:334ffe1d-43dd-4f13-99a0-67cf89b73328][carnivore]]\n\ndope bread found on yummly!\nhttps://nourishedintuition.com/\n" 536870913] [159 :nodes/id "b47d8757-c806-4559-b216-af68b02fe1a9" 536870913] [159 :nodes/properties {"CATEGORY" "20220915135722-carnivore_recipes", "ID" "b47d8757-c806-4559-b216-af68b02fe1a9", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220915135722-carnivore_recipes.org", "PRIORITY" "B"} 536870913] [159 :nodes/title "carnivore recipes" 536870913] [159 :nodes/value 2.0 536870913] [160 :nodes/content ":PROPERTIES:\n:ID:       19378c31-8c63-4f00-b18e-fb15f8ff07f5\n:END:\n#+title: drugs\n" 536870913] [160 :nodes/id "19378c31-8c63-4f00-b18e-fb15f8ff07f5" 536870913] [160 :nodes/properties {"CATEGORY" "20220330224817-drugs", "ID" "19378c31-8c63-4f00-b18e-fb15f8ff07f5", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220330224817-drugs.org", "PRIORITY" "B"} 536870913] [160 :nodes/title "drugs" 536870913] [160 :nodes/value 2.9577381014823914 536870913] [161 :nodes/content ":PROPERTIES:\n:ID:       46fdb2ee-efa8-4fdb-bb6a-0e4be5437335\n:END:\n#+title: nix\n\nthis guy talks about it here\nhttps://www.alexeyshmalko.com/2020/literate-config/\n\nand he has a cool braindump linked at [[id:bf693fa1-eeb9-4c5c-a659-f400149e18fa][roam-motivation]]\n" 536870913] [161 :nodes/id "46fdb2ee-efa8-4fdb-bb6a-0e4be5437335" 536870913] [161 :nodes/properties {"CATEGORY" "20210318221757-nix", "ID" "46fdb2ee-efa8-4fdb-bb6a-0e4be5437335", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210318221757-nix.org", "PRIORITY" "B"} 536870913] [161 :nodes/title "nix" 536870913] [161 :nodes/value 2.333333343267441 536870913] [162 :nodes/content ":PROPERTIES:\n:ID:       184f9ed0-8eec-44c8-82e2-e1a5cc4ad6ff\n:END:\n#+title: emacs\n\nfix frozen emacs!\n\n#+begin_src bash\npkill -SIGUSR2 emacs\n#+end_src\n\nAt least for now I'm sticking w/ emacs. Though evaluating fennel from within\nneovim seems really cool.\n\nTBH I need to read more about the neovim story. emacs is fucking slow sometimes.\n\nBUT those times are usually from when some bullshit is misconfigured or something.\n\nmaybe I can profile emacs\n\nnative comp DOWLOADS!\n\nhttps://github.com/d12frosted/homebrew-emacs-plus\n" 536870913] [162 :nodes/id "184f9ed0-8eec-44c8-82e2-e1a5cc4ad6ff" 536870913] [162 :nodes/properties {"CATEGORY" "20210327090410-emacs", "ID" "184f9ed0-8eec-44c8-82e2-e1a5cc4ad6ff", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210327090410-emacs.org", "PRIORITY" "B"} 536870913] [162 :nodes/title "emacs" 536870913] [162 :nodes/value 4.250000059604645 536870913] [163 :nodes/content ":PROPERTIES:\n:ID:       22b2f09e-14a0-45f7-97f3-d8d9b326675f\n:END:\n#+title: clojure development environment\n\n[[id:c7f85840-11a5-4b2c-b574-0c8a028f6a7e][clojure]] [[id:184f9ed0-8eec-44c8-82e2-e1a5cc4ad6ff][emacs]]\n\n* static analysis vs cider\nThis is a question I've thought about a lot\n** nRepl\n*** good\n- source of truth\n- understands any macros. (can it give non-invasive compilation warnings before eval?)\n- I fucking hate how exceptions take you to a whole new buffer and fuck your shit\n** static anal\n*** good\n- fast\n- no startup time (after initial project load)\n*** bad\n- not a source of truth\n- heavily discourages use of complex macros\n  - are these macros really central to the value of clojure like PG says?\n" 536870913] [163 :nodes/id "22b2f09e-14a0-45f7-97f3-d8d9b326675f" 536870913] [163 :nodes/properties {"CATEGORY" "20210409181533-clojure_development_environment", "ID" "22b2f09e-14a0-45f7-97f3-d8d9b326675f", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210409181533-clojure_development_environment.org", "PRIORITY" "B"} 536870913] [163 :nodes/title "clojure development environment" 536870913] [163 :nodes/value 2.5 536870913] [164 :nodes/content ":PROPERTIES:\n:ID:       de11f165-8501-41ec-a9d2-85aa31b64588\n:END:\n#+title: zen budhism\n\n[[id:eb039932-abd7-4a9b-89c9-d4f6e9d4adb1][budhism]]\n\n* essay: zen is not life-denying\nthere's been a lot said in literature I like, notably Ayn Rand, Nietzsche, and\nPaul Graham saying that eastern philosophy is life-denying. It is the eschewing\nof the burden of having a self. It is equivalent to self-hypnosis. Basically,\nthese people all say that budhism is what you do if you want to cease to exist\nand don't want to have to deal with the pain of having a will and not being able\nto impose it on the world. So you self-hypnotize into a state of bliss.\n\nHowever, they all believe in the reality of self-deception being pervasive. They\nsay that self-deception is another way to ignore reality and the pain of reality\nnot reflecting your own ideals. They also say that self-deception is sneaky.\nIt's something that often you yourself are not aware of when you do it. This is\ntrue almost by definition.\n\nI'm not aware if they've mentioned anything about exactly /how/ to avoid\nself-deception. It seems they think that if you're strong enough, or you\nself-analyze critically enough, or you're honest enough that you won't fall into\nself deception. This sounds dangerously close to being a recursive argument. It\nis a recursive argument.\n\nBudhism takes an aggressive stance on self-deception. We lie to ourselves so\nmuch and so pervasivly that we usually don't see a true version of reality.\nSomething slightly painful can be so easily filtered out of consciousness by the\nsubconscious. This comfort seeking becomes ingrained in us. Instead of true\nreality, we see our ego imposed on reality.\n\nThere's somewhat of a mismatch of definitions of the word ego. For budhists,\nit's this comfort-seeking, self-referential part of us. It's the view we have of\nour selves and our place in the world. The ego is only our /perception/ of our\nself, not our actual self. For Ayn Rand and friends, our ego /is/ our self. So\nwhen budhists say \"destroy the ego\", they think it means to destroy your self so\nyou don't have to deal with the pain of existence i.e. the pain coming from\nthe difference between our ideal and reality.\n\nOur perception of our self is a subset of our actual self, though. For instance,\nthere's interests, people you love, ideals you admire, and changes you want to\nsee in the world. These parts of our selves are actually served much better in\nthe absence of a self-image.\n\nHow we think about ourselves and our standing in the world mainly gets in the\nway of the other stuff. We seek prestiege instead of passion, get stuck in the\nrat race, and forget about the ones we love. Our self image is one of the big\nreasons we are so comfort-seeking. One of the main reasons we ignore reality and\ndistract ourselves from the pain of existence. (why?)\n\nZen budhism in the secular sense (filtering out mystical bullshit), is about\ngetting rid of this so we can accept reality and be more of our self. Meditation\nis about \"letting be\" and seeing where the thoughts go. When you let things go\nwithout getting sucked up in the thought, you no longer get distracted from the\npain. You filter out less of reality.\n\nWow i realized I don't really know anything about this topic! just a start\n- why does self-image especially make us exculude reality?\n  - you tell youself \"I am this.\" (lovable, likeable, cool, smart, etc) and you're proud\n    and you ignore stuff that may be the contrary?\n    Or you fake to yourself and others so those attributes seem true.\n    - you try to prop up this image of yourself and alter perception of reality\n      until it your self-image fits into what satisfies you\n- really ego (self-perception) is just part of zen, not the whole story\n  - theoretically there's other pain points that filter reality\n\n\nRewrite 1\n\nAyn Rand, Nietzsche, Paul Graham, and others say that budhism is equivalent to\nself-hypnosis. It's what you do if the pain of having a will and not being able\nto impose it on the world is too much so you just want to bliss out and throw\naway your will.\n\nBut really I think this is just a misunderstanding. For Budhism, \"ego\" is your\nself-image. It's the view we have of our self and our place in the world. It is\nonly our /perception/ of our self, not our actual self.\n\nOur perception of our self is a subset of our actual self, though. For instance,\nthere's your interests, people you love, ideals you admire, and changes you want\nto see in the world. These parts of our selves are actually served better in the\nabsence of a self-image.\n\nSelf-image mainly gets in the way of the other stuff. We seek prestiege instead\nof passion, get stuck in the rat race, and forget about the ones we love. Our\nself image is one of the main reasons we are so comfort-seeking. It's why we\nignore reality and distract ourselves from the pain of existence.\n\nYou tell yourself \"I am this.\" (lovable, likeable, cool, smart, etc.), and\nyou're proud proud of that. It lets you rest assured. You prop up this image of\nyou and alter perception of reality until your perception matches the\nself-image you've created.\n\nOne thing Paul Graham and Ayn Rand and friends aggree about is that self-deception\nis /sneaky/. You can't really fully trust your own motives. You have to always be\nquestioning them. Except for the heroes. They are naturally strong enough to face reality\nhead on and have no shaking of faith because they've always done it for the right reasons\nall along.\n" 536870913] [164 :nodes/id "de11f165-8501-41ec-a9d2-85aa31b64588" 536870913] [164 :nodes/properties {"CATEGORY" "20211016004003-zen_budhism", "ID" "de11f165-8501-41ec-a9d2-85aa31b64588", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20211016004003-zen_budhism.org", "PRIORITY" "B"} 536870913] [164 :nodes/title "zen budhism" 536870913] [164 :nodes/value 2.0 536870913] [165 :nodes/content ":PROPERTIES:\n:ID:       c7f85840-11a5-4b2c-b574-0c8a028f6a7e\n:END:\n#+title: clojure\n\n[[id:81a17d27-594a-4f01-9ec9-7686271bcf24][coding]]\n\n* blogs\n- nrepl client & Clover creator\n  - https://mauricio.szabo.link/blog/2020/04/04/implementing-a-nrepl-client/\n\n- expression problem: https://wiki.c2.com/?ExpressionProblem\n\n- reveal\n  - and remote repls https://vlaaad.github.io/reveal-repls-and-networking\n\n- [[https://blog.michielborkent.nl/2020/06/21/clj-kondo-hooks/][borkdude]]\n  - also his personal, just https://www.michielborkent.nl/ from amersfort!\n  - and https://github.com/clj-kondo/clj-kondo/tree/master/analysis to add tools\n\n- [[http://blog.cleancoder.com/uncle-bob/2020/04/06/ALittleClojure.html][uncle bob]]\n  - or maybe this guy is butunclebob.com and that was just an accumulation thing\n- clojure perf https://tech.redplanetlabs.com/2020/09/02/clojure-faster/\n\n- [[http://clj-me.cgrand.net/2012/09/21/extensible-macros-a-flatter-cond-follow-up/][cgrand]]\n       - shoudl follow on twitter\n  - got that cool macro stuff\n\n- [[https://corfield.org/blog/2020/11/09/vscode-clover/][sean corfield]]\n\n- [[https://martinfowler.com/articles/mocksArentStubs.html][martin fowler]]\n  - cool coding philosiphy guy\n\n- [[id:49a71561-f98b-42a5-812a-031f2a88c7ee][quattype-smart-notes]]\n\n- [[https://blog.codinghorror.com/recommended-reading-for-developers/][coding horror]]\n" 536870913] [165 :nodes/id "c7f85840-11a5-4b2c-b574-0c8a028f6a7e" 536870913] [165 :nodes/properties {"CATEGORY" "20210318211055-clojure", "ID" "c7f85840-11a5-4b2c-b574-0c8a028f6a7e", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210318211055-clojure.org", "PRIORITY" "B"} 536870913] [165 :nodes/title "clojure" 536870913] [165 :nodes/value 8.584444493055344 536870913] [166 :nodes/content ":PROPERTIES:\n:ID:       d8aaf539-f286-4ab7-bc60-d655c046243f\n:END:\n#+title: gut feelings\n\n[[id:ef0a7129-b276-48a3-8907-81dbf1596eea][microbiome]]\n\nbook by Fasano & Flaherty\n\n\n- need to analyze species on strain level bc even within a species, a bacteria\n  may be either good or bad depending on strain\n" 536870913] [166 :nodes/id "d8aaf539-f286-4ab7-bc60-d655c046243f" 536870913] [166 :nodes/properties {"CATEGORY" "20220329213620-gut_feelings", "ID" "d8aaf539-f286-4ab7-bc60-d655c046243f", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220329213620-gut_feelings.org", "PRIORITY" "B"} 536870913] [166 :nodes/title "gut feelings" 536870913] [166 :nodes/value 2.0 536870913] [167 :nodes/content ":PROPERTIES:\n:ID:       f7a10a2c-284c-4e42-a90b-d1a0465759ec\n:END:\n#+title: peter zeihan\n" 536870913] [167 :nodes/id "f7a10a2c-284c-4e42-a90b-d1a0465759ec" 536870913] [167 :nodes/properties {"CATEGORY" "20210328093410-peter_zeihan", "ID" "f7a10a2c-284c-4e42-a90b-d1a0465759ec", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210328093410-peter_zeihan.org", "PRIORITY" "B"} 536870913] [167 :nodes/title "peter zeihan" 536870913] [167 :nodes/value 3.0555554628372192 536870913] [168 :nodes/content ":PROPERTIES:\n:ID:       8db01ec6-b63d-45e3-ac58-1cdcaa65d07a\n:END:\n#+title: ipfs\n\n[[id:4c761d6c-e68a-45a2-90d6-62b47c45e0aa][crypto]]\n\nseems really interesting. content addressing file share.\n\nhttps://blog.ipfs.io/2021-06-03-ipfs-filecoin-content-persistence/\n" 536870913] [168 :nodes/id "8db01ec6-b63d-45e3-ac58-1cdcaa65d07a" 536870913] [168 :nodes/properties {"CATEGORY" "20220127220347-ipfs", "ID" "8db01ec6-b63d-45e3-ac58-1cdcaa65d07a", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220127220347-ipfs.org", "PRIORITY" "B"} 536870913] [168 :nodes/title "ipfs" 536870913] [168 :nodes/value 2.6666666865348816 536870913] [169 :nodes/content ":PROPERTIES:\n:ID:       e121b27a-4abc-46ea-b0c2-747512090ce4\n:END:\n#+title: reading-exploration\n\n\nthis will by my temporary thought / interesting link dump\n\nit's better to give a lot of startups an 8 minute interview than to be more\nsure.\n\n* To Read\n** books\n- douglas adams https://en.wikipedia.org/wiki/Douglas_Adams\n- douglas murray madness of crouds (and his joe rogan!)\n- 50 Economics Classics\n- [[id:de85c368-7840-4102-b527-2d1c24d164d1][disunited-nations-zeihan]] disunited nations by peter zeihan\n- [[id:bdd841b3-53b0-4b0c-a81a-4b247435b4be][how-to-take-smart-notes]]\n** online\n- [[id:c91cb8e4-fcc0-4f01-a6ff-8508ea47ef8f][joe-rogan-experience]]\n- [[id:46fdb2ee-efa8-4fdb-bb6a-0e4be5437335][nix]]\n- [[https://polylith.gitbook.io/polylith/][polylith]] software architecture\n- remaining tdd sucks thing https://youtu.be/EZ05e7EMOLM?t=2103 .\n  - also, the book he mentioned of the OG creator of tdd seems cool\n- a clojure metrics collector https://riemann.io/\n- git branches /rebasing https://learngitbranching.js.org/\n- non GC lisp. insane - https://github.com/carp-lang/Carp\n- check out r/clojure tools sidebar. Seems like they have cool stuff. and a clojure ide.\n*** fogus blog\n:PROPERTIES:\n:ID:       65b168ad-644b-40d8-90f2-05f5c48a1a44\n:END:\n- http://blog.fogus.me/2021/\n- he seems like a great writer\n\n\n\n* Read\n** online\n- [[id:684beca0-7f73-4988-8a13-2e72198247f2][burnout-prevention-and-recovery]]\n" 536870913] [169 :nodes/id "e121b27a-4abc-46ea-b0c2-747512090ce4" 536870913] [169 :nodes/properties {"CATEGORY" "20210318221627-reading_exploration", "ID" "e121b27a-4abc-46ea-b0c2-747512090ce4", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210318221627-reading_exploration.org", "PRIORITY" "B"} 536870913] [169 :nodes/title "reading-exploration" 536870913] [169 :nodes/value 2.0 536870913] [170 :nodes/content ":PROPERTIES:\n:ID:       cd2c0a01-c5ce-4474-831f-041edee42bb3\n:END:\n#+title: peter attia\n\n[[id:b77d4578-bc50-42a8-94c4-b11d27f78837][food]] [[id:5cd35f00-71bc-47f2-b256-8830189ba73e][fat and protein]]\n\n- gotta see\n  - ftp? watts per kilo!\n\n** Dietary Protein w/ Don Layman\nhttps://youtu.be/BqmG2y4IeY8\n\n- best to get protein in morning\n- need >=30g protein in a meal to trigger mtor in muscle aka muscle growth\n- >60g exceeds muscle capacity, then your liver must process the rest\n  - I WONDER what this does to insulin?\n  - could it be causing some of my issues?\n- intake of 1.6g / kg / day? idk if he explicitly said\n** zone 2 w/ Iñigo San-Millán 201\n- test cyclists through ftp\n  - lactate clearance\n- ftp vs lactate production over time\n  - basically determines how good a cyclist is\n" 536870913] [170 :nodes/id "cd2c0a01-c5ce-4474-831f-041edee42bb3" 536870913] [170 :nodes/properties {"CATEGORY" "20221105224451-peter_attia", "ID" "cd2c0a01-c5ce-4474-831f-041edee42bb3", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221105224451-peter_attia.org", "PRIORITY" "B"} 536870913] [170 :nodes/title "peter attia" 536870913] [170 :nodes/value 2.7619047835469246 536870913] [171 :nodes/content ":PROPERTIES:\n:ID:       876a8e7d-8daf-4e9a-9f05-30eb0ea81061\n:END:\n#+title: books\n\n\n** to read\n- [[id:48673a7d-7117-45ed-94da-12cc65aea6eb][meta rationality david chapman]]\n- 4 hour work week\n- Out of Mao's Shadow\n- Ray Dalio's thing?\n** finished\n- 2022-11-15 [[id:3cb405e2-2764-44ae-9b5e-42b842d4abd1][brain energy by palmer]]\n- 2022-11-12 [[id:61c265aa-07e7-438b-a511-68c9747381dc][river town by peter hessler]]\n- long time ago [[id:0ed2fd64-dcf3-49ef-a42d-a2f893f2eeca][a brief history of neoliberalism]]\n\n** old stuff\n- [[id:eced070a-cc4c-4b42-9556-43a1412d554f][four thousand weeks burkeman]]\n- the success trap\n  - why good people stay in jobs they don't like and how to break free\n  - Amina Aitsi-Selmi\n- the courage to be disliked\n  - a zen thing\n  - kishimi and koga\n- primal nutrition\n  - paleolithic and ancestral diets for health\n  - ron schmid\n\nlook at [[id:efadd1da-f54a-4cbc-bcba-ed6c349c89a5][patrick collison]]'s  recommendations & the blog\n\nAlso look at [[id:56b4adf3-311c-47ad-ac9a-63e256d00d9a][brian armstrong]]'s one? and his website maybe\n" 536870913] [171 :nodes/id "876a8e7d-8daf-4e9a-9f05-30eb0ea81061" 536870913] [171 :nodes/properties {"CATEGORY" "20220717093137-books", "ID" "876a8e7d-8daf-4e9a-9f05-30eb0ea81061", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220717093137-books.org", "PRIORITY" "B"} 536870913] [171 :nodes/title "books" 536870913] [171 :nodes/value 10.525000035762787 536870913] [172 :nodes/content ":PROPERTIES:\n:ID:       eced070a-cc4c-4b42-9556-43a1412d554f\n:END:\n#+title: four thousand weeks burkeman\n\n[[id:876a8e7d-8daf-4e9a-9f05-30eb0ea81061][books]] [[id:4e6061e9-b883-4b44-ba62-c9f4fb15262f][productivity]]\n\n- the more efficient you get at accomplishing tasks, the more tasks you will\n  have and you won't feel happier. We are finite beings in a space of infinite\n  possibility.\n  = rush to \"get though\" tasks to get them out of the way\n" 536870913] [172 :nodes/id "eced070a-cc4c-4b42-9556-43a1412d554f" 536870913] [172 :nodes/properties {"CATEGORY" "20220721135305-four_thousand_weeks_burkeman", "ID" "eced070a-cc4c-4b42-9556-43a1412d554f", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220721135305-four_thousand_weeks_burkeman.org", "PRIORITY" "B"} 536870913] [172 :nodes/title "four thousand weeks burkeman" 536870913] [172 :nodes/value 2.7479166984558105 536870913] [173 :nodes/content ":PROPERTIES:\n:ID:       90b7ddf2-9470-4f2d-bb12-80f8ab543d8c\n:END:\n#+title: blog post\n" 536870913] [173 :nodes/id "90b7ddf2-9470-4f2d-bb12-80f8ab543d8c" 536870913] [173 :nodes/properties {"CATEGORY" "20230207213043-blog_post", "ID" "90b7ddf2-9470-4f2d-bb12-80f8ab543d8c", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20230207213043-blog_post.org", "PRIORITY" "B"} 536870913] [173 :nodes/title "blog post" 536870913] [173 :nodes/value 2.0 536870913] [174 :nodes/content ":PROPERTIES:\n:ID:       083683b7-9920-497d-a467-8b40a60c2cc1\n:END:\n#+title: generate keypair\n\ncreate jks from existing certs using this link https://stackoverflow.com/a/8224863/12568347\n#+begin_src bash\n# create cert (with password 'bimjean')\nopenssl pkcs12 -export -in redislabs_user.crt -inkey redislabs_user_private.key \\\n               -out redislabs_user.p12 -name redislabs_user\n\n# and then\nkeytool -importkeystore -srckeystore redislabs_user.p12 -srcstoretype PKCS12 -srcstorepass bimjean -destkeystore redislabs_user.jks -srcalias redislabs_user\n#+end_src\n" 536870913] [174 :nodes/id "083683b7-9920-497d-a467-8b40a60c2cc1" 536870913] [174 :nodes/properties {"CATEGORY" "20220407090911-generate_keypair", "ID" "083683b7-9920-497d-a467-8b40a60c2cc1", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220407090911-generate_keypair.org", "PRIORITY" "B"} 536870913] [174 :nodes/title "generate keypair" 536870913] [174 :nodes/value 2.0 536870913] [175 :nodes/content ":PROPERTIES:\n:ID:       863ea47f-7cd3-4e41-9ab0-a1254de45051\n:END:\n#+title: openai\n\n[[id:ea23ff75-2ef5-4333-9fc8-2432a196891c][ai]]\n\n** whisper\nhttps://github.com/openai/whisper\n\nReading and asking ChatGPT to explain it.\n\nAsking to explain the 2x conv1D + GELU layer.\n\nThe \"conv1D\" in the label indicates that the filters are one-dimensional, which\nmeans that they are applied to the input data along a single dimension, such as\nthe time axis in an audio signal.\n\nThe GELU (Gaussian Error Linear Unit) activation function is a type of nonlinear\nactivation function that is commonly used in machine learning models. It is\nbased on the concept of self-normalizing networks, which are neural networks\nthat automatically adjust their internal state to improve their performance.\n\nThe GELU activation function is defined as GELU(x) = x * Phi(x), where Phi(x) is\nthe cumulative distribution function (CDF) of the standard normal distribution.\nThis function has a shape that is similar to the rectified linear unit (ReLU)\nactivation function, but it is smoother and has better gradient flow\n" 536870913] [175 :nodes/id "863ea47f-7cd3-4e41-9ab0-a1254de45051" 536870913] [175 :nodes/properties {"CATEGORY" "20221204164812-openai", "ID" "863ea47f-7cd3-4e41-9ab0-a1254de45051", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221204164812-openai.org", "PRIORITY" "B"} 536870913] [175 :nodes/title "openai" 536870913] [175 :nodes/value 2.6666666865348816 536870913] [176 :nodes/content ":PROPERTIES:\n:ID:       3e369c84-eabc-4423-84a8-63f2dd412af6\n:END:\n#+title: the rise and fall of american growth\n\nby robert gordon\n" 536870913] [176 :nodes/id "3e369c84-eabc-4423-84a8-63f2dd412af6" 536870913] [176 :nodes/properties {"CATEGORY" "20221014124256-the_rise_and_fall_of_american_growth", "ID" "3e369c84-eabc-4423-84a8-63f2dd412af6", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221014124256-the_rise_and_fall_of_american_growth.org", "PRIORITY" "B"} 536870913] [176 :nodes/title "the rise and fall of american growth" 536870913] [176 :nodes/value 2.0 536870913] [177 :nodes/content ":PROPERTIES:\n:ID:       34e6446a-5674-49cb-af86-60c80b82db43\n:END:\n#+title: simple made easy rich hickey\n\n[[id:c7f85840-11a5-4b2c-b574-0c8a028f6a7e][clojure]] [[id:cddc46b9-df1f-44bb-9a1a-1bebf19a8bbc][rich hickey]]\n\ntalk by rich hickey.\n\nI'm watching it [[https://www.youtube.com/watch?v=oytL881p-nQ&ab_channel=ZhangJian][here]]\n\n* notes 2021-03-31\n** easy\n= near, at hand\n  - something we already know\n  - command line tool we already have\n= near our understanding / skill set\n= within our capabilities\n- easy is relative & subjective\n\n#+begin_quote\nwe repeatedly choose the familiar and to the extent we do that we're never going\nto learn anything new (and never gonna have significantly different results)\n#+end_quote\n\n** focus too much on process\n- we are too IDE fixated (me)\n- not enough on end artifact\n\n** we have limits!\n- be aware of cognitive load\n- human brain has a very low amount of memory\n\n** TESTS are NOT what allows you to change without fear\nits your ability to understand your softare\n- when you have a bug it always passed the test\n- your ability to reason about it is all you have\n- DONT overestimate tests. They don't let you trust.\n\n** The _Artifact_ dominates what you can do\n- agility is NOT about process! it's about what you can do!\n- assess everything by the complexity of the end result. NOT by process\n** make simple things easy\n- read / learn about it, download it. That's on you\n- BUT the mental capability aspect. you can't enhance yourself.\n  - the only option is to make the problem simpler!\n** simple heuristics\n- can I move this? into it's own service?\n  [[https://www.youtube.com/watch?v=oytL881p-nQ&ab_channel=ZhangJian][from here in the vid]], this is the exact principle [[id:b2e60249-a1fa-470c-a364-499256417da0][polylith]] is based on\n  - movable:\n    - well-defined boundaries\n    - abstract interface (verbs)\n    - general way of doing error handling\n    - we need to pass DATA. not a weird object type ~IPersonInfo~ that's not general\n\n- simple is a decision making process that you must do over and over again forever\n  it's not a camp or philosophy you can adopt once\n\n- simplicity often implies more things, not fewer\n\n** everyday complections\n\n_complect_ - to make intertwined with another\n\n*** state\nstate complects value and time\n\nalways bad/complex (but necessary).\n\nwe should be very afraid of state. put warning signs around it (exclaimation\npoints), etc.\n\n*** business logic conditionals\n\ncomplects business logic of why we are doing something with where it sits in our\nprogram\n\nwe do this a LOT in idc-ng\n\n* takeaways\n- what did kristian mean by rules engine embeded in pathom?\n  - we should put all business logic in idc-ng in a rules engine\n" 536870913] [177 :nodes/id "34e6446a-5674-49cb-af86-60c80b82db43" 536870913] [177 :nodes/properties {"CATEGORY" "20210331182726-simple_made_easy_rich_hickey", "ID" "34e6446a-5674-49cb-af86-60c80b82db43", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210331182726-simple_made_easy_rich_hickey.org", "PRIORITY" "B"} 536870913] [177 :nodes/title "simple made easy rich hickey" 536870913] [177 :nodes/value 2.0 536870913] [178 :nodes/content ":PROPERTIES:\n:ID:       e7ec209c-0d5a-4d23-95e2-c0e12fec4eda\n:END:\n#+title: datalog\n\n[[id:c7f85840-11a5-4b2c-b574-0c8a028f6a7e][clojure]] [[id:a262f204-b467-4012-beeb-fca8a629d0aa][datomic]]\n\ncool link is [[http://www.learndatalogtoday.org/][learn datalog today]]\n\nbasically a better sql in a sense.\n" 536870913] [178 :nodes/id "e7ec209c-0d5a-4d23-95e2-c0e12fec4eda" 536870913] [178 :nodes/properties {"CATEGORY" "20210507144600-datalog", "ID" "e7ec209c-0d5a-4d23-95e2-c0e12fec4eda", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210507144600-datalog.org", "PRIORITY" "B"} 536870913] [178 :nodes/title "datalog" 536870913] [178 :nodes/value 2.6666666865348816 536870913] [179 :nodes/content ":PROPERTIES:\n:ID:       f975d948-c99b-460c-bc45-de2b5a302433\n:END:\n#+title: chapman metarationality\n\nYou may find this book exciting if...\n\n\"technical problem-solving work that you used to enjoy for the sense of flow, of\nsmooth confident competence, has come to seem a bit dull\n\nyou are increasingly interested in the preliminaries, in figuring out what a problem is\n\"\n\n#+begin_quote\nWhat actually matters? It also requires reflection on the limits of methods.\nWhat actually works to create knowledge or innovations, not just publications or\nme-too products? This requires meta-rational investigation—and that requires\nactually caring about the subject matter, not just your career or the\nadministrative imperatives of your institution.\n#+end_quote\n" 536870913] [179 :nodes/id "f975d948-c99b-460c-bc45-de2b5a302433" 536870913] [179 :nodes/properties {"CATEGORY" "20220925101230-chapman_metarationality", "ID" "f975d948-c99b-460c-bc45-de2b5a302433", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220925101230-chapman_metarationality.org", "PRIORITY" "B"} 536870913] [179 :nodes/title "chapman metarationality" 536870913] [179 :nodes/value 2.0 536870913] [180 :nodes/content ":PROPERTIES:\n:ID:       5cd35f00-71bc-47f2-b256-8830189ba73e\n:END:\n#+title: fat and protein\n\n[[id:b77d4578-bc50-42a8-94c4-b11d27f78837][nutrition]]\n\nhow much protein to eat?\n\n** hypothesis: you don't need that much protein\n\nfrom DK Layman:\n- \"little anabolic benefit in skeletal muscle with protein meals larger than the\n  minimum amount required for maximum mTORC1 signaling\"\n- \"concentration necessary to trigger muscle protein synthesis also increases\n  BCAA oxidation\"\n- \"optimum meal threshold for older sedentary adults appears to be >25g protein,\n  whereas healthy, young, active men respond to meals with 15g protein\"\n\nAlso, β-Hydroxybutyrate Elicits Favorable Mitochondrial Changes in Skeletal Muscle\n- Volek et al. [27] found that lean body mass increased roughly 1 kg in six weeks compared with control-fed subjects, which may stem from a ketone-induced muscle protein sparing effect\n\nAnd https://doi.org/10.1016/0005-2760%2878%2990016-4 shows acytlcarnitines (fats\ncombined with carnitine) inhibit AA oxidation, which would be upregulated in\nketo.\nAlso just plugging in \"ketones effect on amino acid oxidation\" to elicit gives a bunch of studies like this.\n\nKeto people need much less protein I think.\n\n** protein TODO reading\n- kevin stock's thing\n- how fast is protein absoarbed?\n  - I know [[id:af90c362-ba7e-42d8-8a62-017d2749d784][this]] talks about it but it's not accurate\n- There's an optimal amount of protein you consume to optimize the anabolic\n  response, beyond which there is minimal benefit. Does a ketogenic diet lower\n  this protein threshold?\n  - would make sense given \"Protein-containing meals that stimulate mTORC1 also\n    activate the BCAA catabolic pathway.\" And ketogenesis is protein sparing.\n- search Layman from peter attia's podcast seems legit so search on google\n  scholar\n\n** Slow and fast dietary proteins differently modulate postprandial protein accretion\nhttps://pubmed.ncbi.nlm.nih.gov/9405716/\n\ncool study I guess. Basically just that casein gets absorbed (as measured by\nleucine levels) like 2x as slow as whey\n\n** How much protein can the body use in a single meal for muscle-building? Implications for daily protein distribution\n\nhttps://www.ncbi.nlm.nih.gov/pmc/articles/PMC5828430/\n\nI'm just tryna figure out what the max rate of intestinal absorption is because\nI think protein sometimes causes gastro issues for me.\n=> to address this, it just cited [[id:af90c362-ba7e-42d8-8a62-017d2749d784][this shite]] again! And in that its says he's\nnot sure and it needs further study!! anyways, ~10g/hr for whey which is fast.\n\nThey found for young men, they only needed 0.25 g/kg/meal to max protein synthesis. That's only 19g for me!!\n\nSo tbh, I think I'm on the lower end of the spectrum being in keto. So I think I'd be great with even less.\n\n** Intake of a Ketone Ester Drink during Recovery from Exercise Promotes mTORC1 Signaling but Not Glycogen Resynthesis in Human Muscle\nhttps://doi.org/10.3389/fphys.2017.00310\n\nso yeah basically, post-exercise ketones promote muscle synthesis\n\n** β-Hydroxybutyrate Elicits Favorable Mitochondrial Changes in Skeletal Muscle\nhttps://doi.org/10.3390/ijms19082247\n\nless superoxide produced. less muscle breakdown.\n\nHypothesis: protein bolus induces amino acid oxidation because it wants less\nsuperoxide. But I think ketones could serve this end just as well.\n\n** Defining meal requirements for protein to optimize metabolic roles of amino acids DK Layman et al\nhttps://doi.org/10.3945/ajcn.114.084053\n\ncurrent RDA is 0.8 g/kg, but newer research suggests >=1.0 for older people. RDA\nis measured by /nitrogen balance/. Protein is titrated down till there starts\nbeing net nitrogen loss. However, he suggests there may be benefits in repair,\nmuscle growth, thermogenesis, etc. But it seems like mostly this is replacing\ncarbs w/ protein.\n\nthere are anabolic and metabolic benefits to consuming 20-30g protein per meal.\ne.g. stimulation of mTOR for muscle protein synthesis.\n\n#+begin_quote\nResistance exercise appears to increase the efficiency of EAA use for muscle\nanabolism and to lower the meal threshold for stimulation of protein synthesis.\n#+end_quote\n\nConcentration of amino acids determines the response. The extent of the response\nis determined by the specific amino acid bottleneck. So if one is low then you\ndon't get the response. Animal protein is the right balance ofc.\n\n#+begin_quote\nThus, dietary guidelines based solely on the efficiency of amino acid use for\ngrowth or nitrogen balance outcomes may be neglecting the fact that changes in\nintracellular amino acid concentrations and oxidative catabolism are an\nimportant means to regulate and support many normal metabolic responses beyond\nthe synthesis of nitrogen-containing compounds.\n#+end_quote\n\ni.e. there could be additional benefits for protein besides just the restoration\nof nitrogen-containing compounds. Hence RDA could underestimate.\n\nLiver has minimal capacity to break down BCAA's. Supposedly so plasma levels\nrise so peripheral tissues get a chanse to use them.\n\nBCAA's (esp. leucine) stimulate protein synthesis.\n\n#+begin_quote\n1) the amount of dietary protein at a meal required to initiate an anabolic\n   response in skeletal muscle is driven by the leucine content;\n2) there is little anabolic benefit in skeletal muscle with protein meals larger\n   than the minimum amount required for maximum mTORC1 signaling and activation\n   of mRNA translation initiation;\n3) the intracellular leucine concentration necessary to trigger muscle protein\n   synthesis also increases BCAA oxidation; and\n4) aging produces “anabolic resistance” requiring increased EAAs to achieve\n   maximum mTORC1 signaling and muscle protein synthesis.\n\nThese points lead us to propose that the distribution of protein at individual\nmeals is physiologically important to optimize mTORC1 signaling and muscle\nprotein synthesis. This concept is termed the “meal threshold.”\n#+end_quote\n\nExact leucine threshold to trigger mTORC1 hasn't been studied in humans\n\nmTORC1 does not determine duration of protein synthesis. mTORC1 is activated\nwithin 30 min after meal, w/ maximum protein synthesis at 60-90 min.  The rate\nof protein synthesis declines between 2–3 h postmeal, although mTORC1 signals\nremain activated and plasma leucine concentrations remain elevated.  The\nduration of synthesis cannot be extended even with continuous infusion of more\namino acids.\n- there is a \"refractory period\". So they think protein needs time to reset\n  before another meal can stimulate synthesis.\n\n\"Protein-containing meals that stimulate mTORC1 also activate the BCAA catabolic\npathway.\" Thus muscle growth inherently requires wasted nitrogen! Another reason\nRDA is an under estimate.\n- side note: I wonder if ketosis changes this. maybe should read some [[id:c96bbc45-f182-4fe7-8bee-e876dc694b2c][ben bikman]] work\n\nOlder people get \"anabolic resistence\" -- so they don't get as much anabolic\nstimulation from the same amount of exercise / amino acid intake.\n\n#+begin_quote\nThese findings led to dietary recommendations for older adults that emphasize a\nmeal threshold of >20 g protein containing >2.2 g leucine to optimize that\nanabolic response in skeletal muscle\n#+end_quote\n\nSo likely since I'm young, I probably don't even need 20g to \"optimize that anabolic response\".\n\n#+begin_quote\nAcknowledging inherent risks for comparing dietary treatments across studies,\nthe optimum meal threshold for older sedentary adults appears to be >25 g\nprotein, whereas healthy, young, active men respond to meals with 15 g\nprotein\n#+end_quote\n\n!! I only need 15g?!\n\n** [[id:af90c362-ba7e-42d8-8a62-017d2749d784][A Review of Issues of Dietary Protein Intake in Humans by Shane Bilsborough and Neil Mann]]\n** random\n- amber vs ted naiman https://www.youtube.com/watch?v=2g1qDlo2rW4\n  - [[id:82365fe3-8d59-4ae4-841e-2830f02d251a][amber o'hearn]] says there are situations (like when she was sick) when it's really\n    hard to get into ketosis, so you need a 2:1 fat:protein gram ratio\n  - amber says bc of hormonal changes, higher fat can make you more energetic and\n    want to burn more energy\n  - Ted says you need to work out\n\n- on twitter, [[id:82365fe3-8d59-4ae4-841e-2830f02d251a][amber o'hearn]]\n  - linked to https://journals.sagepub.com/doi/pdf/10.1177/02601060221132922\n    - moderate is 88-133 g/kg/day\n    - usa RDA is 0.8 g/kg/day minimum but this is too low?\n      - newer indicator amino acid oxidation studies have estimated this at\n       ∼1.25 g/kg/day, which is similar to population intakes, but it's higher\n       for athletes.\n  - linked to https://www.virtahealth.com/blog/how-much-protein-on-keto\n    - which says 1.2 /minimum/. really, closer to 1.5, not more than 2.0 tho\n\n- on twitter again, https://twitter.com/mackinprof/status/1584646143547707392?s=20&t=Yzqc7Sz_5j4d-oJojf_y0w\n  - only need 30. But 20->40 only gives you 16% additional muscle growth.\n" 536870913] [180 :nodes/id "5cd35f00-71bc-47f2-b256-8830189ba73e" 536870913] [180 :nodes/properties {"CATEGORY" "20220717093655-fat_and_protein", "ID" "5cd35f00-71bc-47f2-b256-8830189ba73e", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220717093655-fat_and_protein.org", "PRIORITY" "B"} 536870913] [180 :nodes/title "fat and protein" 536870913] [180 :nodes/value 5.014682650566101 536870913] [181 :nodes/content ":PROPERTIES:\n:ID:       406a4a8d-4aa4-4538-9294-0a6097df0cc5\n:ROAM_ALIASES: hyperlipid\n:END:\n#+title: Peter Dobromylskyj\n\n[[id:b77d4578-bc50-42a8-94c4-b11d27f78837][food]] [[id:014d95aa-bba2-4a62-9d92-182d0aac0a62][keto]]\n\ncool blog: http://high-fat-nutrition.blogspot.com/\n\n* germ free mice are healthy bc bacteria block fiaf production\n  - https://high-fat-nutrition.blogspot.com/2007/12/fiaf-whos-fat-is-it-anyway.html\n  - fiaf - Fasting induced adipose factor - keeps us from storing much fat\n  - provides a mechanism behind that ketotic thing!\n  - bacteria only allow fiaf to be released during fasting, when they're hungry\n#+begin_quote\nRegarding:\n\n\"if the system is in good working order they are almost all, several trillion of them, in our colon.\"\n\nDo you think most people with gut issues are in good working order? Or could small intestinal microbes be playing a big role there? In which case, would the high fat intervention make sense?\n\nFor the endotoxin released via chylomicrons when consuming fat, the source of the LPS must be small intestinal bacteria, right? So there's at some bacteria there. The postprandial fat-induced endotoxin spike is much higher in t2 diabetics, as described here:\n\nhttps://pubmed.ncbi.nlm.nih.gov/22210577/\n\nPerhaps this is because of higher small intestinal bacteria for those people? What would be a possible mechanism?\n\n- Kevin\n#+end_quote\n\n* adipocites\n** endocannabinoids effect\nhttp://high-fat-nutrition.blogspot.com/2022/01/rimonabant-and-adipocytes.html\nsays that endocannabinoids can make adipocites more insulin sensitive, causing\nthem to absoarb more energy than normal.\n* metformin\n- [[id:9dba0048-02d0-4bde-9866-50ca4a6bf2ff][metformin]]\n- from [[https://high-fat-nutrition.blogspot.com/search/label/Metformin%20%2812%29%20You%20don%27t%20need%20to%20be%20SHORT][his metformin section]],\n  #+begin_quote\n  It is quite core to any logical self consistent view of the world that\n  metformin is an agent which blunts insulin signalling, as per the ROS/Protons\n  hypothesis via inhibition of mitochondrial glycerophosphate dehydrogenase.\n  #+end_quote\n- but what is glycerophosphate dehydrogenase and how does it work?\n  and how does this lead to increased ROS production via fatty acid oxidation?\n\n- (1) metformin only affects blood sugar in the presence of insulin\n- (2) theraputic metformin won't block complex I to the point of increasing lactate\n  - 500mg will improve your perf in high-energy exercise though!\n- (3) ppl use too high a dose. Really, metformin doesn't block complex I\n- (4) metformin promotes fat oxidation during fasting but promotes glucose\n  oxidation during the first three hours after a plate of \"cookies\"\n- (5) reason for 4 is that mtG3Pdh blockade causes less glucose-induced\n  superoxide which prevents the minimum superoxide required for insulin\n  signalling. Then in the fed state, it causes less insulin /resistance/ bc less\n  superoxide. This fed state will cause more lactate production bc more glucose\n  is entering cells when theyre already oxidized.\n- (6) physiological insulin is secreted from pancreas, w/ HIGH concentration in\n  the pancreas, which turns off glucagon, then it goes through portal vein to\n  liver at HIGH concentration to tell it to suck up glucose instead of releasing\n  it, THEN it gets to peripheral cells to tell them to suck up some glucose.\n  Injected insulin will never look like this. The only solution is keto.\n- (10) metformin increases ffa's while fasting\n\n* protons\n- fadh2:nadh+ ratio is 0.48 for palmitate, and 0.2 for glucose\n- lower ratio => reverse electrons through complex I => superoxide\n- superoxide (O2--, for which h2o2 is a good proxy) causes insulin resistance\n- (5) fasting causes superoxide / insulin resistence which is needed for survival\n  or else the brain would starve (it's dependent on glucose)\n- (6) metformin slows complex I, increasing superoxide, making fat resist insulin\n  and therefore burn fat!\n- neurons run on lactate! They can't even affort the superoxide from glucose, so\n  the glial cells feed them lactate!\n- (13) zero fat-- the carbosis phenomenon!\n  - in a pancreas, the same stuff happens w/ superoxide signalling, but instead\n    of causing insulin resistence, it causes insulin secretion\n  - you need some fat to create superoxide & secrete insulin. if blood ffa is\n    very low (from 0 fat diet & insulin preventing lipolysis), you won't get a\n    big insulin bump and then resting insulin will be very low. And you'll have\n    huge lipolysis\n- (14) superoxide causes mitochondrial biogenesis. there's nothing to cause\n  superoxide in neurons, except ketones! can maybe do so\n- (16) low F:N ratio => hypoglycemia !\n  bc even in muscle, low F:N causes\n\n* gluten\n- wheat germ agglutinin (WGA) binds directly to intestinal cells, causing damage. NO ANTIBODIES REQUIRED\n  https://high-fat-nutrition.blogspot.com/2008/01/wheat-and-lactose.html\n- NK cells attack gluten with NO antibodies present\n  http://high-fat-nutrition.blogspot.com/2008/02/gluten-and-nk-cells-forget-antibodies.html\n- gluten ataxia\n  - https://high-fat-nutrition.blogspot.com/2007/11/nottingham-and-sheffield-are-about-30.html\n  - there may be ZERO gut issues when gluten is causing other systemic damage\n  - gluten causes increased intestinal permeability, IN EVERYONE. This opens the door for immunity to proteins which leak in\n    https://pubmed.ncbi.nlm.nih.gov/16635908/\n- antibody tests are bullshit\n  - https://pubmed.ncbi.nlm.nih.gov/14564185/\n- gluten causes autoimunity (e.g. hypothyroid). Antibodies disappear in 3-6 months\n  - https://high-fat-nutrition.blogspot.com/2008/06/gluten-thyroid-and-auto-immunity.html\n" 536870913] [181 :nodes/id "406a4a8d-4aa4-4538-9294-0a6097df0cc5" 536870913] [181 :nodes/properties {"CATEGORY" "20220719235115-peter_dobromylskyj", "ROAM_ALIASES" "hyperlipid", "ID" "406a4a8d-4aa4-4538-9294-0a6097df0cc5", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220719235115-peter_dobromylskyj.org", "PRIORITY" "B"} 536870913] [181 :nodes/title "Peter Dobromylskyj" 536870913] [181 :nodes/value 6.396825440227985 536870913] [182 :nodes/content ":PROPERTIES:\n:ID:       3cb405e2-2764-44ae-9b5e-42b842d4abd1\n:END:\n#+title: brain energy by palmer\n\n[[id:876a8e7d-8daf-4e9a-9f05-30eb0ea81061][books]] [[id:014d95aa-bba2-4a62-9d92-182d0aac0a62][keto]]\n\nOverall, there was too much fluff. Other people have had these theories, but I'm\nvery happy someone close to the mainstream is advocating for the metabolic\nconnection to mental health.\n\nMost mental disorders likely have the same underlying cause. This is\nmitochondrial dysfunction. This creates a cellular energy deficit, which causes\nhyper-activated and under-activated neurons (it takes energy to both activate\nand deactivate neurons). Also some neurons release transmitters to specifically\ninhibit certain pathways. When these run out of energy, they can't do that,\nwhich leads to over-activation of those pathways. Protein synthesis, folding,\nclearance, and reuse can start having issues. Hence buildup of beta amyloid\nproteins in Alzheimers people. Certain enzymes are designed to breakdown\nneurotransmitters, so when these malfunction, you also get hyper-excitability.\n\nNeurons can just die from lack of energy, and this can happen in a systematic\nway and lead to developmental disorders like Autism.\n\nReduced cellular ATP has been found in many disorders.\n\nInsulin and thyroid hormone signal mitochondrial biogenesis.\n\nInflammation directly impacts mitochondrial function which is my there's a link\nthere.\n\nDoesn't address the source of these inflammatory conditions and just says that\nthey can cause mental disorders. I think most people know this, but the big\nquestion is figuring out how to fix. I don't like that he pretending that\ninflammatory/autoimmune disorders are a solved problem. I get you're keeping\nyour book focussed on one topic, but don't pretend.\n\nBright lights increase ATP production, change calcium levels, have\nanti-inflammatory effects. Thought to improve mitochondria!\nhttps://doi.org/10.1007/s12035-017-0852-4\n\nThinks fiber is the best thing ever and the only way to produce butyrate in the\ngut which is just plain false.\n\nThinks ketogenic diet is \"fasting mimicking\". I think it's more like fasting\nmimicks the ketogenic diet.\n\nUCP2 in the brain actually causes hypothalymus issues and weight gain!\n\n[[id:9dba0048-02d0-4bde-9866-50ca4a6bf2ff][metformin]] blocks aerobic excercise induced benefits to muscle mitochondria function!\n\nExercise induces mitochondrial biogenesis and mitophagy. NOT ONLY in muscle\ncells, but also in brain cells! But it doesn't help so much if you have other\nissues going on, like inflammation. That's why RCT's don't always show a benefit.\nMost people have other shit going on.\n\n\n** interesting stats\n\n20% ppl in USA are diagnosed w/ mental or substance use disorder.\n\nRates are increasing a lot. Depression for children (12-17) increased 68% from 2006-2017. 18-25 its 49%.\n\nIn 2016 45k ppl died by suicide in USA. In general, for every death, 30 others\nattempt suicide, so 1 million per year attempt suicide.\n\n8.4% of USA adults had at least one depressive episode. 66% received treatment.\n\nStudy followed 431 ppl, assessed depressive symptoms weekly for 12 years. Even\nw/ treatment, 90% had persistent symptoms.\nhttps://doi.org/10.1001/archpsyc.55.8.694\n\nLots but not all have elevated inflammatory markers.\n\nLater said, likelihood of full and complete remission of major depression\nsymptoms with first antidepressant is abotu 30-40%. Which seems pretty good imo\ncompared to that 90% mentioned above!\n\nAbout half of people diagnosed with any mental disorder have more than one.\n\nThere are 10-50 gial cells /per neuron/ in the brain\n\nPregnant woman with infections are 80% more likely to have a child w/ Autism.\nAnimal models of autism cause it by injecting inflammatory molecules into the\npregnant mother.\n" 536870913] [182 :nodes/id "3cb405e2-2764-44ae-9b5e-42b842d4abd1" 536870913] [182 :nodes/properties {"CATEGORY" "20221118104537-brain_energy_by_palmer", "ID" "3cb405e2-2764-44ae-9b5e-42b842d4abd1", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221118104537-brain_energy_by_palmer.org", "PRIORITY" "B"} 536870913] [182 :nodes/title "brain energy by palmer" 536870913] [182 :nodes/value 2.7479166984558105 536870913] [183 :nodes/content ":PROPERTIES:\n:ID:       1635f9ee-30c7-48a5-8282-74fb1e9cc566\n:END:\n#+title: meaningness david chapman\n\n[[id:876a8e7d-8daf-4e9a-9f05-30eb0ea81061][books]] [[id:eb039932-abd7-4a9b-89c9-d4f6e9d4adb1][budhism]] [[id:1eca4241-9815-471f-900c-d8864678ba9f][david chapman]]\n\nalso, vividness seems very interesting! https://vividness.live/thought-soup\n\nhttps://meaningness.com/preview-eternalism-and-nihilism\n\ncool philisophical book maybe\n\nyes. cool. I think I need it.\n\neternalism (belief in some \"divine plan\" created by God, or the Universe)\nvs it's response\nnihilism (there are no plans)\n\nthese are confused _stances_ (a basic attitude towards meaningness)\n\nThese stances (and other similar ones) are emotionally satisfying, but are\nunstable because they are factually false and therefore fail to match reality.\nOn other hand _complete stances_ are those that match reality, but are unstable\nbecause they are not emotionally satisfying. We can generate awareness of stances\nwe take, and make sure to correct them with complete stances / _antidotes_.\nAlso, stances are insidious because we often don't realize when we are adopting\nthem.\n- i.e. we work to stabilize complete stances and destabilize confused ones\n\nmeaningness has both pattern & nebulosity\n\nbasically all confused stances are denial of nebulosity. Deny one aspect, fix another aspect of pattern.\nthey come in pairs:\n- true self vs no self\n- nihilism vs eternalism\n- moral eternalist vs moral nihilist\n- missionist vs materialist\n\n2022-08-29:\n  I'm noticing that I cycle away from the complete stance. It might be worth reading his book to try to stabilize it.\n\n    #+begin_quote\n    Coming to a correct conceptual understanding of meaningness is helpful for\n    dissolving fixations, and for accepting what confused stances deny.\n    Unfortunately, that is not sufficient, or even most of the work. The confusions\n    are deeply ingrained in our cultures and societies, and in each of our own ways\n    of being. Agreeing that a metaphysical error is mistaken doesn’t (by itself)\n    eliminate its harms. There is some intellectual satisfaction in understanding\n    the complete stance, but that is minor compared to its benefits for your life.\n    #+end_quote\n\n    I seek specialness too often without realizing.\n\n*** questions\n- \"What can you do now that you enjoy and is useful?\"\n  - this requires a certain degree of randomness no? By picking something now\n    you forclose many other opportunities. The happenstance of your current\n    location defines the answer to a large degree. Is this randomness an aspect\n    of nebulosity we must accept? When should someone continue to search the\n    space of things to do for something less random?\n" 536870913] [183 :nodes/id "1635f9ee-30c7-48a5-8282-74fb1e9cc566" 536870913] [183 :nodes/properties {"CATEGORY" "20220723142655-meaningness_david_chapman", "ID" "1635f9ee-30c7-48a5-8282-74fb1e9cc566", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220723142655-meaningness_david_chapman.org", "PRIORITY" "B"} 536870913] [183 :nodes/title "meaningness david chapman" 536870913] [183 :nodes/value 2.0 536870913] [184 :nodes/content ":PROPERTIES:\n:ID:       6c2f6dee-77f5-451e-a76b-6a68a3f01498\n:END:\n#+title: barefoot\n\nabout barefoot running and barefoot shoes and whatnot\n\nthis seems like a great review site!\n\nhttps://birthdayshoes.com/\n" 536870913] [184 :nodes/id "6c2f6dee-77f5-451e-a76b-6a68a3f01498" 536870913] [184 :nodes/properties {"CATEGORY" "20220719235414-barefoot", "ID" "6c2f6dee-77f5-451e-a76b-6a68a3f01498", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220719235414-barefoot.org", "PRIORITY" "B"} 536870913] [184 :nodes/title "barefoot" 536870913] [184 :nodes/value 2.650000035762787 536870913] [185 :nodes/content ":PROPERTIES:\n:ID:       593d017c-1756-4583-9856-077289ca2ea4\n:END:\n#+title: ai optimism\n\n[[id:ea23ff75-2ef5-4333-9fc8-2432a196891c][ai]]\n" 536870913] [185 :nodes/id "593d017c-1756-4583-9856-077289ca2ea4" 536870913] [185 :nodes/properties {"CATEGORY" "20220822211928-ai_optimism", "ID" "593d017c-1756-4583-9856-077289ca2ea4", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220822211928-ai_optimism.org", "PRIORITY" "B"} 536870913] [185 :nodes/title "ai optimism" 536870913] [185 :nodes/value 2.7333333492279053 536870913] [186 :nodes/content ":PROPERTIES:\n:ID:       d751c891-f4e9-4687-a2d5-800dbec5da9b\n:END:\n#+title: attention is all you need\n\n[[id:ea23ff75-2ef5-4333-9fc8-2432a196891c][machine learning]]\n\n- attention layer\n  - uses a query, a set of key-value pairs\n  - dot product query w/ all the keys, then softmax to get the weight for that value\n  - do some tensor magic to do this w/ a bunch of queries at a time\n" 536870913] [186 :nodes/id "d751c891-f4e9-4687-a2d5-800dbec5da9b" 536870913] [186 :nodes/properties {"CATEGORY" "20221106164148-attention_is_all_you_need", "ID" "d751c891-f4e9-4687-a2d5-800dbec5da9b", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20221106164148-attention_is_all_you_need.org", "PRIORITY" "B"} 536870913] [186 :nodes/title "attention is all you need" 536870913] [186 :nodes/value 2.6666666865348816 536870913] [187 :nodes/content ":PROPERTIES:\n:ID:       014d95aa-bba2-4a62-9d92-182d0aac0a62\n:END:\n#+title: keto\n\n** Keto intro links\n\nFrom ketotic blog, [[http://www.ketotic.org/2013/08/the-medical-grade-diet.html][this post]] and [[http://www.ketotic.org/2013/08/the-ketogenic-diet-for-metabolic.html][this one]] are good starters, but the whole\nblog is great.\n\n[[https://www.youtube.com/watch?v=JVl1X0fb1uA][this]] is tim ferriss podcast is interesting talking about the mental health side\nof things. I read the guy's book and it's meh.\n\nRoblox founder's son had bipolar and got better. [[https://www.youtube.com/watch?v=d0Q-nVWJ-Pk][this video]] is an overview. Good\nthing they're funding research a shit ton!\n\n[[https://www.youtube.com/watch?v=0WJBHEhmXqc][this]] is a very classic video. (though carnivore, not keto)\n\ngo on reddit if you have specific questions when starting! Baseline I recommend\ngetting keto pee strips (on amazon for $10) to make sure you're actually in\nketosis and making sure you get >1.2 grams per kilogram ideal bodyweight. Other\nthan that eat whatever keeps you in ketosis!\n\n\n\nThe rest of this is page more specific to my own reading.\n\n** A Unifying Mechanism of Ketogenic Diet Action\nhttps://doi.org/10.1016/j.eplepsyres.2020.106469\n\n“Glucose or ketone bodies can each produce ATP molecules for cell energy, but\nketone-based metabolism requires fewer molecules of nicotinamide adenine\ndinucleotide (NAD).”\n\n\"To produce 1000 ATP molecules only 28 glucose molecules are needed as compared\nto 37 β-OHB molecules and 42 AcAc molecules. But there are significant\ndifferences in NAD+ reduction: glucose reduces 112 molecules of NAD+, whereas\nβ-OHB reduces 37 and AcAc reduces none.\"\n\n\"Despite strong and consistent reports of clinical success for nearly a century,\nthe first randomized controlled study utilizing KD in pediatric epilepsy was\nreported in 2008\"\n\n- no one even ran an experiment till 2008?!?!!\n\n\"[in mitochondria] increasing NAD+ levels was found to enhance mitochondrial\nfunction and protect against oxidative stress damage \"\n" 536870913] [187 :nodes/id "014d95aa-bba2-4a62-9d92-182d0aac0a62" 536870913] [187 :nodes/properties {"CATEGORY" "20220717093342-keto", "ID" "014d95aa-bba2-4a62-9d92-182d0aac0a62", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220717093342-keto.org", "PRIORITY" "B"} 536870913] [187 :nodes/title "keto" 536870913] [187 :nodes/value 7.359226107597351 536870913] [188 :nodes/content ":PROPERTIES:\n:ID:       0a93f971-ba2f-44a8-bee1-ad98b31bc245\n:END:\n#+title: datomic architecture\n\n[[id:a262f204-b467-4012-beeb-fca8a629d0aa][datomic]] [[id:a5b210c1-8236-4e1f-8a96-f10047885e5f][databases]] [[id:68a54c7b-545e-46e0-84bd-60940fa5f207][toread]]\n\n* reading from infoq's datamic architecture [[https://www.infoq.com/articles/Architecture-Datomic/][post]]\n\n- datomic aims for a middle ground between RDBMS & NoSQL, choosing ACID\n  transactions over unlimited write throughput, in an elastic way\n\n- database is passed as a value to the query engine. This value is just data.\n  There's a REST interface that's isomorphic to the JVM api.\n\n- exposes indexes, so it primarily uses datalog as a query lang, but can also\n  use core.logic (or whatever the logic lib is)\n" 536870913] [188 :nodes/id "0a93f971-ba2f-44a8-bee1-ad98b31bc245" 536870913] [188 :nodes/properties {"CATEGORY" "20210413170420-datomic_architecture", "ID" "0a93f971-ba2f-44a8-bee1-ad98b31bc245", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210413170420-datomic_architecture.org", "PRIORITY" "B"} 536870913] [188 :nodes/title "datomic architecture" 536870913] [188 :nodes/value 2.0 536870913] [189 :nodes/content ":PROPERTIES:\n:ID:       e3ac4fcc-4ef1-4fce-9938-292af6ab8020\n:END:\n#+title: ai doom\n\n[[id:ea23ff75-2ef5-4333-9fc8-2432a196891c][ai]]\n" 536870913] [189 :nodes/id "e3ac4fcc-4ef1-4fce-9938-292af6ab8020" 536870913] [189 :nodes/properties {"CATEGORY" "20220822133835-ai_doom", "ID" "e3ac4fcc-4ef1-4fce-9938-292af6ab8020", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220822133835-ai_doom.org", "PRIORITY" "B"} 536870913] [189 :nodes/title "ai doom" 536870913] [189 :nodes/value 3.1388888359069824 536870913] [190 :nodes/content ":PROPERTIES:\n:ID:       26843ee8-2d1a-4021-a576-60c06ad709f8\n:END:\n#+title: evil mode\n#+roam_alias \"evil emacs\"\n\n* notes from [[https://github.com/noctuid/evil-guide#further-integrating-evil-and-emacs][emacs docs]]\n- making your own keybindings can often be faster than learning someone else's\n  - self-enforced consistency means your keybindings will be better than the\n    inconsistent defaults provided by various packages\n  - recommends [[https://github.com/emacs-evil/evil-collection][evil collection]] which idk if doom includes\n" 536870913] [190 :nodes/id "26843ee8-2d1a-4021-a576-60c06ad709f8" 536870913] [190 :nodes/properties {"CATEGORY" "20210327090349-evil_mode", "ID" "26843ee8-2d1a-4021-a576-60c06ad709f8", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210327090349-evil_mode.org", "PRIORITY" "B"} 536870913] [190 :nodes/title "evil mode" 536870913] [190 :nodes/value 3.166666567325592 536870913] [191 :nodes/content ":PROPERTIES:\n:ID:       9ca4ddff-834b-4661-b843-89f7a62f4b65\n:END:\n#+title: east coast trip\n\n** idea dump\n*** philly\n- mutter museum\n- museum of american revolution\n" 536870913] [191 :nodes/id "9ca4ddff-834b-4661-b843-89f7a62f4b65" 536870913] [191 :nodes/properties {"CATEGORY" "20210719203045-east_coast_trip", "ID" "9ca4ddff-834b-4661-b843-89f7a62f4b65", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20210719203045-east_coast_trip.org", "PRIORITY" "B"} 536870913] [191 :nodes/title "east coast trip" 536870913] [191 :nodes/value 2.0 536870913] [192 :nodes/content ":PROPERTIES:\n:ID:       6d87c5bf-dd93-4267-b713-fb3dc9fba0b0\n:END:\n#+title: lucy mailing blog\n\n[[id:4e007f1e-3e2b-4c96-98f0-58260d6ed0e2][sibo]] [[id:ef0a7129-b276-48a3-8907-81dbf1596eea][microbiome]]\n\nmicrobiome researcher blog!\n\n** next stuff\nhttps://www.lucymailing.com/is-a-high-fat-or-ketogenic-diet-bad-for-your-gut/\n- seems cool\n** sibo intro\nhttps://www.lucymailing.com/all-about-sibo-small-intestinal-bacterial-overgrowth/\n\n- berberine (related to metformin) is a natural anti microbial\n- sibo is more a symptom than a root cause. It very often comes back within\n  two weeks. Underlying causes include\n  - poor motility, low acid, alcohol consumption, bad colonic microbiome.\n  - she says you should try fasting\n\n** sibo pt 2\nhttps://www.lucymailing.com/what-the-latest-research-reveals-about-sibo/\n\n- breath test has lots of false negatives\n  - in research, \"Of the 18 patients with >10^3 CFU/mL by jejunal culture, only\n    seven had a positive breath test\".\n  - breath gas production was actually slightly /negatively/ correlated with actual\n    number of CFU/ml\n  - but even culturing can't measure since most bacteria in intestine can't be\n    cultured!\n- sibo may be a very diverse condition and lots of ppl may have it\n- Very little is known about small intestine microbiome\n\n*** HERBAL REMEDIES\n- berberine! a [[id:9dba0048-02d0-4bde-9866-50ca4a6bf2ff][metformin]] family molecule.\n  I wonder if it has a similar effect as metformin and indirectly, this is what\n  helps diabetics from microbiome. So everyone just has low grade sibo!\n  [[id:a49bfbb3-9c08-42cf-909d-4a9f789aeb61][berberine]]\n- Candibactin AR/BR\n  - coctail of different stuff, contains berberine\n" 536870913] [192 :nodes/id "6d87c5bf-dd93-4267-b713-fb3dc9fba0b0" 536870913] [192 :nodes/properties {"CATEGORY" "20220330002850-lucy_mailing_blog", "ID" "6d87c5bf-dd93-4267-b713-fb3dc9fba0b0", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220330002850-lucy_mailing_blog.org", "PRIORITY" "B"} 536870913] [192 :nodes/title "lucy mailing blog" 536870913] [192 :nodes/value 2.095238097012043 536870913] [193 :nodes/content ":PROPERTIES:\n:ID:       a49bfbb3-9c08-42cf-909d-4a9f789aeb61\n:END:\n#+title: berberine\n\n[[id:f08e30aa-e83b-451f-88b7-fe954bab2f6e][supplements]] [[id:9dba0048-02d0-4bde-9866-50ca4a6bf2ff][metformin]] [[id:19378c31-8c63-4f00-b18e-fb15f8ff07f5][drugs]]\n\n\n- current story\n  - berberine -> kills BSH bacteria that bread down bile acid -> more bile acid ->\n    FXR signaling -> expression of anti-microbial genes -> clearning of bacteria\n    and better health\n  - could this be why I usually diarrhea post-fast? during the fast, lots of\n    BSH bacteria die, then when I eat, lots more bile acid, then subsequent FXR\n    activiation and anti-microbe activity?\n\n** Activation of IGF-1/IGFBP-3 signaling by berberine improves intestinal mucosal barrier of rats with acute endotoxemia\n\nhttps://doi.org/10.1016/j.fitote.2017.11.012\n\n\"LPS has been reported to inhibit IGF-I and IGFBP-3 expression\"\n- why?\n  - Activity of GH/IGF-I axis in trauma and septic patients during artificial\n    nutrition (https://link.springer.com/article/10.1007/BF03343993)\n    Says there's less growth hormone (GH) response to growth hormone stimulating\n    hormode (GHSH) in sepsis patients. This feeds into IGF-1 not being\n    stimulated, which causes lack of expression and tight junction failing\n  - THEORY: immune system demand becomes so high that the body develops \"growth\n    resistance\" (e.g. to GH) in order to spare building capacity for the immune\n    system / acute trauma.\n    - related: https://doi.org/10.1093/advances/nmaa139\n\n** Brands to buy!\nhttps://www.ncbi.nlm.nih.gov/pmc/articles/PMC5807210/\n\nbasically, Thorne, Integrative Therapeutics, or Vital Nutrients (most expensive)\n\nBUT Dr. Whitaker Berberine Supplement is the best!\n** Efficacy of Berberine in Patients with Type 2 Diabetes\n\nhttps://doi.org/10.1016%2Fj.metabol.2008.01.013\n\nused to treat sibo. related to metformin (like same family of molecules). But\nmight be better for sibo? [[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2410097/#:~:text=Compared%20with%20metformin%2C%20berberine%20exhibited,activity%20is%20better%20than%20metformin][better than metform]].\n** potential post?\n- amber (and I) had fat intolerance?\n  - link this with less bile production\n- we had sibo\n** Regulation of antibacterial defense in the small intestine by the nuclear bile acid receptor\n:PROPERTIES:\n:ID:       e22d1b38-9b0c-46df-ac70-f9fe028527e7\n:END:\nfound via [[id:919e9425-207e-45b9-9ab8-891fd455f7f4][Berberine Directly Affects the Gut Microbiota to Promote Intestinal Farnesoid X Receptor Activation]]\n\nhttps://pubmed.ncbi.nlm.nih.gov/16473946/\nhttps://sci-hub.se/10.1073/pnas.0509592103\n#+begin_quote\nObstruction of bile flow in humans or rodents causes proliferation of intestinal\nbacteria and mucosal injury, which can lead to bacterial translocation across\nthe mucosal barrier and systemic infection (2).  Oral administration of bile\nacids inhibits the bacterial overgrowth and translocation caused by biliary\nobstruction in rodents (3, 4).\n#+end_quote\n\nreminds me of https://fireinabottle.net/campari-is-a-dual-bile-acid-receptor-agonist-that-activates-ampk/\n\nFXR activation causes\n- aniboitic effect\n- less bacteria\n\n- _ileum_ = last section of small intestine\n\nYou can stop FXR activation by performing bile duct ligation (BDL). This causes\nbacterial overgrowth in ileum, /especially aerobes/. This is completely blocked\nby giving an FXR agonist.\n\"FXR-KO mice had 10-fold higher levels of aerobic bacteria in mesenteric lymph nodes as compared with WT animals\"\n\"transmission electron microscopy revealed large ruptures in the mucosal surface of BDL WT\nmice, with bacteria penetrating deep into the epithelium\"\n\"Virtually no mucosal damage was detected in electron microscopy studies done by using tissue from GW4064-treated mice\"\nFXR-KO mice had higher bacterial translocation\n** microbiota section\n*** Effects of Berberine on the Gastrointestinal Microbiota\nhttps://www.ncbi.nlm.nih.gov/pmc/articles/PMC7933196/\n\n  #+begin_quote\nBerberine is also known to reduce the diversity of the GM and interfere with the relative abundance of Desulfovibrio, Eubacterium, and Bacteroides\n  #+end_quote\n\nHEALS SIBO\n\n  #+begin_quote\n  Short-term exposure to berberine alters the populations of intestinal bacteria by reducing the activity of Clostridium cluster XIVa and IV, and their bile salt hydrolase (BSH), thus leading to the accumulation of taurocholic acid (TCA). TCA can activate intestinal farnesoid X receptor (FXR) which can then mediate the metabolism of bile acids, lipids, and glucose (Tian et al., 2019).\n  #+end_quote\n\n*** Berberine Directly Affects the Gut Microbiota to Promote Intestinal Farnesoid X Receptor Activation\n:PROPERTIES:\n:ID:       919e9425-207e-45b9-9ab8-891fd455f7f4\n:END:\nwhich links to FXR receptor link:\nThis a good overview\nhttps://www.ncbi.nlm.nih.gov/pmc/articles/PMC6323626/\n\n- \"A recent study indicated a novel mechanism for the intestine-restricted FXR\n  agonist fexaramine that can activate intestinal FXR and TGR5/GLP-1 signaling\n  through intestinal microbiota activity to protect against obesity and related\n  metabolic disease\"\n- \"Recent evidence suggested the lipid-lowering effect of BBR involves\n  modulating bile acid composition and activating intestinal FXR signaling (Guo\n  et al., 2016; Sun et al., 2017).\"\n- \"We demonstrated that BBR directly altered the gut microbiota by\nreducing Clostridium spp. and subsequently altered intestinal FXR signaling\"\n- Berberine in a dish of bacteria changes the composition, \"especially\nreducing BSH-expressing bacteria like Clostridium spp.\".\n- so reduces Clostridium and its bile salt hydrolase (bsh) activity.\n- need to look more into BSH bacteria\n- how to bile acids work? conjugation / deconjugation\n    - see http://www.vivo.colostate.edu/hbooks/pathphys/digestion/liver/bile.html\n*** The complex structure of bile salt hydrolase from Lactobacillus salivarius reveals the structural basis of substrate specificity\n- https://www.nature.com/articles/s41598-019-48850-6 seems very interesting\n    #+begin_quote\n    The bile salt hydrolase (BSH) produced by intestinal bacteria catalyzes deconjugation of glyco-conjugated and tauro-conjugated bile acids through the hydrolysis of the amide bond and the release of free bile acids (e.g. cholic acid and chenodeoxycholic acid) and amino acids (glycine and taurine)1. Deconjugation is a gateway reaction in the metabolism of bile acids in the small intestine2,3. Therefore, BSH participates in a range of metabolic processes in mammalians including the regulation of dietary lipid absorption, cholesterol metabolism, energy and inflammation homeostasis4,5,6.\n    #+end_quote\n- other shite\n- which caused buildup of taurocholic acid (tca) \"TCA was associated with\nactivation of intestinal FXR, which can mediate bile acid, lipid, and\nglucose metabolism\".\n*** Intestinal Farnesoid X Receptor Signaling Modulates Metabolic Disease\n\n- fxr also affects ceramide synthesis in the small intestine according\n    to https://pubmed.ncbi.nlm.nih.gov/28249275/\n    which might be a mechanism for better sugar absoarbtion\n- but why would you produce ceramides in this case?\n\n*** Regulation of antibacterial defense in the small intestine by the nuclear bile acid receptor\nhttps://www.ncbi.nlm.nih.gov/pmc/articles/PMC1450165/\n\n- FXR activiation leads to many anti microbial gene expression\n\n** Berberine Ameliorates Periodontal Bone Loss by Regulating Gut Microbiota\nhttps://pubmed.ncbi.nlm.nih.gov/30199654/\n\nbasically just that it improves intestinal barrier, which could be why it\nimproves post-menopausal bone loss.\n\n** questions\n- why would this bile salt in latter intestine cause expression of anti-microbial genes?\n  How does the regulation get out of wack in the first place? Like shouldn't\n  these just be signaled all the time?\n  - Well maybe initial disbiosis causes bacterial BSH to interfere with normal\n    signalling and this breaks the whole system. Maybe these bacteria in a\n    sense evolved to do that\n" 536870913] [193 :nodes/id "e22d1b38-9b0c-46df-ac70-f9fe028527e7" 536870913] [193 :nodes/properties {"CATEGORY" "20220330224805-berberine", "ID" "e22d1b38-9b0c-46df-ac70-f9fe028527e7", "BLOCKED" "", "FILE" "/Users/kevinkrausse/Documents/repos/worknotes/org-roam/20220330224805-berberine.org", "PRIORITY" "B", "ITEM" "Regulation of antibacterial defense in the small intestine by the nuclear bile acid receptor"} 536870913] [193 :nodes/title "Regulation of antibacterial defense in the small intestine by the nuclear bile acid receptor" 536870913] [193 :nodes/value 2.095238097012043 536870913] [194 :link/source "a29523c4-74dc-4cf0-80cb-d66740edabcf" 536870914] [194 :link/target "ba5e9b97-1bbc-45dc-85f4-d9f3e6cf1b20" 536870914] [195 :link/source "2ce79228-cfbe-4da0-87e8-082fe0728b1d" 536870914] [195 :link/target "876a8e7d-8daf-4e9a-9f05-30eb0ea81061" 536870914] [196 :link/source "ec2c9b93-7906-431e-80f1-22ee402c76b1" 536870914] [196 :link/target "4c761d6c-e68a-45a2-90d6-62b47c45e0aa" 536870914] [197 :link/source "c8424162-ba5d-4134-a990-5b7fe189d106" 536870914] [197 :link/target "aa276919-dce8-4427-b939-9dea096a12a2" 536870914] [198 :link/source "1b40a630-fc14-4587-9d7c-348dbf856fa2" 536870914] [198 :link/target "f4a59434-6192-418c-bb7d-fb1b8412f45a" 536870914] [199 :link/source "0a93f971-ba2f-44a8-bee1-ad98b31bc245" 536870914] [199 :link/target "a262f204-b467-4012-beeb-fca8a629d0aa" 536870914] [200 :link/source "eced070a-cc4c-4b42-9556-43a1412d554f" 536870914] [200 :link/target "4e6061e9-b883-4b44-ba62-c9f4fb15262f" 536870914] [201 :link/source "0ed2fd64-dcf3-49ef-a42d-a2f893f2eeca" 536870914] [201 :link/target "876a8e7d-8daf-4e9a-9f05-30eb0ea81061" 536870914] [202 :link/source "6927c0a1-4bfd-476f-bf81-a6644bc09394" 536870914] [202 :link/target "269bc84d-7abe-4059-a90a-f35c254bddfb" 536870914] [203 :link/source "c9bfdc3c-2fbc-41f9-bb90-3f1af1165271" 536870914] [203 :link/target "eb039932-abd7-4a9b-89c9-d4f6e9d4adb1" 536870914] [204 :link/source "e6862ed2-ffc0-4d4f-bf94-d10c1c45e71b" 536870914] [204 :link/target "bf693fa1-eeb9-4c5c-a659-f400149e18fa" 536870914] [205 :link/source "d479f2d2-0cbb-4c91-a263-2ab6f504ca78" 536870914] [205 :link/target "6c2f6dee-77f5-451e-a76b-6a68a3f01498" 536870914] [206 :link/source "d295f68e-a5d2-4081-90c5-e6aa1eb47b11" 536870914] [206 :link/target "b77d4578-bc50-42a8-94c4-b11d27f78837" 536870914] [207 :link/source "e3ac4fcc-4ef1-4fce-9938-292af6ab8020" 536870914] [207 :link/target "ea23ff75-2ef5-4333-9fc8-2432a196891c" 536870914] [208 :link/source "c96bbc45-f182-4fe7-8bee-e876dc694b2c" 536870914] [208 :link/target "5cd35f00-71bc-47f2-b256-8830189ba73e" 536870914] [209 :link/source "99e82a29-42ac-47fb-9396-e738b314707a" 536870914] [209 :link/target "1eca4241-9815-471f-900c-d8864678ba9f" 536870914] [210 :link/source "3cb405e2-2764-44ae-9b5e-42b842d4abd1" 536870914] [210 :link/target "9dba0048-02d0-4bde-9866-50ca4a6bf2ff" 536870914] [211 :link/source "cd2c0a01-c5ce-4474-831f-041edee42bb3" 536870914] [211 :link/target "5cd35f00-71bc-47f2-b256-8830189ba73e" 536870914] [212 :link/source "e34756cb-0ea9-4f97-a982-e87f65a5ee1c" 536870914] [212 :link/target "8dcd5d3c-81d8-4836-9525-953de2522b77" 536870914] [213 :link/source "a2636b35-542d-45ba-aa89-15cc269fc074" 536870914] [213 :link/target "81a17d27-594a-4f01-9ec9-7686271bcf24" 536870914] [214 :link/source "e42315f6-b35e-428a-86ad-d71970ed1825" 536870914] [214 :link/target "f08e30aa-e83b-451f-88b7-fe954bab2f6e" 536870914] [215 :link/source "e34756cb-0ea9-4f97-a982-e87f65a5ee1c" 536870914] [215 :link/target "876a8e7d-8daf-4e9a-9f05-30eb0ea81061" 536870914] [216 :link/source "406a4a8d-4aa4-4538-9294-0a6097df0cc5" 536870914] [216 :link/target "9dba0048-02d0-4bde-9866-50ca4a6bf2ff" 536870914] [217 :link/source "82365fe3-8d59-4ae4-841e-2830f02d251a" 536870914] [217 :link/target "b77d4578-bc50-42a8-94c4-b11d27f78837" 536870914] [218 :link/source "34cf2840-1d8d-4283-b6ff-58287196b719" 536870914] [218 :link/target "4e007f1e-3e2b-4c96-98f0-58260d6ed0e2" 536870914] [219 :link/source "de85c368-7840-4102-b527-2d1c24d164d1" 536870914] [219 :link/target "3b618cff-e581-4cf0-b16b-91e563e72436" 536870914] [220 :link/source "8dcd5d3c-81d8-4836-9525-953de2522b77" 536870914] [220 :link/target "876a8e7d-8daf-4e9a-9f05-30eb0ea81061" 536870914] [221 :link/source "c96bbc45-f182-4fe7-8bee-e876dc694b2c" 536870914] [221 :link/target "014d95aa-bba2-4a62-9d92-182d0aac0a62" 536870914] [222 :link/source "406a4a8d-4aa4-4538-9294-0a6097df0cc5" 536870914] [222 :link/target "014d95aa-bba2-4a62-9d92-182d0aac0a62" 536870914] [223 :link/source "c8424162-ba5d-4134-a990-5b7fe189d106" 536870914] [223 :link/target "68f98853-0d3a-4f60-aed6-7fe6c29e4084" 536870914] [224 :link/source "aea9bcb4-0f5d-438a-b4df-99706a8f7527" 536870914] [224 :link/target "fead6bfc-126d-47d7-9f4a-1bdcd7b41da8" 536870914] [225 :link/source "faee692b-c853-4bdb-a5eb-267da5c48d29" 536870914] [225 :link/target "efadd1da-f54a-4cbc-bcba-ed6c349c89a5" 536870914] [226 :link/source "a04b1dfc-7642-4c2e-bced-6542b9d7d350" 536870914] [226 :link/target "4383801b-9fb7-4bc0-bb2b-2498da519d88" 536870914] [227 :link/source "cddc46b9-df1f-44bb-9a1a-1bebf19a8bbc" 536870914] [227 :link/target "a5fd6b10-d451-4e8f-89bb-e8eff37b4b0f" 536870914] [228 :link/source "1b40a630-fc14-4587-9d7c-348dbf856fa2" 536870914] [228 :link/target "334ffe1d-43dd-4f13-99a0-67cf89b73328" 536870914] [229 :link/source "82ed419e-60ed-4740-b670-87b433aa49c8" 536870914] [229 :link/target "03f07731-cc68-432c-9d16-9c2944f6a21c" 536870914] [230 :link/source "3cb405e2-2764-44ae-9b5e-42b842d4abd1" 536870914] [230 :link/target "014d95aa-bba2-4a62-9d92-182d0aac0a62" 536870914] [231 :link/source "4c761d6c-e68a-45a2-90d6-62b47c45e0aa" 536870914] [231 :link/target "a29523c4-74dc-4cf0-80cb-d66740edabcf" 536870914] [232 :link/source "94c04f66-82d8-4abe-b517-c718bb994cc5" 536870914] [232 :link/target "c7f85840-11a5-4b2c-b574-0c8a028f6a7e" 536870914] [233 :link/source "ab580cd6-ff4a-4d78-b648-75fcffaf4711" 536870914] [233 :link/target "cbc60d55-4187-4233-8bee-44d37e345392" 536870914] [234 :link/source "bdd841b3-53b0-4b0c-a81a-4b247435b4be" 536870914] [234 :link/target "ee83656e-7b72-4a3f-8759-629630d8437d" 536870914] [235 :link/source "82ed419e-60ed-4740-b670-87b433aa49c8" 536870914] [235 :link/target "876a8e7d-8daf-4e9a-9f05-30eb0ea81061" 536870914] [236 :link/source "4c761d6c-e68a-45a2-90d6-62b47c45e0aa" 536870914] [236 :link/target "0b0f840e-e1c4-4269-8f5b-7118cf1510f3" 536870914] [237 :link/source "4f9113d9-fef2-4f02-a826-54757c43159a" 536870914] [237 :link/target "b77d4578-bc50-42a8-94c4-b11d27f78837" 536870914] [238 :link/source "3b50af04-4a65-4c25-93a0-d51b93444317" 536870914] [238 :link/target "81a17d27-594a-4f01-9ec9-7686271bcf24" 536870914] [239 :link/source "269dd95e-bce8-4092-8761-4f5b78af4e41" 536870914] [239 :link/target "22b2f09e-14a0-45f7-97f3-d8d9b326675f" 536870914] [240 :link/source "6d87c5bf-dd93-4267-b713-fb3dc9fba0b0" 536870914] [240 :link/target "4e007f1e-3e2b-4c96-98f0-58260d6ed0e2" 536870914] [241 :link/source "b47d8757-c806-4559-b216-af68b02fe1a9" 536870914] [241 :link/target "334ffe1d-43dd-4f13-99a0-67cf89b73328" 536870914] [242 :link/source "94c04f66-82d8-4abe-b517-c718bb994cc5" 536870914] [242 :link/target "2bb8fe67-0197-422e-a4a9-f392764bbceb" 536870914] [243 :link/source "d295f68e-a5d2-4081-90c5-e6aa1eb47b11" 536870914] [243 :link/target "3b618cff-e581-4cf0-b16b-91e563e72436" 536870914] [244 :link/source "4d339c99-33b9-463c-9822-1f2469e11766" 536870914] [244 :link/target "4c761d6c-e68a-45a2-90d6-62b47c45e0aa" 536870914] [245 :link/source "c8424162-ba5d-4134-a990-5b7fe189d106" 536870914] [245 :link/target "6d87c5bf-dd93-4267-b713-fb3dc9fba0b0" 536870914] [246 :link/source "876a8e7d-8daf-4e9a-9f05-30eb0ea81061" 536870914] [246 :link/target "56b4adf3-311c-47ad-ac9a-63e256d00d9a" 536870914] [247 :link/source "82365fe3-8d59-4ae4-841e-2830f02d251a" 536870914] [247 :link/target "334ffe1d-43dd-4f13-99a0-67cf89b73328" 536870914] [248 :link/source "5cd35f00-71bc-47f2-b256-8830189ba73e" 536870914] [248 :link/target "c96bbc45-f182-4fe7-8bee-e876dc694b2c" 536870914] [249 :link/source "81e8e5c1-5904-4783-a9af-f129d14da743" 536870914] [249 :link/target "334ffe1d-43dd-4f13-99a0-67cf89b73328" 536870914] [250 :link/source "876a8e7d-8daf-4e9a-9f05-30eb0ea81061" 536870914] [250 :link/target "0ed2fd64-dcf3-49ef-a42d-a2f893f2eeca" 536870914] [251 :link/source "3be9fb0e-7384-4d63-a57a-eb62fd89ccc8" 536870914] [251 :link/target "34cf2840-1d8d-4283-b6ff-58287196b719" 536870914] [252 :link/source "13a39de3-44c1-4116-bb39-cbaac1768828" 536870914] [252 :link/target "1769e7fd-ea9f-462f-bcda-f890a1b8bc93" 536870914] [253 :link/source "e7ec209c-0d5a-4d23-95e2-c0e12fec4eda" 536870914] [253 :link/target "c7f85840-11a5-4b2c-b574-0c8a028f6a7e" 536870914] [254 :link/source "efadd1da-f54a-4cbc-bcba-ed6c349c89a5" 536870914] [254 :link/target "e081a0db-45ce-482b-adf6-540cd7acfba5" 536870914] [255 :link/source "3987f278-e0de-4c04-a710-76e1688bb910" 536870914] [255 :link/target "b77d4578-bc50-42a8-94c4-b11d27f78837" 536870914] [256 :link/source "82ed419e-60ed-4740-b670-87b433aa49c8" 536870914] [256 :link/target "e6eeb8fa-b223-45d2-96cf-11bbfc64a4f0" 536870914] [257 :link/source "aa276919-dce8-4427-b939-9dea096a12a2" 536870914] [257 :link/target "82365fe3-8d59-4ae4-841e-2830f02d251a" 536870914] [258 :link/source "6d87c5bf-dd93-4267-b713-fb3dc9fba0b0" 536870914] [258 :link/target "9dba0048-02d0-4bde-9866-50ca4a6bf2ff" 536870914] [259 :link/source "d295f68e-a5d2-4081-90c5-e6aa1eb47b11" 536870914] [259 :link/target "c8f29f62-436a-43e8-a4ef-b0eee15ab5b3" 536870914] [260 :link/source "a49bfbb3-9c08-42cf-909d-4a9f789aeb61" 536870914] [260 :link/target "f08e30aa-e83b-451f-88b7-fe954bab2f6e" 536870914] [261 :link/source "13a39de3-44c1-4116-bb39-cbaac1768828" 536870914] [261 :link/target "876a8e7d-8daf-4e9a-9f05-30eb0ea81061" 536870914] [262 :link/source "9a6affea-e97f-412d-9478-ff8d8f7f7683" 536870914] [262 :link/target "406a4a8d-4aa4-4538-9294-0a6097df0cc5" 536870914] [263 :link/source "e121b27a-4abc-46ea-b0c2-747512090ce4" 536870914] [263 :link/target "46fdb2ee-efa8-4fdb-bb6a-0e4be5437335" 536870914] [264 :link/source "fead6bfc-126d-47d7-9f4a-1bdcd7b41da8" 536870914] [264 :link/target "a49bfbb3-9c08-42cf-909d-4a9f789aeb61" 536870914] [265 :link/source "7b2d57bc-1f3c-4ab6-a4d6-b557cc1a7259" 536870914] [265 :link/target "269bc84d-7abe-4059-a90a-f35c254bddfb" 536870914] [266 :link/source "58795098-c56f-47ad-8fe9-4b70ecda3f7c" 536870914] [266 :link/target "903253ec-c378-4afd-881c-195447e4e4cb" 536870914] [267 :link/source "e121b27a-4abc-46ea-b0c2-747512090ce4" 536870914] [267 :link/target "bdd841b3-53b0-4b0c-a81a-4b247435b4be" 536870914] [268 :link/source "efadd1da-f54a-4cbc-bcba-ed6c349c89a5" 536870914] [268 :link/target "a98f2385-5e5e-40fd-b70e-828f71d2af8d" 536870914] [269 :link/source "9dc99445-2536-4cf2-ac19-6b3b22a590ea" 536870914] [269 :link/target "c7f85840-11a5-4b2c-b574-0c8a028f6a7e" 536870914] [270 :link/source "c48f4cd0-e81e-4577-8376-9cff30d43ff7" 536870914] [270 :link/target "876a8e7d-8daf-4e9a-9f05-30eb0ea81061" 536870914] [271 :link/source "e6862ed2-ffc0-4d4f-bf94-d10c1c45e71b" 536870914] [271 :link/target "b719d97b-7bf0-4a56-8188-5c64bb322c46" 536870914] [272 :link/source "13b73a91-e91e-47e8-a06c-76bced4bc9cc" 536870914] [272 :link/target "81a17d27-594a-4f01-9ec9-7686271bcf24" 536870914] [273 :link/source "d479f2d2-0cbb-4c91-a263-2ab6f504ca78" 536870914] [273 :link/target "d295f68e-a5d2-4081-90c5-e6aa1eb47b11" 536870914] [274 :link/source "5cd35f00-71bc-47f2-b256-8830189ba73e" 536870914] [274 :link/target "af90c362-ba7e-42d8-8a62-017d2749d784" 536870914] [275 :link/source "e22d1b38-9b0c-46df-ac70-f9fe028527e7" 536870914] [275 :link/target "919e9425-207e-45b9-9ab8-891fd455f7f4" 536870914] [276 :link/source "de11f165-8501-41ec-a9d2-85aa31b64588" 536870914] [276 :link/target "eb039932-abd7-4a9b-89c9-d4f6e9d4adb1" 536870914] [277 :link/source "c8424162-ba5d-4134-a990-5b7fe189d106" 536870914] [277 :link/target "34cf2840-1d8d-4283-b6ff-58287196b719" 536870914] [278 :link/source "81e8e5c1-5904-4783-a9af-f129d14da743" 536870914] [278 :link/target "065f0e41-b3e1-4d07-9da4-78be89e37aff" 536870914] [279 :link/source "c8424162-ba5d-4134-a990-5b7fe189d106" 536870914] [279 :link/target "a49bfbb3-9c08-42cf-909d-4a9f789aeb61" 536870914] [280 :link/source "0b0345c1-6f87-4204-803c-21c4b8049b89" 536870914] [280 :link/target "f08e30aa-e83b-451f-88b7-fe954bab2f6e" 536870914] [281 :link/source "2845a5da-3aca-4b88-85cb-f8382c6fa7bd" 536870914] [281 :link/target "4c761d6c-e68a-45a2-90d6-62b47c45e0aa" 536870914] [282 :link/source "88b7e6fc-183d-477d-99ce-c5c255c617dc" 536870914] [282 :link/target "aa276919-dce8-4427-b939-9dea096a12a2" 536870914] [283 :link/source "8dcd5d3c-81d8-4836-9525-953de2522b77" 536870914] [283 :link/target "e34756cb-0ea9-4f97-a982-e87f65a5ee1c" 536870914] [284 :link/source "cd2c0a01-c5ce-4474-831f-041edee42bb3" 536870914] [284 :link/target "b77d4578-bc50-42a8-94c4-b11d27f78837" 536870914] [285 :link/source "c7f85840-11a5-4b2c-b574-0c8a028f6a7e" 536870914] [285 :link/target "49a71561-f98b-42a5-812a-031f2a88c7ee" 536870914] [286 :link/source "f4a59434-6192-418c-bb7d-fb1b8412f45a" 536870914] [286 :link/target "334ffe1d-43dd-4f13-99a0-67cf89b73328" 536870914] [287 :link/source "d751c891-f4e9-4687-a2d5-800dbec5da9b" 536870914] [287 :link/target "ea23ff75-2ef5-4333-9fc8-2432a196891c" 536870914] [288 :link/source "82365fe3-8d59-4ae4-841e-2830f02d251a" 536870914] [288 :link/target "81e8e5c1-5904-4783-a9af-f129d14da743" 536870914] [289 :link/source "f08e30aa-e83b-451f-88b7-fe954bab2f6e" 536870914] [289 :link/target "b77d4578-bc50-42a8-94c4-b11d27f78837" 536870914] [290 :link/source "c7f85840-11a5-4b2c-b574-0c8a028f6a7e" 536870914] [290 :link/target "81a17d27-594a-4f01-9ec9-7686271bcf24" 536870914] [291 :link/source "3f2f352f-af50-4b01-ae2c-791bbb145ee1" 536870914] [291 :link/target "b77d4578-bc50-42a8-94c4-b11d27f78837" 536870914] [292 :link/source "793f1b7c-84c5-44c0-b818-80bdeb5df1cd" 536870914] [292 :link/target "9dba0048-02d0-4bde-9866-50ca4a6bf2ff" 536870914] [293 :link/source "48673a7d-7117-45ed-94da-12cc65aea6eb" 536870914] [293 :link/target "1eca4241-9815-471f-900c-d8864678ba9f" 536870914] [294 :link/source "6d87c5bf-dd93-4267-b713-fb3dc9fba0b0" 536870914] [294 :link/target "ef0a7129-b276-48a3-8907-81dbf1596eea" 536870914] [295 :link/source "065f0e41-b3e1-4d07-9da4-78be89e37aff" 536870914] [295 :link/target "334ffe1d-43dd-4f13-99a0-67cf89b73328" 536870914] [296 :link/source "6c6d9151-eff9-46ea-9d8b-a613f3341911" 536870914] [296 :link/target "f08e30aa-e83b-451f-88b7-fe954bab2f6e" 536870914] [297 :link/source "fead6bfc-126d-47d7-9f4a-1bdcd7b41da8" 536870914] [297 :link/target "31fde7cb-45ac-4656-8eb5-67b0406794e0" 536870914] [298 :link/source "13a39de3-44c1-4116-bb39-cbaac1768828" 536870914] [298 :link/target "b77d4578-bc50-42a8-94c4-b11d27f78837" 536870914] [299 :link/source "58795098-c56f-47ad-8fe9-4b70ecda3f7c" 536870914] [299 :link/target "83a85a81-5256-4915-8758-10777d5dc1fb" 536870914] [300 :link/source "f31487c6-759e-48cb-bd1b-48871eb35503" 536870914] [300 :link/target "903253ec-c378-4afd-881c-195447e4e4cb" 536870914] [301 :link/source "1635f9ee-30c7-48a5-8282-74fb1e9cc566" 536870914] [301 :link/target "eb039932-abd7-4a9b-89c9-d4f6e9d4adb1" 536870914] [302 :link/source "420a9a6e-217b-4dfc-b285-e869ff3d94ce" 536870914] [302 :link/target "4c761d6c-e68a-45a2-90d6-62b47c45e0aa" 536870914] [303 :link/source "edebe1c5-087e-4e0b-9c72-5a5640a32489" 536870914] [303 :link/target "f8d477e4-c321-4864-93fc-38dc7db66fc6" 536870914] [304 :link/source "82365fe3-8d59-4ae4-841e-2830f02d251a" 536870914] [304 :link/target "5cd35f00-71bc-47f2-b256-8830189ba73e" 536870914] [305 :link/source "13a39de3-44c1-4116-bb39-cbaac1768828" 536870914] [305 :link/target "d295f68e-a5d2-4081-90c5-e6aa1eb47b11" 536870914] [306 :link/source "2ce79228-cfbe-4da0-87e8-082fe0728b1d" 536870914] [306 :link/target "81a17d27-594a-4f01-9ec9-7686271bcf24" 536870914] [307 :link/source "de85c368-7840-4102-b527-2d1c24d164d1" 536870914] [307 :link/target "f7a10a2c-284c-4e42-a90b-d1a0465759ec" 536870914] [308 :link/source "269dd95e-bce8-4092-8761-4f5b78af4e41" 536870914] [308 :link/target "28f08ff2-eba5-4267-b8a7-005bb4c9cf46" 536870914] [309 :link/source "0a93f971-ba2f-44a8-bee1-ad98b31bc245" 536870914] [309 :link/target "a5b210c1-8236-4e1f-8a96-f10047885e5f" 536870914] [310 :link/source "5cd35f00-71bc-47f2-b256-8830189ba73e" 536870914] [310 :link/target "82365fe3-8d59-4ae4-841e-2830f02d251a" 536870914] [311 :link/source "e7ec209c-0d5a-4d23-95e2-c0e12fec4eda" 536870914] [311 :link/target "a262f204-b467-4012-beeb-fca8a629d0aa" 536870914] [312 :link/source "82365fe3-8d59-4ae4-841e-2830f02d251a" 536870914] [312 :link/target "aa276919-dce8-4427-b939-9dea096a12a2" 536870914] [313 :link/source "1eca4241-9815-471f-900c-d8864678ba9f" 536870914] [313 :link/target "ea23ff75-2ef5-4333-9fc8-2432a196891c" 536870914] [314 :link/source "876a8e7d-8daf-4e9a-9f05-30eb0ea81061" 536870914] [314 :link/target "efadd1da-f54a-4cbc-bcba-ed6c349c89a5" 536870914] [315 :link/source "81e8e5c1-5904-4783-a9af-f129d14da743" 536870914] [315 :link/target "82365fe3-8d59-4ae4-841e-2830f02d251a" 536870914] [316 :link/source "af90c362-ba7e-42d8-8a62-017d2749d784" 536870914] [316 :link/target "5cd35f00-71bc-47f2-b256-8830189ba73e" 536870914] [317 :link/source "bf693fa1-eeb9-4c5c-a659-f400149e18fa" 536870914] [317 :link/target "e6862ed2-ffc0-4d4f-bf94-d10c1c45e71b" 536870914] [318 :link/source "bf693fa1-eeb9-4c5c-a659-f400149e18fa" 536870914] [318 :link/target "bdd841b3-53b0-4b0c-a81a-4b247435b4be" 536870914] [319 :link/source "c48f4cd0-e81e-4577-8376-9cff30d43ff7" 536870914] [319 :link/target "ea23ff75-2ef5-4333-9fc8-2432a196891c" 536870914] [320 :link/source "efadd1da-f54a-4cbc-bcba-ed6c349c89a5" 536870914] [320 :link/target "add2a593-5edf-477a-aa2a-30fef8a4ad26" 536870914] [321 :link/source "31fde7cb-45ac-4656-8eb5-67b0406794e0" 536870914] [321 :link/target "b77d4578-bc50-42a8-94c4-b11d27f78837" 536870914] [322 :link/source "3bd788a9-4e68-49a0-9fe1-d31fb2720840" 536870914] [322 :link/target "ba5e9b97-1bbc-45dc-85f4-d9f3e6cf1b20" 536870914] [323 :link/source "d479f2d2-0cbb-4c91-a263-2ab6f504ca78" 536870914] [323 :link/target "b77d4578-bc50-42a8-94c4-b11d27f78837" 536870914] [324 :link/source "c8424162-ba5d-4134-a990-5b7fe189d106" 536870914] [324 :link/target "4e007f1e-3e2b-4c96-98f0-58260d6ed0e2" 536870914] [325 :link/source "eced070a-cc4c-4b42-9556-43a1412d554f" 536870914] [325 :link/target "876a8e7d-8daf-4e9a-9f05-30eb0ea81061" 536870914] [326 :link/source "6927c0a1-4bfd-476f-bf81-a6644bc09394" 536870914] [326 :link/target "aefbec29-99b8-459f-a729-41c3d4b7270c" 536870914] [327 :link/source "aa276919-dce8-4427-b939-9dea096a12a2" 536870914] [327 :link/target "014d95aa-bba2-4a62-9d92-182d0aac0a62" 536870914] [328 :link/source "46fdb2ee-efa8-4fdb-bb6a-0e4be5437335" 536870914] [328 :link/target "bf693fa1-eeb9-4c5c-a659-f400149e18fa" 536870914] [329 :link/source "0b1263e6-7b9a-450e-8775-06f5df043e6b" 536870914] [329 :link/target "f08e30aa-e83b-451f-88b7-fe954bab2f6e" 536870914] [330 :link/source "cf166372-ec8e-4fac-8387-a203a0111dc5" 536870914] [330 :link/target "81a17d27-594a-4f01-9ec9-7686271bcf24" 536870914] [331 :link/source "6d87c5bf-dd93-4267-b713-fb3dc9fba0b0" 536870914] [331 :link/target "a49bfbb3-9c08-42cf-909d-4a9f789aeb61" 536870914] [332 :link/source "dfca52e1-f74a-4ce3-9e54-5f8c3f47221c" 536870914] [332 :link/target "99e82a29-42ac-47fb-9396-e738b314707a" 536870914] [333 :link/source "9d53a16a-8849-42fc-a9cb-a0fdee24a61e" 536870914] [333 :link/target "d479f2d2-0cbb-4c91-a263-2ab6f504ca78" 536870914] [334 :link/source "22b2f09e-14a0-45f7-97f3-d8d9b326675f" 536870914] [334 :link/target "c7f85840-11a5-4b2c-b574-0c8a028f6a7e" 536870914] [335 :link/source "9d53a16a-8849-42fc-a9cb-a0fdee24a61e" 536870914] [335 :link/target "31fde7cb-45ac-4656-8eb5-67b0406794e0" 536870914] [336 :link/source "c8424162-ba5d-4134-a990-5b7fe189d106" 536870914] [336 :link/target "406a4a8d-4aa4-4538-9294-0a6097df0cc5" 536870914] [337 :link/source "22b2f09e-14a0-45f7-97f3-d8d9b326675f" 536870914] [337 :link/target "184f9ed0-8eec-44c8-82e2-e1a5cc4ad6ff" 536870914] [338 :link/source "aa276919-dce8-4427-b939-9dea096a12a2" 536870914] [338 :link/target "2428de28-f973-4e35-a8ff-d361dbd7c501" 536870914] [339 :link/source "c8424162-ba5d-4134-a990-5b7fe189d106" 536870914] [339 :link/target "3be9fb0e-7384-4d63-a57a-eb62fd89ccc8" 536870914] [340 :link/source "e6862ed2-ffc0-4d4f-bf94-d10c1c45e71b" 536870914] [340 :link/target "a04b1dfc-7642-4c2e-bced-6542b9d7d350" 536870914] [341 :link/source "49a71561-f98b-42a5-812a-031f2a88c7ee" 536870914] [341 :link/target "dc845692-28a8-4d53-bec6-e41102f54cac" 536870914] [342 :link/source "c8f29f62-436a-43e8-a4ef-b0eee15ab5b3" 536870914] [342 :link/target "593d017c-1756-4583-9856-077289ca2ea4" 536870914] [343 :link/source "a49bfbb3-9c08-42cf-909d-4a9f789aeb61" 536870914] [343 :link/target "9dba0048-02d0-4bde-9866-50ca4a6bf2ff" 536870914] [344 :link/source "1635f9ee-30c7-48a5-8282-74fb1e9cc566" 536870914] [344 :link/target "1eca4241-9815-471f-900c-d8864678ba9f" 536870914] [345 :link/source "e8fa18e5-c1ab-4c7f-995f-9ac46f2e6228" 536870914] [345 :link/target "ea23ff75-2ef5-4333-9fc8-2432a196891c" 536870914] [346 :link/source "876a8e7d-8daf-4e9a-9f05-30eb0ea81061" 536870914] [346 :link/target "61c265aa-07e7-438b-a511-68c9747381dc" 536870914] [347 :link/source "c8424162-ba5d-4134-a990-5b7fe189d106" 536870914] [347 :link/target "4f9113d9-fef2-4f02-a826-54757c43159a" 536870914] [348 :link/source "0ed2fd64-dcf3-49ef-a42d-a2f893f2eeca" 536870914] [348 :link/target "464850d2-9540-4b92-bc92-5751a4f064e4" 536870914] [349 :link/source "cddc46b9-df1f-44bb-9a1a-1bebf19a8bbc" 536870914] [349 :link/target "a3529826-3ac1-4413-a97a-893fcefc2d62" 536870914] [350 :link/source "2ff63832-112d-4b04-ad11-5a68944916bc" 536870914] [350 :link/target "a5b210c1-8236-4e1f-8a96-f10047885e5f" 536870914] [351 :link/source "4d339c99-33b9-463c-9822-1f2469e11766" 536870914] [351 :link/target "8db01ec6-b63d-45e3-ac58-1cdcaa65d07a" 536870914] [352 :link/source "82ed419e-60ed-4740-b670-87b433aa49c8" 536870914] [352 :link/target "406a4a8d-4aa4-4538-9294-0a6097df0cc5" 536870914] [353 :link/source "85720036-dfb5-41e3-8981-8a1b308753a5" 536870914] [353 :link/target "014d95aa-bba2-4a62-9d92-182d0aac0a62" 536870914] [354 :link/source "d8aaf539-f286-4ab7-bc60-d655c046243f" 536870914] [354 :link/target "ef0a7129-b276-48a3-8907-81dbf1596eea" 536870914] [355 :link/source "21cb5455-19d1-4516-80ce-dad565cb80c6" 536870914] [355 :link/target "81a17d27-594a-4f01-9ec9-7686271bcf24" 536870914] [356 :link/source "83a85a81-5256-4915-8758-10777d5dc1fb" 536870914] [356 :link/target "903253ec-c378-4afd-881c-195447e4e4cb" 536870914] [357 :link/source "31fde7cb-45ac-4656-8eb5-67b0406794e0" 536870914] [357 :link/target "334ffe1d-43dd-4f13-99a0-67cf89b73328" 536870914] [358 :link/source "bf693fa1-eeb9-4c5c-a659-f400149e18fa" 536870914] [358 :link/target "49a71561-f98b-42a5-812a-031f2a88c7ee" 536870914] [359 :link/source "bf693fa1-eeb9-4c5c-a659-f400149e18fa" 536870914] [359 :link/target "684beca0-7f73-4988-8a13-2e72198247f2" 536870914] [360 :link/source "1635f9ee-30c7-48a5-8282-74fb1e9cc566" 536870914] [360 :link/target "876a8e7d-8daf-4e9a-9f05-30eb0ea81061" 536870914] [361 :link/source "3be9fb0e-7384-4d63-a57a-eb62fd89ccc8" 536870914] [361 :link/target "b77d4578-bc50-42a8-94c4-b11d27f78837" 536870914] [362 :link/source "e6eeb8fa-b223-45d2-96cf-11bbfc64a4f0" 536870914] [362 :link/target "03f07731-cc68-432c-9d16-9c2944f6a21c" 536870914] [363 :link/source "e081a0db-45ce-482b-adf6-540cd7acfba5" 536870914] [363 :link/target "81a17d27-594a-4f01-9ec9-7686271bcf24" 536870914] [364 :link/source "d295f68e-a5d2-4081-90c5-e6aa1eb47b11" 536870914] [364 :link/target "c7f85840-11a5-4b2c-b574-0c8a028f6a7e" 536870914] [365 :link/source "efadd1da-f54a-4cbc-bcba-ed6c349c89a5" 536870914] [365 :link/target "876a8e7d-8daf-4e9a-9f05-30eb0ea81061" 536870914] [366 :link/source "b23d40cd-e712-427e-b393-fc2e462d1731" 536870914] [366 :link/target "d751c891-f4e9-4687-a2d5-800dbec5da9b" 536870914] [367 :link/source "0b1263e6-7b9a-450e-8775-06f5df043e6b" 536870914] [367 :link/target "82365fe3-8d59-4ae4-841e-2830f02d251a" 536870914] [368 :link/source "34e6446a-5674-49cb-af86-60c80b82db43" 536870914] [368 :link/target "c7f85840-11a5-4b2c-b574-0c8a028f6a7e" 536870914] [369 :link/source "ec2c9b93-7906-431e-80f1-22ee402c76b1" 536870914] [369 :link/target "9ee3fe7b-8e6a-49f1-9061-52a9689abc8c" 536870914] [370 :link/source "863ea47f-7cd3-4e41-9ab0-a1254de45051" 536870914] [370 :link/target "ea23ff75-2ef5-4333-9fc8-2432a196891c" 536870914] [371 :link/source "41037687-6d0b-466d-8ca7-1528b74c9eff" 536870914] [371 :link/target "e5e65dfc-85e0-4c9a-986c-14db1deaf453" 536870914] [372 :link/source "c8424162-ba5d-4134-a990-5b7fe189d106" 536870914] [372 :link/target "9dba0048-02d0-4bde-9866-50ca4a6bf2ff" 536870914] [373 :link/source "13a39de3-44c1-4116-bb39-cbaac1768828" 536870914] [373 :link/target "81a17d27-594a-4f01-9ec9-7686271bcf24" 536870914] [374 :link/source "fb84e338-8c95-4980-968f-c03b7c8cae06" 536870914] [374 :link/target "68a54c7b-545e-46e0-84bd-60940fa5f207" 536870914] [375 :link/source "5a5d437f-579a-44df-99fb-7d019d13156d" 536870914] [375 :link/target "81a17d27-594a-4f01-9ec9-7686271bcf24" 536870914] [376 :link/source "72de4103-c922-49a9-a112-a76eaa85f58c" 536870914] [376 :link/target "420a9a6e-217b-4dfc-b285-e869ff3d94ce" 536870914] [377 :link/source "88b7e6fc-183d-477d-99ce-c5c255c617dc" 536870914] [377 :link/target "334ffe1d-43dd-4f13-99a0-67cf89b73328" 536870914] [378 :link/source "e121b27a-4abc-46ea-b0c2-747512090ce4" 536870914] [378 :link/target "c91cb8e4-fcc0-4f01-a6ff-8508ea47ef8f" 536870914] [379 :link/source "61c265aa-07e7-438b-a511-68c9747381dc" 536870914] [379 :link/target "876a8e7d-8daf-4e9a-9f05-30eb0ea81061" 536870914] [380 :link/source "81e8e5c1-5904-4783-a9af-f129d14da743" 536870914] [380 :link/target "b77d4578-bc50-42a8-94c4-b11d27f78837" 536870914] [381 :link/source "34cf2840-1d8d-4283-b6ff-58287196b719" 536870914] [381 :link/target "793f1b7c-84c5-44c0-b818-80bdeb5df1cd" 536870914] [382 :link/source "c8424162-ba5d-4134-a990-5b7fe189d106" 536870914] [382 :link/target "919e9425-207e-45b9-9ab8-891fd455f7f4" 536870914] [383 :link/source "0a93f971-ba2f-44a8-bee1-ad98b31bc245" 536870914] [383 :link/target "68a54c7b-545e-46e0-84bd-60940fa5f207" 536870914] [384 :link/source "c8424162-ba5d-4134-a990-5b7fe189d106" 536870914] [384 :link/target "af90c362-ba7e-42d8-8a62-017d2749d784" 536870914] [385 :link/source "e081a0db-45ce-482b-adf6-540cd7acfba5" 536870914] [385 :link/target "aefbec29-99b8-459f-a729-41c3d4b7270c" 536870914] [386 :link/source "e6862ed2-ffc0-4d4f-bf94-d10c1c45e71b" 536870914] [386 :link/target "4383801b-9fb7-4bc0-bb2b-2498da519d88" 536870914] [387 :link/source "4abaafc1-f6ec-4db0-a299-8a6d2ed74390" 536870914] [387 :link/target "876a8e7d-8daf-4e9a-9f05-30eb0ea81061" 536870914] [388 :link/source "e081a0db-45ce-482b-adf6-540cd7acfba5" 536870914] [388 :link/target "876a8e7d-8daf-4e9a-9f05-30eb0ea81061" 536870914] [389 :link/source "81e8e5c1-5904-4783-a9af-f129d14da743" 536870914] [389 :link/target "84442082-22d3-487a-8666-980b528fa603" 536870914] [390 :link/source "fead6bfc-126d-47d7-9f4a-1bdcd7b41da8" 536870914] [390 :link/target "3f2f352f-af50-4b01-ae2c-791bbb145ee1" 536870914] [391 :link/source "aea9bcb4-0f5d-438a-b4df-99706a8f7527" 536870914] [391 :link/target "a49bfbb3-9c08-42cf-909d-4a9f789aeb61" 536870914] [392 :link/source "8dcd5d3c-81d8-4836-9525-953de2522b77" 536870914] [392 :link/target "a98f2385-5e5e-40fd-b70e-828f71d2af8d" 536870914] [393 :link/source "1eca4241-9815-471f-900c-d8864678ba9f" 536870914] [393 :link/target "e3ac4fcc-4ef1-4fce-9938-292af6ab8020" 536870914] [394 :link/source "a49bfbb3-9c08-42cf-909d-4a9f789aeb61" 536870914] [394 :link/target "19378c31-8c63-4f00-b18e-fb15f8ff07f5" 536870914] [395 :link/source "9dc99445-2536-4cf2-ac19-6b3b22a590ea" 536870914] [395 :link/target "e7ec209c-0d5a-4d23-95e2-c0e12fec4eda" 536870914] [396 :link/source "53e3138a-6619-4fd5-82ee-1c6c95aaf864" 536870914] [396 :link/target "7b2d57bc-1f3c-4ab6-a4d6-b557cc1a7259" 536870914] [397 :link/source "5cd35f00-71bc-47f2-b256-8830189ba73e" 536870914] [397 :link/target "b77d4578-bc50-42a8-94c4-b11d27f78837" 536870914] [398 :link/source "3cf39f46-34a0-40e3-9d50-5047307ac0a5" 536870914] [398 :link/target "b77d4578-bc50-42a8-94c4-b11d27f78837" 536870914] [399 :link/source "c8f29f62-436a-43e8-a4ef-b0eee15ab5b3" 536870914] [399 :link/target "03f07731-cc68-432c-9d16-9c2944f6a21c" 536870914] [400 :link/source "5fe502a0-db85-46cd-99c2-d7fce89af217" 536870914] [400 :link/target "334ffe1d-43dd-4f13-99a0-67cf89b73328" 536870914] [401 :link/source "99e82a29-42ac-47fb-9396-e738b314707a" 536870914] [401 :link/target "69b9e520-60df-42d5-b193-0bbc7a2521ef" 536870914] [402 :link/source "8dcd5d3c-81d8-4836-9525-953de2522b77" 536870914] [402 :link/target "add2a593-5edf-477a-aa2a-30fef8a4ad26" 536870914] [403 :link/source "c8424162-ba5d-4134-a990-5b7fe189d106" 536870914] [403 :link/target "e42315f6-b35e-428a-86ad-d71970ed1825" 536870914] [404 :link/source "31fde7cb-45ac-4656-8eb5-67b0406794e0" 536870914] [404 :link/target "406a4a8d-4aa4-4538-9294-0a6097df0cc5" 536870914] [405 :link/source "85720036-dfb5-41e3-8981-8a1b308753a5" 536870914] [405 :link/target "82365fe3-8d59-4ae4-841e-2830f02d251a" 536870914] [406 :link/source "7b2d57bc-1f3c-4ab6-a4d6-b557cc1a7259" 536870914] [406 :link/target "53e3138a-6619-4fd5-82ee-1c6c95aaf864" 536870914] [407 :link/source "876a8e7d-8daf-4e9a-9f05-30eb0ea81061" 536870914] [407 :link/target "48673a7d-7117-45ed-94da-12cc65aea6eb" 536870914] [408 :link/source "f4a59434-6192-418c-bb7d-fb1b8412f45a" 536870914] [408 :link/target "406a4a8d-4aa4-4538-9294-0a6097df0cc5" 536870914] [409 :link/source "8db01ec6-b63d-45e3-ac58-1cdcaa65d07a" 536870914] [409 :link/target "4c761d6c-e68a-45a2-90d6-62b47c45e0aa" 536870914] [410 :link/source "0b0f840e-e1c4-4269-8f5b-7118cf1510f3" 536870914] [410 :link/target "e2fa55ef-169e-42fe-8de0-43c1231b6cc2" 536870914] [411 :link/source "82ed419e-60ed-4740-b670-87b433aa49c8" 536870914] [411 :link/target "c48f4cd0-e81e-4577-8376-9cff30d43ff7" 536870914] [412 :link/source "cf166372-ec8e-4fac-8387-a203a0111dc5" 536870914] [412 :link/target "a5b210c1-8236-4e1f-8a96-f10047885e5f" 536870914] [413 :link/source "c96bbc45-f182-4fe7-8bee-e876dc694b2c" 536870914] [413 :link/target "a49db2ff-0264-4192-a734-0ee6402102df" 536870914] [414 :link/source "c9bfdc3c-2fbc-41f9-bb90-3f1af1165271" 536870914] [414 :link/target "1eca4241-9815-471f-900c-d8864678ba9f" 536870914] [415 :link/source "c8424162-ba5d-4134-a990-5b7fe189d106" 536870914] [415 :link/target "0b1263e6-7b9a-450e-8775-06f5df043e6b" 536870914] [416 :link/source "876a8e7d-8daf-4e9a-9f05-30eb0ea81061" 536870914] [416 :link/target "3cb405e2-2764-44ae-9b5e-42b842d4abd1" 536870914] [417 :link/source "e5e65dfc-85e0-4c9a-986c-14db1deaf453" 536870914] [417 :link/target "26843ee8-2d1a-4021-a576-60c06ad709f8" 536870914] [418 :link/source "c8424162-ba5d-4134-a990-5b7fe189d106" 536870914] [418 :link/target "1769e7fd-ea9f-462f-bcda-f890a1b8bc93" 536870914] [419 :link/source "e121b27a-4abc-46ea-b0c2-747512090ce4" 536870914] [419 :link/target "684beca0-7f73-4988-8a13-2e72198247f2" 536870914] [420 :link/source "d479f2d2-0cbb-4c91-a263-2ab6f504ca78" 536870914] [420 :link/target "014d95aa-bba2-4a62-9d92-182d0aac0a62" 536870914] [421 :link/source "3cb405e2-2764-44ae-9b5e-42b842d4abd1" 536870914] [421 :link/target "876a8e7d-8daf-4e9a-9f05-30eb0ea81061" 536870914] [422 :link/source "e5e65dfc-85e0-4c9a-986c-14db1deaf453" 536870914] [422 :link/target "184f9ed0-8eec-44c8-82e2-e1a5cc4ad6ff" 536870914] [423 :link/source "e121b27a-4abc-46ea-b0c2-747512090ce4" 536870914] [423 :link/target "de85c368-7840-4102-b527-2d1c24d164d1" 536870914] [424 :link/source "e8fa18e5-c1ab-4c7f-995f-9ac46f2e6228" 536870914] [424 :link/target "863ea47f-7cd3-4e41-9ab0-a1254de45051" 536870914] [425 :link/source "c8424162-ba5d-4134-a990-5b7fe189d106" 536870914] [425 :link/target "e22d1b38-9b0c-46df-ac70-f9fe028527e7" 536870914] [426 :link/source "88b7e6fc-183d-477d-99ce-c5c255c617dc" 536870914] [426 :link/target "ef0a7129-b276-48a3-8907-81dbf1596eea" 536870914] [427 :link/source "876a8e7d-8daf-4e9a-9f05-30eb0ea81061" 536870914] [427 :link/target "eced070a-cc4c-4b42-9556-43a1412d554f" 536870914] [428 :link/source "406a4a8d-4aa4-4538-9294-0a6097df0cc5" 536870914] [428 :link/target "b77d4578-bc50-42a8-94c4-b11d27f78837" 536870914] [429 :link/source "c8424162-ba5d-4134-a990-5b7fe189d106" 536870914] [429 :link/target "793f1b7c-84c5-44c0-b818-80bdeb5df1cd" 536870914] [430 :link/source "34e6446a-5674-49cb-af86-60c80b82db43" 536870914] [430 :link/target "cddc46b9-df1f-44bb-9a1a-1bebf19a8bbc" 536870914] [431 :link/source "593d017c-1756-4583-9856-077289ca2ea4" 536870914] [431 :link/target "ea23ff75-2ef5-4333-9fc8-2432a196891c" 536870914] [432 :link/source "9d53a16a-8849-42fc-a9cb-a0fdee24a61e" 536870914] [432 :link/target "406a4a8d-4aa4-4538-9294-0a6097df0cc5" 536870914] [433 :link/source "269dd95e-bce8-4092-8761-4f5b78af4e41" 536870914] [433 :link/target "c7f85840-11a5-4b2c-b574-0c8a028f6a7e" 536870914] [434 :link/source "ab580cd6-ff4a-4d78-b648-75fcffaf4711" 536870914] [434 :link/target "ae02ca23-5c6a-462f-89c8-4ec81a0e0e7e" 536870914] [435 :link/source "cddc46b9-df1f-44bb-9a1a-1bebf19a8bbc" 536870914] [435 :link/target "c7f85840-11a5-4b2c-b574-0c8a028f6a7e" 536870914] [436 :link/source "ba5e9b97-1bbc-45dc-85f4-d9f3e6cf1b20" 536870914] [436 :link/target "c7f85840-11a5-4b2c-b574-0c8a028f6a7e" 536870914] [437 :link/source "e2fa55ef-169e-42fe-8de0-43c1231b6cc2" 536870914] [437 :link/target "4c761d6c-e68a-45a2-90d6-62b47c45e0aa" 536870914] [438 :link/source "c48f4cd0-e81e-4577-8376-9cff30d43ff7" 536870914] [438 :link/target "82ed419e-60ed-4740-b670-87b433aa49c8" 536870914] [439 :link/source "6c6d9151-eff9-46ea-9d8b-a613f3341911" 536870914] [439 :link/target "cd2c0a01-c5ce-4474-831f-041edee42bb3" 536870914] [440 :link/source "c8424162-ba5d-4134-a990-5b7fe189d106" 536870914] [440 :link/target "75767c4c-6d11-4e9f-b3c5-ebdc81fce3ce" 536870914] [441 :link/source "c8424162-ba5d-4134-a990-5b7fe189d106" 536870914] [441 :link/target "cd2c0a01-c5ce-4474-831f-041edee42bb3" 536870914] [442 :link/source "b23d40cd-e712-427e-b393-fc2e462d1731" 536870914] [442 :link/target "ea23ff75-2ef5-4333-9fc8-2432a196891c" 536870914] [443 :link/source "16c2d427-48ac-48e4-87f1-d7fdc65afd98" 536870914] [443 :link/target "b719d97b-7bf0-4a56-8188-5c64bb322c46" 536870914] [444 :link/source "68f98853-0d3a-4f60-aed6-7fe6c29e4084" 536870914] [444 :link/target "406a4a8d-4aa4-4538-9294-0a6097df0cc5" 536870914] [445 :link/source "c8424162-ba5d-4134-a990-5b7fe189d106" 536870914] [445 :link/target "b77d4578-bc50-42a8-94c4-b11d27f78837" 536870914] [446 :link/source "0ed2fd64-dcf3-49ef-a42d-a2f893f2eeca" 536870914] [446 :link/target "903253ec-c378-4afd-881c-195447e4e4cb" 536870914] [447 :link/source "03f07731-cc68-432c-9d16-9c2944f6a21c" 536870914] [447 :link/target "269bc84d-7abe-4059-a90a-f35c254bddfb" 536870914] [448 :link/source "bb4a963e-92ac-43c2-b868-26899b9500a4" 536870914] [448 :link/target "c8c4efcf-4345-493d-937e-b4ec46cd277f" 536870914]]}